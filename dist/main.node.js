(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["SynthetixJs"] = factory();
	else
		root["SynthetixJs"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 288);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(162);


/***/ }),
/* 1 */
/***/ (function(module, exports) {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = assertString;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function assertString(input) {
  var isString = typeof input === 'string' || input instanceof String;

  if (!isString) {
    var invalidType;

    if (input === null) {
      invalidType = 'null';
    } else {
      invalidType = _typeof(input);

      if (invalidType === 'object' && input.constructor && input.constructor.hasOwnProperty('name')) {
        invalidType = input.constructor.name;
      } else {
        invalidType = "a ".concat(invalidType);
      }
    }

    throw new TypeError("Expected string but received ".concat(invalidType, "."));
  }
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _version_1 = __webpack_require__(71);
// Unknown Error
exports.UNKNOWN_ERROR = 'UNKNOWN_ERROR';
// Not implemented
exports.NOT_IMPLEMENTED = 'NOT_IMPLEMENTED';
// Missing new operator to an object
//  - name: The name of the class
exports.MISSING_NEW = 'MISSING_NEW';
// Call exception
//  - transaction: the transaction
//  - address?: the contract address
//  - args?: The arguments passed into the function
//  - method?: The Solidity method signature
//  - errorSignature?: The EIP848 error signature
//  - errorArgs?: The EIP848 error parameters
//  - reason: The reason (only for EIP848 "Error(string)")
exports.CALL_EXCEPTION = 'CALL_EXCEPTION';
// Invalid argument (e.g. value is incompatible with type) to a function:
//   - argument: The argument name that was invalid
//   - value: The value of the argument
exports.INVALID_ARGUMENT = 'INVALID_ARGUMENT';
// Missing argument to a function:
//   - count: The number of arguments received
//   - expectedCount: The number of arguments expected
exports.MISSING_ARGUMENT = 'MISSING_ARGUMENT';
// Too many arguments
//   - count: The number of arguments received
//   - expectedCount: The number of arguments expected
exports.UNEXPECTED_ARGUMENT = 'UNEXPECTED_ARGUMENT';
// Numeric Fault
//   - operation: the operation being executed
//   - fault: the reason this faulted
exports.NUMERIC_FAULT = 'NUMERIC_FAULT';
// Insufficien funds (< value + gasLimit * gasPrice)
//   - transaction: the transaction attempted
exports.INSUFFICIENT_FUNDS = 'INSUFFICIENT_FUNDS';
// Nonce has already been used
//   - transaction: the transaction attempted
exports.NONCE_EXPIRED = 'NONCE_EXPIRED';
// The replacement fee for the transaction is too low
//   - transaction: the transaction attempted
exports.REPLACEMENT_UNDERPRICED = 'REPLACEMENT_UNDERPRICED';
// Unsupported operation
//   - operation
exports.UNSUPPORTED_OPERATION = 'UNSUPPORTED_OPERATION';
var _permanentCensorErrors = false;
var _censorErrors = false;
// @TODO: Enum
function throwError(message, code, params) {
    if (_censorErrors) {
        throw new Error('unknown error');
    }
    if (!code) {
        code = exports.UNKNOWN_ERROR;
    }
    if (!params) {
        params = {};
    }
    var messageDetails = [];
    Object.keys(params).forEach(function (key) {
        try {
            messageDetails.push(key + '=' + JSON.stringify(params[key]));
        }
        catch (error) {
            messageDetails.push(key + '=' + JSON.stringify(params[key].toString()));
        }
    });
    messageDetails.push("version=" + _version_1.version);
    var reason = message;
    if (messageDetails.length) {
        message += ' (' + messageDetails.join(', ') + ')';
    }
    // @TODO: Any??
    var error = new Error(message);
    error.reason = reason;
    error.code = code;
    Object.keys(params).forEach(function (key) {
        error[key] = params[key];
    });
    throw error;
}
exports.throwError = throwError;
function checkNew(self, kind) {
    if (!(self instanceof kind)) {
        throwError('missing new', exports.MISSING_NEW, { name: kind.name });
    }
}
exports.checkNew = checkNew;
function checkArgumentCount(count, expectedCount, suffix) {
    if (!suffix) {
        suffix = '';
    }
    if (count < expectedCount) {
        throwError('missing argument' + suffix, exports.MISSING_ARGUMENT, { count: count, expectedCount: expectedCount });
    }
    if (count > expectedCount) {
        throwError('too many arguments' + suffix, exports.UNEXPECTED_ARGUMENT, { count: count, expectedCount: expectedCount });
    }
}
exports.checkArgumentCount = checkArgumentCount;
function setCensorship(censorship, permanent) {
    if (_permanentCensorErrors) {
        throwError('error censorship permanent', exports.UNSUPPORTED_OPERATION, { operation: 'setCensorship' });
    }
    _censorErrors = !!censorship;
    _permanentCensorErrors = !!permanent;
}
exports.setCensorship = setCensorship;
function checkNormalize() {
    try {
        // Make sure all forms of normalization are supported
        ["NFD", "NFC", "NFKD", "NFKC"].forEach(function (form) {
            try {
                "test".normalize(form);
            }
            catch (error) {
                throw new Error('missing ' + form);
            }
        });
        if (String.fromCharCode(0xe9).normalize('NFD') !== String.fromCharCode(0x65, 0x0301)) {
            throw new Error('broken implementation');
        }
    }
    catch (error) {
        throwError('platform missing String.prototype.normalize', exports.UNSUPPORTED_OPERATION, { operation: 'String.prototype.normalize', form: error.message });
    }
}
exports.checkNormalize = checkNormalize;
var LogLevels = { debug: 1, "default": 2, info: 2, warn: 3, error: 4, off: 5 };
var LogLevel = LogLevels["default"];
function setLogLevel(logLevel) {
    var level = LogLevels[logLevel];
    if (level == null) {
        warn("invliad log level - " + logLevel);
        return;
    }
    LogLevel = level;
}
exports.setLogLevel = setLogLevel;
function log(logLevel, args) {
    if (LogLevel > LogLevels[logLevel]) {
        return;
    }
    console.log.apply(console, args);
}
function warn() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    log("warn", args);
}
exports.warn = warn;
function info() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    log("info", args);
}
exports.info = info;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 *  Conversion Utilities
 *
 */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var errors = __importStar(__webpack_require__(4));
///////////////////////////////
function isHexable(value) {
    return !!(value.toHexString);
}
exports.isHexable = isHexable;
function addSlice(array) {
    if (array.slice) {
        return array;
    }
    array.slice = function () {
        var args = Array.prototype.slice.call(arguments);
        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
    };
    return array;
}
function isArrayish(value) {
    if (!value || parseInt(String(value.length)) != value.length || typeof (value) === 'string') {
        return false;
    }
    for (var i = 0; i < value.length; i++) {
        var v = value[i];
        if (v < 0 || v >= 256 || parseInt(String(v)) != v) {
            return false;
        }
    }
    return true;
}
exports.isArrayish = isArrayish;
function arrayify(value) {
    if (value == null) {
        errors.throwError('cannot convert null value to array', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
    }
    if (isHexable(value)) {
        value = value.toHexString();
    }
    if (typeof (value) === 'string') {
        var match = value.match(/^(0x)?[0-9a-fA-F]*$/);
        if (!match) {
            errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
        }
        if (match[1] !== '0x') {
            errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
        }
        value = value.substring(2);
        if (value.length % 2) {
            value = '0' + value;
        }
        var result = [];
        for (var i = 0; i < value.length; i += 2) {
            result.push(parseInt(value.substr(i, 2), 16));
        }
        return addSlice(new Uint8Array(result));
    }
    if (isArrayish(value)) {
        return addSlice(new Uint8Array(value));
    }
    errors.throwError('invalid arrayify value', null, { arg: 'value', value: value, type: typeof (value) });
    return null;
}
exports.arrayify = arrayify;
function concat(objects) {
    var arrays = [];
    var length = 0;
    for (var i = 0; i < objects.length; i++) {
        var object = arrayify(objects[i]);
        arrays.push(object);
        length += object.length;
    }
    var result = new Uint8Array(length);
    var offset = 0;
    for (var i = 0; i < arrays.length; i++) {
        result.set(arrays[i], offset);
        offset += arrays[i].length;
    }
    return addSlice(result);
}
exports.concat = concat;
function stripZeros(value) {
    var result = arrayify(value);
    if (result.length === 0) {
        return result;
    }
    // Find the first non-zero entry
    var start = 0;
    while (result[start] === 0) {
        start++;
    }
    // If we started with zeros, strip them
    if (start) {
        result = result.slice(start);
    }
    return result;
}
exports.stripZeros = stripZeros;
function padZeros(value, length) {
    value = arrayify(value);
    if (length < value.length) {
        throw new Error('cannot pad');
    }
    var result = new Uint8Array(length);
    result.set(value, length - value.length);
    return addSlice(result);
}
exports.padZeros = padZeros;
function isHexString(value, length) {
    if (typeof (value) !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
        return false;
    }
    if (length && value.length !== 2 + 2 * length) {
        return false;
    }
    return true;
}
exports.isHexString = isHexString;
var HexCharacters = '0123456789abcdef';
function hexlify(value) {
    if (isHexable(value)) {
        return value.toHexString();
    }
    if (typeof (value) === 'number') {
        if (value < 0) {
            errors.throwError('cannot hexlify negative value', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
        }
        // @TODO: Roll this into the above error as a numeric fault (overflow); next version, not backward compatible
        // We can about (value == MAX_INT) to as well, since that may indicate we underflowed already
        if (value >= 9007199254740991) {
            errors.throwError("out-of-range", errors.NUMERIC_FAULT, {
                operartion: "hexlify",
                fault: "out-of-safe-range"
            });
        }
        var hex = '';
        while (value) {
            hex = HexCharacters[value & 0x0f] + hex;
            value = Math.floor(value / 16);
        }
        if (hex.length) {
            if (hex.length % 2) {
                hex = '0' + hex;
            }
            return '0x' + hex;
        }
        return '0x00';
    }
    if (typeof (value) === 'string') {
        var match = value.match(/^(0x)?[0-9a-fA-F]*$/);
        if (!match) {
            errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
        }
        if (match[1] !== '0x') {
            errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
        }
        if (value.length % 2) {
            value = '0x0' + value.substring(2);
        }
        return value;
    }
    if (isArrayish(value)) {
        var result = [];
        for (var i = 0; i < value.length; i++) {
            var v = value[i];
            result.push(HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f]);
        }
        return '0x' + result.join('');
    }
    errors.throwError('invalid hexlify value', null, { arg: 'value', value: value });
    return 'never';
}
exports.hexlify = hexlify;
function hexDataLength(data) {
    if (!isHexString(data) || (data.length % 2) !== 0) {
        return null;
    }
    return (data.length - 2) / 2;
}
exports.hexDataLength = hexDataLength;
function hexDataSlice(data, offset, endOffset) {
    if (!isHexString(data)) {
        errors.throwError('invalid hex data', errors.INVALID_ARGUMENT, { arg: 'value', value: data });
    }
    if ((data.length % 2) !== 0) {
        errors.throwError('hex data length must be even', errors.INVALID_ARGUMENT, { arg: 'value', value: data });
    }
    offset = 2 + 2 * offset;
    if (endOffset != null) {
        return '0x' + data.substring(offset, 2 + 2 * endOffset);
    }
    return '0x' + data.substring(offset);
}
exports.hexDataSlice = hexDataSlice;
function hexStripZeros(value) {
    if (!isHexString(value)) {
        errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
    }
    while (value.length > 3 && value.substring(0, 3) === '0x0') {
        value = '0x' + value.substring(3);
    }
    return value;
}
exports.hexStripZeros = hexStripZeros;
function hexZeroPad(value, length) {
    if (!isHexString(value)) {
        errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
    }
    while (value.length < 2 * length + 2) {
        value = '0x0' + value.substring(2);
    }
    return value;
}
exports.hexZeroPad = hexZeroPad;
function isSignature(value) {
    return (value && value.r != null && value.s != null);
}
function splitSignature(signature) {
    var v = 0;
    var r = '0x', s = '0x';
    if (isSignature(signature)) {
        if (signature.v == null && signature.recoveryParam == null) {
            errors.throwError('at least on of recoveryParam or v must be specified', errors.INVALID_ARGUMENT, { argument: 'signature', value: signature });
        }
        r = hexZeroPad(signature.r, 32);
        s = hexZeroPad(signature.s, 32);
        v = signature.v;
        if (typeof (v) === 'string') {
            v = parseInt(v, 16);
        }
        var recoveryParam = signature.recoveryParam;
        if (recoveryParam == null && signature.v != null) {
            recoveryParam = 1 - (v % 2);
        }
        v = 27 + recoveryParam;
    }
    else {
        var bytes = arrayify(signature);
        if (bytes.length !== 65) {
            throw new Error('invalid signature');
        }
        r = hexlify(bytes.slice(0, 32));
        s = hexlify(bytes.slice(32, 64));
        v = bytes[64];
        if (v !== 27 && v !== 28) {
            v = 27 + (v % 2);
        }
    }
    return {
        r: r,
        s: s,
        recoveryParam: (v - 27),
        v: v
    };
}
exports.splitSignature = splitSignature;
function joinSignature(signature) {
    signature = splitSignature(signature);
    return hexlify(concat([
        signature.r,
        signature.s,
        (signature.recoveryParam ? '0x1c' : '0x1b')
    ]));
}
exports.joinSignature = joinSignature;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ethers = __importStar(__webpack_require__(69));
exports.ethers = ethers;
__export(__webpack_require__(69));


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var errors = __importStar(__webpack_require__(4));
function defineReadOnly(object, name, value) {
    Object.defineProperty(object, name, {
        enumerable: true,
        value: value,
        writable: false,
    });
}
exports.defineReadOnly = defineReadOnly;
// There are some issues with instanceof with npm link, so we use this
// to ensure types are what we expect.
function setType(object, type) {
    Object.defineProperty(object, '_ethersType', { configurable: false, value: type, writable: false });
}
exports.setType = setType;
function isType(object, type) {
    return (object && object._ethersType === type);
}
exports.isType = isType;
function resolveProperties(object) {
    var result = {};
    var promises = [];
    Object.keys(object).forEach(function (key) {
        var value = object[key];
        if (value instanceof Promise) {
            promises.push(value.then(function (value) {
                result[key] = value;
                return null;
            }));
        }
        else {
            result[key] = value;
        }
    });
    return Promise.all(promises).then(function () {
        return result;
    });
}
exports.resolveProperties = resolveProperties;
function checkProperties(object, properties) {
    if (!object || typeof (object) !== 'object') {
        errors.throwError('invalid object', errors.INVALID_ARGUMENT, {
            argument: 'object',
            value: object
        });
    }
    Object.keys(object).forEach(function (key) {
        if (!properties[key]) {
            errors.throwError('invalid object key - ' + key, errors.INVALID_ARGUMENT, {
                argument: 'transaction',
                value: object,
                key: key
            });
        }
    });
}
exports.checkProperties = checkProperties;
function shallowCopy(object) {
    var result = {};
    for (var key in object) {
        result[key] = object[key];
    }
    return result;
}
exports.shallowCopy = shallowCopy;
var opaque = { boolean: true, number: true, string: true };
function deepCopy(object, frozen) {
    // Opaque objects are not mutable, so safe to copy by assignment
    if (object === undefined || object === null || opaque[typeof (object)]) {
        return object;
    }
    // Arrays are mutable, so we need to create a copy
    if (Array.isArray(object)) {
        var result = object.map(function (item) { return deepCopy(item, frozen); });
        if (frozen) {
            Object.freeze(result);
        }
        return result;
    }
    if (typeof (object) === 'object') {
        // Some internal objects, which are already immutable
        if (isType(object, 'BigNumber')) {
            return object;
        }
        if (isType(object, 'Description')) {
            return object;
        }
        if (isType(object, 'Indexed')) {
            return object;
        }
        var result = {};
        for (var key in object) {
            var value = object[key];
            if (value === undefined) {
                continue;
            }
            defineReadOnly(result, key, deepCopy(value, frozen));
        }
        if (frozen) {
            Object.freeze(result);
        }
        return result;
    }
    // The function type is also immutable, so safe to copy by assignment
    if (typeof (object) === 'function') {
        return object;
    }
    throw new Error('Cannot deepCopy ' + typeof (object));
}
exports.deepCopy = deepCopy;
// See: https://github.com/isaacs/inherits/blob/master/inherits_browser.js
function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
}
function inheritable(parent) {
    return function (child) {
        inherits(child, parent);
        defineReadOnly(child, 'inherits', inheritable(child));
    };
}
exports.inheritable = inheritable;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = __webpack_require__(70).Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})( false || module, this);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(110)(module)))

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = __webpack_require__(27);
var errors_1 = __webpack_require__(4);
var bytes_1 = __webpack_require__(5);
///////////////////////////////
var UnicodeNormalizationForm;
(function (UnicodeNormalizationForm) {
    UnicodeNormalizationForm["current"] = "";
    UnicodeNormalizationForm["NFC"] = "NFC";
    UnicodeNormalizationForm["NFD"] = "NFD";
    UnicodeNormalizationForm["NFKC"] = "NFKC";
    UnicodeNormalizationForm["NFKD"] = "NFKD";
})(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));
;
// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
function toUtf8Bytes(str, form) {
    if (form === void 0) { form = UnicodeNormalizationForm.current; }
    if (form != UnicodeNormalizationForm.current) {
        errors_1.checkNormalize();
        str = str.normalize(form);
    }
    var result = [];
    for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if (c < 0x80) {
            result.push(c);
        }
        else if (c < 0x800) {
            result.push((c >> 6) | 0xc0);
            result.push((c & 0x3f) | 0x80);
        }
        else if ((c & 0xfc00) == 0xd800) {
            i++;
            var c2 = str.charCodeAt(i);
            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {
                throw new Error('invalid utf-8 string');
            }
            // Surrogate Pair
            c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
            result.push((c >> 18) | 0xf0);
            result.push(((c >> 12) & 0x3f) | 0x80);
            result.push(((c >> 6) & 0x3f) | 0x80);
            result.push((c & 0x3f) | 0x80);
        }
        else {
            result.push((c >> 12) | 0xe0);
            result.push(((c >> 6) & 0x3f) | 0x80);
            result.push((c & 0x3f) | 0x80);
        }
    }
    return bytes_1.arrayify(result);
}
exports.toUtf8Bytes = toUtf8Bytes;
;
// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
function toUtf8String(bytes, ignoreErrors) {
    bytes = bytes_1.arrayify(bytes);
    var result = '';
    var i = 0;
    // Invalid bytes are ignored
    while (i < bytes.length) {
        var c = bytes[i++];
        // 0xxx xxxx
        if (c >> 7 === 0) {
            result += String.fromCharCode(c);
            continue;
        }
        // Multibyte; how many bytes left for this character?
        var extraLength = null;
        var overlongMask = null;
        // 110x xxxx 10xx xxxx
        if ((c & 0xe0) === 0xc0) {
            extraLength = 1;
            overlongMask = 0x7f;
            // 1110 xxxx 10xx xxxx 10xx xxxx
        }
        else if ((c & 0xf0) === 0xe0) {
            extraLength = 2;
            overlongMask = 0x7ff;
            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
        }
        else if ((c & 0xf8) === 0xf0) {
            extraLength = 3;
            overlongMask = 0xffff;
        }
        else {
            if (!ignoreErrors) {
                if ((c & 0xc0) === 0x80) {
                    throw new Error('invalid utf8 byte sequence; unexpected continuation byte');
                }
                throw new Error('invalid utf8 byte sequence; invalid prefix');
            }
            continue;
        }
        // Do we have enough bytes in our data?
        if (i + extraLength > bytes.length) {
            if (!ignoreErrors) {
                throw new Error('invalid utf8 byte sequence; too short');
            }
            // If there is an invalid unprocessed byte, skip continuation bytes
            for (; i < bytes.length; i++) {
                if (bytes[i] >> 6 !== 0x02) {
                    break;
                }
            }
            continue;
        }
        // Remove the length prefix from the char
        var res = c & ((1 << (8 - extraLength - 1)) - 1);
        for (var j = 0; j < extraLength; j++) {
            var nextChar = bytes[i];
            // Invalid continuation byte
            if ((nextChar & 0xc0) != 0x80) {
                res = null;
                break;
            }
            ;
            res = (res << 6) | (nextChar & 0x3f);
            i++;
        }
        if (res === null) {
            if (!ignoreErrors) {
                throw new Error('invalid utf8 byte sequence; invalid continuation byte');
            }
            continue;
        }
        // Check for overlong seuences (more bytes than needed)
        if (res <= overlongMask) {
            if (!ignoreErrors) {
                throw new Error('invalid utf8 byte sequence; overlong');
            }
            continue;
        }
        // Maximum code point
        if (res > 0x10ffff) {
            if (!ignoreErrors) {
                throw new Error('invalid utf8 byte sequence; out-of-range');
            }
            continue;
        }
        // Reserved for UTF-16 surrogate halves
        if (res >= 0xd800 && res <= 0xdfff) {
            if (!ignoreErrors) {
                throw new Error('invalid utf8 byte sequence; utf-16 surrogate');
            }
            continue;
        }
        if (res <= 0xffff) {
            result += String.fromCharCode(res);
            continue;
        }
        res -= 0x10000;
        result += String.fromCharCode(((res >> 10) & 0x3ff) + 0xd800, (res & 0x3ff) + 0xdc00);
    }
    return result;
}
exports.toUtf8String = toUtf8String;
function formatBytes32String(text) {
    // Get the bytes
    var bytes = toUtf8Bytes(text);
    // Check we have room for null-termination
    if (bytes.length > 31) {
        throw new Error('bytes32 string must be less than 32 bytes');
    }
    // Zero-pad (implicitly null-terminates)
    return bytes_1.hexlify(bytes_1.concat([bytes, constants_1.HashZero]).slice(0, 32));
}
exports.formatBytes32String = formatBytes32String;
function parseBytes32String(bytes) {
    var data = bytes_1.arrayify(bytes);
    // Must be 32 bytes with a null-termination
    if (data.length !== 32) {
        throw new Error('invalid bytes32 - not 32 bytes long');
    }
    if (data[31] !== 0) {
        throw new Error('invalid bytes32 sdtring - no null terminator');
    }
    // Find the null termination
    var length = 31;
    while (data[length - 1] === 0) {
        length--;
    }
    // Determine the string value
    return toUtf8String(data.slice(0, length));
}
exports.parseBytes32String = parseBytes32String;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(87);

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Function equal to merge with the difference being that no reference
 * to original objects is kept.
 *
 * @see merge
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function deepMerge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = deepMerge(result[key], val);
    } else if (typeof val === 'object') {
      result[key] = deepMerge({}, val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  deepMerge: deepMerge,
  extend: extend,
  trim: trim
};


/***/ }),
/* 11 */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var elliptic = exports;

elliptic.version = __webpack_require__(114).version;
elliptic.utils = __webpack_require__(115);
elliptic.rand = __webpack_require__(52);
elliptic.hmacDRBG = __webpack_require__(116);
elliptic.curve = __webpack_require__(41);
elliptic.curves = __webpack_require__(128);

// Protocols
elliptic.ec = __webpack_require__(130);
elliptic.eddsa = __webpack_require__(133);


/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;
var BN = __webpack_require__(8);
var minAssert = __webpack_require__(13);
var minUtils = __webpack_require__(82);

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w, bits) {
  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
  naf.fill(0);

  var ws = 1 << (w + 1);
  var k = num.clone();

  for (var i = 0; i < naf.length; i++) {
    var z;
    var mod = k.andln(ws - 1);
    if (k.isOdd()) {
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf[i] = z;
    k.iushrn(1);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
           this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                     bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;



/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *  BigNumber
 *
 *  A wrapper around the BN.js object. We use the BN.js library
 *  because it is used by elliptic, so it is required regardles.
 *
 */
var bn_js_1 = __importDefault(__webpack_require__(8));
var bytes_1 = __webpack_require__(5);
var properties_1 = __webpack_require__(7);
var errors = __importStar(__webpack_require__(4));
var BN_1 = new bn_js_1.default.BN(-1);
function toHex(bn) {
    var value = bn.toString(16);
    if (value[0] === '-') {
        if ((value.length % 2) === 0) {
            return '-0x0' + value.substring(1);
        }
        return "-0x" + value.substring(1);
    }
    if ((value.length % 2) === 1) {
        return '0x0' + value;
    }
    return '0x' + value;
}
function toBN(value) {
    return _bnify(bigNumberify(value));
}
function toBigNumber(bn) {
    return new BigNumber(toHex(bn));
}
function _bnify(value) {
    var hex = value._hex;
    if (hex[0] === '-') {
        return (new bn_js_1.default.BN(hex.substring(3), 16)).mul(BN_1);
    }
    return new bn_js_1.default.BN(hex.substring(2), 16);
}
var BigNumber = /** @class */ (function () {
    function BigNumber(value) {
        errors.checkNew(this, BigNumber);
        properties_1.setType(this, 'BigNumber');
        if (typeof (value) === 'string') {
            if (bytes_1.isHexString(value)) {
                if (value == '0x') {
                    value = '0x0';
                }
                properties_1.defineReadOnly(this, '_hex', value);
            }
            else if (value[0] === '-' && bytes_1.isHexString(value.substring(1))) {
                properties_1.defineReadOnly(this, '_hex', value);
            }
            else if (value.match(/^-?[0-9]*$/)) {
                if (value == '') {
                    value = '0';
                }
                properties_1.defineReadOnly(this, '_hex', toHex(new bn_js_1.default.BN(value)));
            }
            else {
                errors.throwError('invalid BigNumber string value', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
            }
        }
        else if (typeof (value) === 'number') {
            if (parseInt(String(value)) !== value) {
                errors.throwError('underflow', errors.NUMERIC_FAULT, { operation: 'setValue', fault: 'underflow', value: value, outputValue: parseInt(String(value)) });
            }
            try {
                properties_1.defineReadOnly(this, '_hex', toHex(new bn_js_1.default.BN(value)));
            }
            catch (error) {
                errors.throwError('overflow', errors.NUMERIC_FAULT, { operation: 'setValue', fault: 'overflow', details: error.message });
            }
        }
        else if (value instanceof BigNumber) {
            properties_1.defineReadOnly(this, '_hex', value._hex);
        }
        else if (value.toHexString) {
            properties_1.defineReadOnly(this, '_hex', toHex(toBN(value.toHexString())));
        }
        else if (value._hex && bytes_1.isHexString(value._hex)) {
            properties_1.defineReadOnly(this, '_hex', value._hex);
        }
        else if (bytes_1.isArrayish(value)) {
            properties_1.defineReadOnly(this, '_hex', toHex(new bn_js_1.default.BN(bytes_1.hexlify(value).substring(2), 16)));
        }
        else {
            errors.throwError('invalid BigNumber value', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
        }
    }
    BigNumber.prototype.fromTwos = function (value) {
        return toBigNumber(_bnify(this).fromTwos(value));
    };
    BigNumber.prototype.toTwos = function (value) {
        return toBigNumber(_bnify(this).toTwos(value));
    };
    BigNumber.prototype.abs = function () {
        if (this._hex[0] === '-') {
            return toBigNumber(_bnify(this).mul(BN_1));
        }
        return this;
    };
    BigNumber.prototype.add = function (other) {
        return toBigNumber(_bnify(this).add(toBN(other)));
    };
    BigNumber.prototype.sub = function (other) {
        return toBigNumber(_bnify(this).sub(toBN(other)));
    };
    BigNumber.prototype.div = function (other) {
        var o = bigNumberify(other);
        if (o.isZero()) {
            errors.throwError('division by zero', errors.NUMERIC_FAULT, { operation: 'divide', fault: 'division by zero' });
        }
        return toBigNumber(_bnify(this).div(toBN(other)));
    };
    BigNumber.prototype.mul = function (other) {
        return toBigNumber(_bnify(this).mul(toBN(other)));
    };
    BigNumber.prototype.mod = function (other) {
        return toBigNumber(_bnify(this).mod(toBN(other)));
    };
    BigNumber.prototype.pow = function (other) {
        return toBigNumber(_bnify(this).pow(toBN(other)));
    };
    BigNumber.prototype.maskn = function (value) {
        return toBigNumber(_bnify(this).maskn(value));
    };
    BigNumber.prototype.eq = function (other) {
        return _bnify(this).eq(toBN(other));
    };
    BigNumber.prototype.lt = function (other) {
        return _bnify(this).lt(toBN(other));
    };
    BigNumber.prototype.lte = function (other) {
        return _bnify(this).lte(toBN(other));
    };
    BigNumber.prototype.gt = function (other) {
        return _bnify(this).gt(toBN(other));
    };
    BigNumber.prototype.gte = function (other) {
        return _bnify(this).gte(toBN(other));
    };
    BigNumber.prototype.isZero = function () {
        return _bnify(this).isZero();
    };
    BigNumber.prototype.toNumber = function () {
        try {
            return _bnify(this).toNumber();
        }
        catch (error) {
            errors.throwError('overflow', errors.NUMERIC_FAULT, { operation: 'setValue', fault: 'overflow', details: error.message });
        }
        return null;
    };
    BigNumber.prototype.toString = function () {
        return _bnify(this).toString(10);
    };
    BigNumber.prototype.toHexString = function () {
        return this._hex;
    };
    BigNumber.isBigNumber = function (value) {
        return properties_1.isType(value, 'BigNumber');
    };
    return BigNumber;
}());
exports.BigNumber = BigNumber;
function bigNumberify(value) {
    if (BigNumber.isBigNumber(value)) {
        return value;
    }
    return new BigNumber(value);
}
exports.bigNumberify = bigNumberify;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// We use this for base 36 maths
var bn_js_1 = __importDefault(__webpack_require__(8));
var bytes_1 = __webpack_require__(5);
var keccak256_1 = __webpack_require__(19);
var rlp_1 = __webpack_require__(36);
var errors = __webpack_require__(4);
///////////////////////////////
function getChecksumAddress(address) {
    if (typeof (address) !== 'string' || !address.match(/^0x[0-9A-Fa-f]{40}$/)) {
        errors.throwError('invalid address', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
    }
    address = address.toLowerCase();
    var chars = address.substring(2).split('');
    var hashed = new Uint8Array(40);
    for (var i_1 = 0; i_1 < 40; i_1++) {
        hashed[i_1] = chars[i_1].charCodeAt(0);
    }
    hashed = bytes_1.arrayify(keccak256_1.keccak256(hashed));
    for (var i = 0; i < 40; i += 2) {
        if ((hashed[i >> 1] >> 4) >= 8) {
            chars[i] = chars[i].toUpperCase();
        }
        if ((hashed[i >> 1] & 0x0f) >= 8) {
            chars[i + 1] = chars[i + 1].toUpperCase();
        }
    }
    return '0x' + chars.join('');
}
// Shims for environments that are missing some required constants and functions
var MAX_SAFE_INTEGER = 0x1fffffffffffff;
function log10(x) {
    if (Math.log10) {
        return Math.log10(x);
    }
    return Math.log(x) / Math.LN10;
}
// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
// Create lookup table
var ibanLookup = {};
for (var i = 0; i < 10; i++) {
    ibanLookup[String(i)] = String(i);
}
for (var i = 0; i < 26; i++) {
    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
}
// How many decimal digits can we process? (for 64-bit float, this is 15)
var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
function ibanChecksum(address) {
    address = address.toUpperCase();
    address = address.substring(4) + address.substring(0, 2) + '00';
    var expanded = '';
    address.split('').forEach(function (c) {
        expanded += ibanLookup[c];
    });
    // Javascript can handle integers safely up to 15 (decimal) digits
    while (expanded.length >= safeDigits) {
        var block = expanded.substring(0, safeDigits);
        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
    }
    var checksum = String(98 - (parseInt(expanded, 10) % 97));
    while (checksum.length < 2) {
        checksum = '0' + checksum;
    }
    return checksum;
}
;
function getAddress(address) {
    var result = null;
    if (typeof (address) !== 'string') {
        errors.throwError('invalid address', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
    }
    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
        // Missing the 0x prefix
        if (address.substring(0, 2) !== '0x') {
            address = '0x' + address;
        }
        result = getChecksumAddress(address);
        // It is a checksummed address with a bad checksum
        if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
            errors.throwError('bad address checksum', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
        }
        // Maybe ICAP? (we only support direct mode)
    }
    else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
        // It is an ICAP address with a bad checksum
        if (address.substring(2, 4) !== ibanChecksum(address)) {
            errors.throwError('bad icap checksum', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
        }
        result = (new bn_js_1.default.BN(address.substring(4), 36)).toString(16);
        while (result.length < 40) {
            result = '0' + result;
        }
        result = getChecksumAddress('0x' + result);
    }
    else {
        errors.throwError('invalid address', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
    }
    return result;
}
exports.getAddress = getAddress;
function getIcapAddress(address) {
    var base36 = (new bn_js_1.default.BN(getAddress(address).substring(2), 16)).toString(36).toUpperCase();
    while (base36.length < 30) {
        base36 = '0' + base36;
    }
    return 'XE' + ibanChecksum('XE00' + base36) + base36;
}
exports.getIcapAddress = getIcapAddress;
// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
function getContractAddress(transaction) {
    if (!transaction.from) {
        throw new Error('missing from address');
    }
    var nonce = transaction.nonce;
    return getAddress('0x' + keccak256_1.keccak256(rlp_1.encode([
        getAddress(transaction.from),
        bytes_1.stripZeros(bytes_1.hexlify(nonce))
    ])).substring(26));
}
exports.getContractAddress = getContractAddress;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(13);
var inherits = __webpack_require__(22);

exports.inherits = inherits;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(13);
var inherits = __webpack_require__(22);

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var sha3 = __webpack_require__(111);
var bytes_1 = __webpack_require__(5);
function keccak256(data) {
    return '0x' + sha3.keccak_256(bytes_1.arrayify(data));
}
exports.keccak256 = keccak256;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

module.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=22)}([function(e,t){e.exports=__webpack_require__(0)},function(e,t){e.exports=__webpack_require__(1)},function(e,t){e.exports=__webpack_require__(11)},function(e,t){e.exports=__webpack_require__(30)},function(e,t){e.exports=__webpack_require__(2)},function(e,t){e.exports=__webpack_require__(164)},function(e,t){e.exports=__webpack_require__(165)},function(e,t){e.exports=__webpack_require__(50)},function(e,t){e.exports=__webpack_require__(67)},function(e,t){e.exports=__webpack_require__(172)},function(e,t){e.exports=__webpack_require__(6)},function(e,t){e.exports=__webpack_require__(68)},function(e,t){e.exports=__webpack_require__(173)},function(e,t){e.exports=__webpack_require__(174)},function(e,t){e.exports=__webpack_require__(23)},function(e,t){e.exports=__webpack_require__(24)},function(e,t){e.exports=__webpack_require__(25)},function(e,t){e.exports=__webpack_require__(193)},function(e,t){e.exports=__webpack_require__(221)},function(e,t){e.exports=__webpack_require__(282)},function(e){e.exports=JSON.parse('{"a":"2.10.1"}')},function(e,t){e.exports=__webpack_require__(283)},function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"byte2hexStr",function(){return F}),n.d(r,"bytesToString",function(){return C}),n.d(r,"hextoString",function(){return E}),n.d(r,"byteArray2hexStr",function(){return O}),n.d(r,"base64DecodeFromString",function(){return q}),n.d(r,"base64EncodeToString",function(){return D});var i={};n.r(i),n.d(i,"bin2String",function(){return z}),n.d(i,"arrayEquals",function(){return M}),n.d(i,"stringToBytes",function(){return J}),n.d(i,"byte2hexStr",function(){return F}),n.d(i,"bytesToString",function(){return C}),n.d(i,"hextoString",function(){return E}),n.d(i,"byteArray2hexStr",function(){return O}),n.d(i,"base64DecodeFromString",function(){return q}),n.d(i,"base64EncodeToString",function(){return D}),n.d(i,"hexChar2byte",function(){return G}),n.d(i,"isHexChar",function(){return Y}),n.d(i,"hexStr2byteArray",function(){return X}),n.d(i,"strToDate",function(){return Z}),n.d(i,"isNumber",function(){return $}),n.d(i,"getStringType",function(){return Q});var s={};n.r(s),n.d(s,"encode58",function(){return ie}),n.d(s,"decode58",function(){return se});var o={};n.r(o),n.d(o,"keccak256",function(){return ue}),n.d(o,"sha256",function(){return ce}),n.d(o,"toUtf8Bytes",function(){return de}),n.d(o,"recoverAddress",function(){return le}),n.d(o,"SigningKey",function(){return he}),n.d(o,"AbiCoder",function(){return fe});var a={};n.r(a),n.d(a,"getBase58CheckAddress",function(){return ve}),n.d(a,"decodeBase58Address",function(){return pe}),n.d(a,"signTransaction",function(){return ge}),n.d(a,"arrayToBase64String",function(){return be}),n.d(a,"signBytes",function(){return me}),n.d(a,"getRowBytesFromTransactionBase64",function(){return ye}),n.d(a,"genPriKey",function(){return ke}),n.d(a,"computeAddress",function(){return xe}),n.d(a,"getAddressFromPriKey",function(){return we}),n.d(a,"decode58Check",function(){return Ie}),n.d(a,"isAddressValid",function(){return We}),n.d(a,"getBase58CheckAddressFromPriKeyBase64String",function(){return Ae}),n.d(a,"getHexStrAddressFromPriKeyBase64String",function(){return Pe}),n.d(a,"getAddressFromPriKeyBase64String",function(){return _e}),n.d(a,"getPubKeyFromPriKey",function(){return Ne}),n.d(a,"ECKeySign",function(){return Se}),n.d(a,"SHA256",function(){return je}),n.d(a,"passwordToAddress",function(){return Te}),n.d(a,"pkToAddress",function(){return Be});var u={};n.r(u),n.d(u,"generateAccount",function(){return Fe});var c={};n.r(c),n.d(c,"decodeParams",function(){return Ee}),n.d(c,"encodeParams",function(){return Oe});var d=n(0),l=n.n(d),h=n(1),f=n.n(h),v=n(8),p=n.n(v),g=n(2),b=n.n(g),m=n(3),y=n.n(m),k=n(14),x=n.n(k),w=n(15),I=n.n(w),W=n(11),A=n.n(W),P=n(16),_=n.n(P),N=n(4),S=n.n(N),j=n(17),T=n.n(j);function B(){var e=this;this._keyStr="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",this.encode=function(t){for(var n,r,i,s,o,a,u,c="",d=0;d<t.length;)s=(n=t.charCodeAt(d++))>>2,o=(3&n)<<4|(r=t.charCodeAt(d++))>>4,a=(15&r)<<2|(i=t.charCodeAt(d++))>>6,u=63&i,isNaN(r)?a=u=64:isNaN(i)&&(u=64),c=c+e._keyStr.charAt(s)+e._keyStr.charAt(o)+e._keyStr.charAt(a)+e._keyStr.charAt(u);return c},this.encodeIgnoreUtf8=function(t){for(var n,r,i,s,o,a,u,c="",d=0;d<t.length;)s=(n=t[d++])>>2,o=(3&n)<<4|(r=t[d++])>>4,a=(15&r)<<2|(i=t[d++])>>6,u=63&i,isNaN(r)?a=u=64:isNaN(i)&&(u=64),c=c+e._keyStr.charAt(s)+e._keyStr.charAt(o)+e._keyStr.charAt(a)+e._keyStr.charAt(u);return c},this.decode=function(t){var n,r,i,s,o,a,u="",c=0;for(t=t.replace(/[^A-Za-z0-9\+\/\=]/g,"");c<t.length;)n=e._keyStr.indexOf(t.charAt(c++))<<2|(s=e._keyStr.indexOf(t.charAt(c++)))>>4,r=(15&s)<<4|(o=e._keyStr.indexOf(t.charAt(c++)))>>2,i=(3&o)<<6|(a=e._keyStr.indexOf(t.charAt(c++))),u+=String.fromCharCode(n),64!=o&&(u+=String.fromCharCode(r)),64!=a&&(u+=String.fromCharCode(i));return e._utf8_decode(u)},this.decodeToByteArray=function(t){var n,r,i,s,o,a,u="",c=0;for(t=t.replace(/[^A-Za-z0-9\+\/\=]/g,"");c<t.length;)n=e._keyStr.indexOf(t.charAt(c++))<<2|(s=e._keyStr.indexOf(t.charAt(c++)))>>4,r=(15&s)<<4|(o=e._keyStr.indexOf(t.charAt(c++)))>>2,i=(3&o)<<6|(a=e._keyStr.indexOf(t.charAt(c++))),u+=String.fromCharCode(n),64!=o&&(u+=String.fromCharCode(r)),64!=a&&(u+=String.fromCharCode(i));return e._out2ByteArray(u)},this._out2ByteArray=function(e){for(var t=new Array(e.length),n=0,r=0;n<e.length;)r=e.charCodeAt(n),t[n]=r,n++;return t},this._utf8_encode=function(e){e=e.replace(/\r\n/g,"\n");for(var t="",n=0;n<e.length;n++){var r=e.charCodeAt(n);r<128?t+=String.fromCharCode(r):r>127&&r<2048?(t+=String.fromCharCode(r>>6|192),t+=String.fromCharCode(63&r|128)):(t+=String.fromCharCode(r>>12|224),t+=String.fromCharCode(r>>6&63|128),t+=String.fromCharCode(63&r|128))}return t},this._utf8_decode=function(e){for(var t="",n=0,r=0,i=0,s=0;n<e.length;)(r=e.charCodeAt(n))<128?(t+=String.fromCharCode(r),n++):r>191&&r<224?(i=e.charCodeAt(n+1),t+=String.fromCharCode((31&r)<<6|63&i),n+=2):(i=e.charCodeAt(n+1),s=e.charCodeAt(n+2),t+=String.fromCharCode((15&r)<<12|(63&i)<<6|63&s),n+=3);return t}}function F(e){if("number"!=typeof e)throw new Error("Input must be a number");if(e<0||e>255)throw new Error("Input must be a byte");var t="";return t+="0123456789ABCDEF".charAt(e>>4),t+="0123456789ABCDEF".charAt(15&e)}function C(e){if("string"==typeof e)return e;for(var t="",n=0;n<e.length;n++){var r=e[n].toString(2),i=r.match(/^1+?(?=0)/);if(i&&8===r.length){for(var s=i[0].length,o=e[n].toString(2).slice(7-s),a=1;a<s;a++)o+=e[a+n].toString(2).slice(2);t+=String.fromCharCode(parseInt(o,2)),n+=s-1}else t+=String.fromCharCode(e[n])}return t}function E(e){for(var t=e.replace(/^0x/,"").split(""),n="",r=0;r<t.length/2;r++){var i="0x".concat(t[2*r]).concat(t[2*r+1]);n+=String.fromCharCode(i)}return n}function O(e){for(var t="",n=0;n<e.length;n++)t+=F(e[n]);return t}function q(e){return(new B).decodeToByteArray(e)}function D(e){return(new B).encodeIgnoreUtf8(e)}var K=n(6),R=n.n(K),H=34,U="41",V=65,L=/^(41)/;function z(e){return C(e)}function M(e,t,n){if(e.length!=t.length)return!1;var r;for(r=0;r<e.length;r++)if(n){if(e[r]!=t[r])return!1}else if(JSON.stringify(e[r])!=JSON.stringify(t[r]))return!1;return!0}function J(e){if("string"!=typeof e)throw new Error("The passed string is not a string");var t,n,r=new Array;t=e.length;for(var i=0;i<t;i++)(n=e.charCodeAt(i))>=65536&&n<=1114111?(r.push(n>>18&7|240),r.push(n>>12&63|128),r.push(n>>6&63|128),r.push(63&n|128)):n>=2048&&n<=65535?(r.push(n>>12&15|224),r.push(n>>6&63|128),r.push(63&n|128)):n>=128&&n<=2047?(r.push(n>>6&31|192),r.push(63&n|128)):r.push(255&n);return r}function G(e){var t;if(e>="A"&&e<="F"?t=e.charCodeAt(0)-"A".charCodeAt(0)+10:e>="a"&&e<="f"?t=e.charCodeAt(0)-"a".charCodeAt(0)+10:e>="0"&&e<="9"&&(t=e.charCodeAt(0)-"0".charCodeAt(0)),"number"==typeof t)return t;throw new Error("The passed hex char is not a valid hex char")}function Y(e){return e>="A"&&e<="F"||e>="a"&&e<="f"||e>="0"&&e<="9"?1:0}function X(e){if("string"!=typeof e)throw new Error("The passed string is not a string");for(var t=Array(),n=0,r=0,i=0,s=0;s<e.length;s++){var o=e.charAt(s);if(!Y(o))throw new Error("The passed hex char is not a valid hex string");n<<=4,n+=G(o),0==++r%2&&(t[i++]=n,n=0)}return t}function Z(e){if(!/^\d{4}-\d{2}-\d{2}( \d{2}-\d{2}-\d{2}|)/.test(e))throw new Error("The passed date string is not valid");var t=e.split(" "),n=t[0].split("-"),r=parseInt(n[0],10),i=parseInt(n[1],10)-1,s=parseInt(n[2],10);if(t.length>1){var o=t[1].split("-"),a=parseInt(o[0],10),u=parseInt(o[1],10),c=parseInt(o[2],10);return new Date(r,i,s,a,u,c)}return new Date(r,i,s)}function $(e){return e>="0"&&e<="9"?1:0}function Q(e){if(null==e)return-1;if("string"!=typeof e)return-1;if(0==e.length||""==e)return-1;var t=0;if(40==e.length)for(;t<40;t++){if(!Y(e.charAt(t)))break}if(40==t)return 1;for(t=0;t<e.length;t++){if(!$(e.charAt(t)))break}if(t==e.length)return 2;for(t=0;t<e.length;t++){if(e.charAt(t)>" ")return 3}return-1}for(var ee="123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",te={},ne=0;ne<ee.length;ne++)te[ee.charAt(ne)]=ne;var re=58;function ie(e){if(0===e.length)return"";var t,n,r=[0];for(t=0;t<e.length;t++){for(n=0;n<r.length;n++)r[n]<<=8;r[0]+=e[t];var i=0;for(n=0;n<r.length;++n)r[n]+=i,i=r[n]/re|0,r[n]%=re;for(;i;)r.push(i%re),i=i/re|0}for(t=0;0===e[t]&&t<e.length-1;t++)r.push(0);return r.reverse().map(function(e){return ee[e]}).join("")}function se(e){if(0===e.length)return[];var t,n,r=[0];for(t=0;t<e.length;t++){var i=e[t];if(!(i in te))throw new Error("Non-base58 character");for(n=0;n<r.length;n++)r[n]*=re;r[0]+=te[i];var s=0;for(n=0;n<r.length;++n)r[n]+=s,s=r[n]>>8,r[n]&=255;for(;s;)r.push(255&s),s>>=8}for(t=0;"1"===e[t]&&t<e.length-1;t++)r.push(0);return r.reverse()}var oe=n(13),ae=n(10),ue=ae.utils.keccak256,ce=ae.utils.sha256,de=ae.utils.toUtf8Bytes,le=ae.utils.recoverAddress,he=ae.utils.SigningKey,fe=ae.utils.AbiCoder;function ve(e){var t=je(e),n=je(t).slice(0,4);return ie(n=e.concat(n))}function pe(e){if("string"!=typeof e)return!1;if(e.length<=4)return!1;var t=se(e);if(e.length<=4)return!1;var n=t.length-4,r=t.slice(n),i=je(t=t.slice(0,n)),s=je(i).slice(0,4);if(r[0]==s[0]&&r[1]==s[1]&&r[2]==s[2]&&r[3]==s[3])return t;throw new Error("Invalid address provided")}function ge(e,t){"string"==typeof e&&(e=X(e));var n=Se(X(t.txID),e);return Array.isArray(t.signature)?t.signature.includes(n)||t.signature.push(n):t.signature=[n],t}function be(e){return btoa(String.fromCharCode.apply(String,R()(e)))}function me(e,t){return"string"==typeof e&&(e=X(e)),Se(je(t),e)}function ye(e){var t=q(e);return proto.protocol.Transaction.deserializeBinary(t).getRawData().serializeBinary()}function ke(){for(var e=new oe.ec("secp256k1").genKeyPair().getPrivate().toString("hex");e.length<64;)e="0".concat(e);return X(e)}function xe(e){65===e.length&&(e=e.slice(1));var t=ue(e).toString().substring(2);return X(U+t.substring(24))}function we(e){return xe(Ne(e))}function Ie(e){var t=se(e);if(t.length<=4)return!1;var n=t.slice(0,t.length-4),r=je(n),i=je(r);return i[0]===t[n.length]&&i[1]===t[n.length+1]&&i[2]===t[n.length+2]&&i[3]===t[n.length+3]&&n}function We(e){if("string"!=typeof e)return!1;if(e.length!==H)return!1;var t=se(e);if(25!==t.length)return!1;if(t[0]!==V)return!1;var n=t.slice(21),r=je(t=t.slice(0,21)),i=je(r).slice(0,4);return n[0]==i[0]&&n[1]==i[1]&&n[2]==i[2]&&n[3]==i[3]}function Ae(e){return ve(xe(Ne(q(e))))}function Pe(e){return O(xe(Ne(q(e))))}function _e(e){return D(xe(Ne(q(e))))}function Ne(e){for(var t=new oe.ec("secp256k1").keyFromPrivate(e,"bytes").getPublic(),n=t.x,r=t.y,i=n.toString("hex");i.length<64;)i="0".concat(i);for(var s=r.toString("hex");s.length<64;)s="0".concat(s);return X("04".concat(i).concat(s))}function Se(e,t){for(var n=new oe.ec("secp256k1").keyFromPrivate(t,"bytes").sign(e),r=n.r,i=n.s,s=n.recoveryParam,o=r.toString("hex");o.length<64;)o="0".concat(o);for(var a=i.toString("hex");a.length<64;)a="0".concat(a);return o+a+F(s)}function je(e){var t=O(e);return X(ce("0x"+t).replace(/^0x/,""))}function Te(e){return ve(we(q(e)))}function Be(e){return ve(we(X(e)))}function Fe(){var e=ke(),t=Ne(e),n=we(e);return{privateKey:O(e),publicKey:O(t),address:{base58:ve(n),hex:O(n)}}}var Ce=new fe;function Ee(e,t,n,r){if(n&&"boolean"!=typeof n||(r=n,n=t,t=e,e=[]),r&&n.replace(/^0x/,"").length%64==8&&(n="0x"+n.replace(/^0x/,"").substring(8)),n.replace(/^0x/,"").length%64)throw new Error("The encoded string is not valid. Its length must be a multiple of 64.");return t=t.map(function(e){return/trcToken/.test(e)&&(e=e.replace(/trcToken/,"uint256")),e}),Ce.decode(t,n).reduce(function(n,r,i){return"address"==t[i]&&(r=U+r.substr(2).toLowerCase()),e.length?n[e[i]]=r:n.push(r),n},e.length?{}:[])}function Oe(e,t){for(var n=0;n<e.length;n++)"address"===e[n]&&(t[n]=It.address.toHex(t[n]).replace(L,"0x"));return Ce.encode(e,t)}var qe=n(18),De=n.n(qe),Ke=n(9),Re=n.n(Ke);function He(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}var Ue,Ve,Le=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?He(n,!0).forEach(function(t){S()(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):He(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({},{isValidURL:function(e){return"string"==typeof e&&De.a.isURL(e.toString(),{protocols:["http","https"],require_tld:!1})},isObject:function(e){return e===Object(e)&&"[object Array]"!==Object.prototype.toString.call(e)},isArray:function(e){return Array.isArray(e)},isJson:function(e){try{return!!JSON.parse(e)}catch(e){return!1}},isBoolean:function(e){return"boolean"==typeof e},isBigNumber:function(e){return e&&(e instanceof Re.a||e.constructor&&"BigNumber"===e.constructor.name)},isString:function(e){return"string"==typeof e||e&&e.constructor&&"String"===e.constructor.name},isFunction:function(e){return"function"==typeof e},isHex:function(e){return"string"==typeof e&&!isNaN(parseInt(e,16))&&/^(0x|)[a-fA-F0-9]+$/.test(e)},isInteger:function(e){return null!==e&&Number.isInteger(Number(e))},hasProperty:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},hasProperties:function(e){for(var t=this,n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];return r.length&&!r.map(function(n){return t.hasProperty(e,n)}).includes(!1)},mapEvent:function(e){var t={block:e.block_number,timestamp:e.block_timestamp,contract:e.contract_address,name:e.event_name,transaction:e.transaction_id,result:e.result,resourceNode:e.resource_Node||(e._unconfirmed?"fullNode":"solidityNode")};return e._unconfirmed&&(t.unconfirmed=e._unconfirmed),e._fingerprint&&(t.fingerprint=e._fingerprint),t},parseEvent:function(e,t){var n=t.inputs;if(!e.result)return e;if(this.isObject(e.result))for(var r=0;r<n.length;r++){var i=n[r];"address"==i.type&&i.name in e.result&&(e.result[i.name]=U+e.result[i.name].substr(2).toLowerCase())}else this.isArray(e.result)&&(e.result=e.result.reduce(function(e,t,r){var i=n[r],s=i.name;return"address"==i.type&&(t=U+t.substr(2).toLowerCase()),e[s]=t,e},{}));return e},padLeft:function(e,t,n){for(var r=e.toString();r.length<n;)r=t+r;return r},isNotNullOrUndefined:function(e){return null!=e},sleep:(Ue=f()(l.a.mark(function e(){var t,n=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.length>0&&void 0!==n[0]?n[0]:1e3,e.abrupt("return",new Promise(function(e){return setTimeout(e,t)}));case 2:case"end":return e.stop()}},e)})),function(){return Ue.apply(this,arguments)})},{code:i,accounts:u,base58:s,bytes:r,crypto:a,abi:c,ethersUtils:o}),ze={HttpProvider:function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3e4,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"/";if(b()(this,e),!Le.isValidURL(t))throw new Error("Invalid URL provided to HttpProvider");if(isNaN(n)||n<0)throw new Error("Invalid timeout duration provided");if(!Le.isObject(s))throw new Error("Invalid headers object provided");t=t.replace(/\/+$/,""),this.host=t,this.timeout=n,this.user=r,this.password=i,this.headers=s,this.statusPage=o,this.instance=T.a.create({baseURL:t,timeout:n,headers:s,auth:r&&{user:r,password:i}})}var t;return y()(e,[{key:"setStatusPage",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/";this.statusPage=e}},{key:"isConnected",value:(t=f()(l.a.mark(function e(){var t,n=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.length>0&&void 0!==n[0]?n[0]:this.statusPage,e.abrupt("return",this.request(t).then(function(e){return Le.hasProperties(e,"blockID","block_header")}).catch(function(){return!1}));case 2:case"end":return e.stop()}},e,this)})),function(){return t.apply(this,arguments)})},{key:"request",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"get";return n=n.toLowerCase(),this.instance.request({data:"post"==n&&Object.keys(t).length?t:null,params:"get"==n&&t,url:e,method:n}).then(function(e){return e.data})}}]),e}()},Me=n(19),Je=n.n(Me),Ge=n(20),Ye=n(12),Xe=n.n(Ye),Ze=n(5),$e=n.n(Ze),Qe=n(7),et=n.n(Qe),tt=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(b()(this,e),!t||!t instanceof It)throw new Error("Expected instance of TronWeb");this.tronWeb=t}return y()(e,[{key:"invalid",value:function(e){return e.msg||"Invalid ".concat(e.name).concat("address"===e.type?" address":""," provided")}},{key:"notPositive",value:function(e){return"".concat(e.name," must be a positive integer")}},{key:"notEqual",value:function(e){return e.msg||"".concat(e.names[0]," can not be equal to ").concat(e.names[1])}},{key:"notValid",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new Function,n={},r=!1,i=!0,s=!1,o=void 0;try{for(var a,u=e[Symbol.iterator]();!(i=(a=u.next()).done);i=!0){var c=a.value,d=c.name,l=c.names,h=c.value,f=c.type,v=c.gt,p=c.lt,g=c.gte,b=c.lte,m=(c.se,c.optional);if(!m||Le.isNotNullOrUndefined(h)&&("boolean"===f||!1!==h)){switch(n[c.name]=c.value,f){case"address":this.tronWeb.isAddress(h)?n[d]=this.tronWeb.address.toHex(h):r=!0;break;case"integer":(!Le.isInteger(h)||"number"==typeof v&&h<=c.gt||"number"==typeof p&&h>=c.lt||"number"==typeof g&&h<c.gte||"number"==typeof b&&h>c.lte)&&(r=!0);break;case"positive-integer":if(!Le.isInteger(h)||h<=0)return void t(this.notPositive(c));break;case"tokenId":Le.isString(h)&&h.length||(r=!0);break;case"notEmptyObject":Le.isObject(h)&&Object.keys(h).length||(r=!0);break;case"notEqual":if(n[l[0]]===n[l[1]])return t(this.notEqual(c)),!0;break;case"resource":["BANDWIDTH","ENERGY"].includes(h)||(r=!0);break;case"url":Le.isValidURL(h)||(r=!0);break;case"hex":Le.isHex(h)||(r=!0);break;case"array":Array.isArray(h)||(r=!0);break;case"not-empty-string":Le.isString(h)&&h.length||(r=!0);break;case"boolean":Le.isBoolean(h)||(r=!0);break;case"string":(!Le.isString(h)||"number"==typeof v&&h.length<=c.gt||"number"==typeof p&&h.length>=c.lt||"number"==typeof g&&h.length<c.gte||"number"==typeof b&&h.length>c.lte)&&(r=!0)}if(r)return t(this.invalid(c)),!0}}}catch(e){s=!0,o=e}finally{try{i||null==u.return||u.return()}finally{if(s)throw o}}return!1}}]),e}();function nt(e){return It.address.toHex(e)}function rt(e){return Ve.tronWeb.fromUtf8(e)}function it(e,t){return e.Error?t(e.Error):e.result&&e.result.message?t(Ve.tronWeb.toUtf8(e.result.message)):t(null,e)}var st=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(b()(this,e),!t||!t instanceof It)throw new Error("Expected instance of TronWeb");Ve=this,this.tronWeb=t,this.injectPromise=$e()(this),this.validator=new tt(t)}var t,n,r,i;return y()(e,[{key:"sendTrx",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.tronWeb.defaultAddress.hex,r=arguments.length>3?arguments[3]:void 0,i=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(Le.isFunction(r)&&(i=r,r={}),Le.isFunction(n)?(i=n,n=this.tronWeb.defaultAddress.hex):Le.isObject(n)&&(r=n,n=this.tronWeb.defaultAddress.hex),!i)return this.injectPromise(this.sendTrx,e,t,n,r);if(t=parseInt(t),!this.validator.notValid([{name:"recipient",type:"address",value:e},{name:"origin",type:"address",value:n},{names:["recipient","origin"],type:"notEqual",msg:"Cannot transfer TRX to the same account"},{name:"amount",type:"integer",gt:0,value:t}],i)){var s={to_address:nt(e),owner_address:nt(n),amount:t};r&&r.permissionId&&(s.Permission_id=r.permissionId),this.tronWeb.fullNode.request("wallet/createtransaction",s,"post").then(function(e){return it(e,i)}).catch(function(e){return i(e)})}}},{key:"sendToken",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.tronWeb.defaultAddress.hex,i=arguments.length>4?arguments[4]:void 0,s=arguments.length>5&&void 0!==arguments[5]&&arguments[5];if(Le.isFunction(i)&&(s=i,i={}),Le.isFunction(r)?(s=r,r=this.tronWeb.defaultAddress.hex):Le.isObject(r)&&(i=r,r=this.tronWeb.defaultAddress.hex),!s)return this.injectPromise(this.sendToken,e,t,n,r,i);if(t=parseInt(t),!this.validator.notValid([{name:"recipient",type:"address",value:e},{name:"origin",type:"address",value:r},{names:["recipient","origin"],type:"notEqual",msg:"Cannot transfer tokens to the same account"},{name:"amount",type:"integer",gt:0,value:t},{name:"token ID",type:"tokenId",value:n}],s)){var o={to_address:nt(e),owner_address:nt(r),asset_name:rt(n),amount:parseInt(t)};i&&i.permissionId&&(o.Permission_id=i.permissionId),this.tronWeb.fullNode.request("wallet/transferasset",o,"post").then(function(e){return it(e,s)}).catch(function(e){return s(e)})}}},{key:"purchaseToken",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.tronWeb.defaultAddress.hex,i=arguments.length>4?arguments[4]:void 0,s=arguments.length>5&&void 0!==arguments[5]&&arguments[5];if(Le.isFunction(i)&&(s=i,i={}),Le.isFunction(r)?(s=r,r=this.tronWeb.defaultAddress.hex):Le.isObject(r)&&(i=r,r=this.tronWeb.defaultAddress.hex),!s)return this.injectPromise(this.purchaseToken,e,t,n,r,i);if(!this.validator.notValid([{name:"buyer",type:"address",value:r},{name:"issuer",type:"address",value:e},{names:["buyer","issuer"],type:"notEqual",msg:"Cannot purchase tokens from same account"},{name:"amount",type:"integer",gt:0,value:n},{name:"token ID",type:"tokenId",value:t}],s)){var o={to_address:nt(e),owner_address:nt(r),asset_name:rt(t),amount:parseInt(n)};i&&i.permissionId&&(o.Permission_id=i.permissionId),this.tronWeb.fullNode.request("wallet/participateassetissue",o,"post").then(function(e){return it(e,s)}).catch(function(e){return s(e)})}}},{key:"freezeBalance",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"BANDWIDTH",r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.tronWeb.defaultAddress.hex,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:void 0,s=arguments.length>5?arguments[5]:void 0,o=arguments.length>6&&void 0!==arguments[6]&&arguments[6];if(Le.isFunction(s)&&(o=s,s={}),Le.isFunction(i)?(o=i,i=void 0):Le.isObject(i)&&(s=i,i=void 0),Le.isFunction(r)?(o=r,r=this.tronWeb.defaultAddress.hex):Le.isObject(r)&&(s=r,r=this.tronWeb.defaultAddress.hex),Le.isFunction(t)&&(o=t,t=3),Le.isFunction(n)&&(o=n,n="BANDWIDTH"),!o)return this.injectPromise(this.freezeBalance,e,t,n,r,i,s);if(!this.validator.notValid([{name:"origin",type:"address",value:r},{name:"receiver",type:"address",value:i,optional:!0},{name:"amount",type:"integer",gt:0,value:e},{name:"duration",type:"integer",gte:3,value:t},{name:"resource",type:"resource",value:n,msg:'Invalid resource provided: Expected "BANDWIDTH" or "ENERGY'}],o)){var a={owner_address:nt(r),frozen_balance:parseInt(e),frozen_duration:parseInt(t),resource:n};Le.isNotNullOrUndefined(i)&&nt(i)!==nt(r)&&(a.receiver_address=nt(i)),s&&s.permissionId&&(a.Permission_id=s.permissionId),this.tronWeb.fullNode.request("wallet/freezebalance",a,"post").then(function(e){return it(e,o)}).catch(function(e){return o(e)})}}},{key:"unfreezeBalance",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"BANDWIDTH",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.tronWeb.defaultAddress.hex,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0,i=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(Le.isFunction(r)&&(i=r,r={}),Le.isFunction(n)?(i=n,n=void 0):Le.isObject(n)&&(r=n,n=void 0),Le.isFunction(t)?(i=t,t=this.tronWeb.defaultAddress.hex):Le.isObject(t)&&(r=t,t=this.tronWeb.defaultAddress.hex),Le.isFunction(e)&&(i=e,e="BANDWIDTH"),!i)return this.injectPromise(this.unfreezeBalance,e,t,n,r);if(!this.validator.notValid([{name:"origin",type:"address",value:t},{name:"receiver",type:"address",value:n,optional:!0},{name:"resource",type:"resource",value:e,msg:'Invalid resource provided: Expected "BANDWIDTH" or "ENERGY'}],i)){var s={owner_address:nt(t),resource:e};Le.isNotNullOrUndefined(n)&&nt(n)!==nt(t)&&(s.receiver_address=nt(n)),r&&r.permissionId&&(s.Permission_id=r.permissionId),this.tronWeb.fullNode.request("wallet/unfreezebalance",s,"post").then(function(e){return it(e,i)}).catch(function(e){return i(e)})}}},{key:"withdrawBlockRewards",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.tronWeb.defaultAddress.hex,t=arguments.length>1?arguments[1]:void 0,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(Le.isFunction(t)&&(n=t,t={}),Le.isFunction(e)?(n=e,e=this.tronWeb.defaultAddress.hex):Le.isObject(e)&&(t=e,e=this.tronWeb.defaultAddress.hex),!n)return this.injectPromise(this.withdrawBlockRewards,e,t);if(!this.validator.notValid([{name:"origin",type:"address",value:e}],n)){var r={owner_address:nt(e)};t&&t.permissionId&&(r.Permission_id=t.permissionId),this.tronWeb.fullNode.request("wallet/withdrawbalance",r,"post").then(function(e){return it(e,n)}).catch(function(e){return n(e)})}}},{key:"applyForSR",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.tronWeb.defaultAddress.hex,t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(console.log(nt(e),Le.isObject(t)),Le.isFunction(n)&&(r=n,n={}),Le.isObject(t)&&Le.isValidURL(e)&&(n=t,t=e,e=this.tronWeb.defaultAddress.hex),!r)return this.injectPromise(this.applyForSR,e,t,n);if(!this.validator.notValid([{name:"origin",type:"address",value:e},{name:"url",type:"url",value:t,msg:"Invalid url provided"}],r)){console.log(nt(e));var i={owner_address:nt(e),url:rt(t)};n&&n.permissionId&&(i.Permission_id=n.permissionId),this.tronWeb.fullNode.request("wallet/createwitness",i,"post").then(function(e){return it(e,r)}).catch(function(e){return r(e)})}}},{key:"vote",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.tronWeb.defaultAddress.hex,r=arguments.length>2?arguments[2]:void 0,i=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(Le.isFunction(r)&&(i=r,r={}),Le.isFunction(n)?(i=n,n=this.tronWeb.defaultAddress.hex):Le.isObject(n)&&(r=n,n=this.tronWeb.defaultAddress.hex),!i)return this.injectPromise(this.vote,t,n,r);if(!this.validator.notValid([{name:"voter",type:"address",value:n},{name:"votes",type:"notEmptyObject",value:t}],i)){var s=!1;if(t=Object.entries(t).map(function(t){var n=et()(t,2),r=n[0],i=n[1];if(!s)return e.validator.notValid([{name:"SR",type:"address",value:r},{name:"vote count",type:"integer",gt:0,value:i,msg:"Invalid vote count provided for SR: "+r}])?s=!0:{vote_address:nt(r),vote_count:parseInt(i)}}),!s){var o={owner_address:nt(n),votes:t};r&&r.permissionId&&(o.Permission_id=r.permissionId),this.tronWeb.fullNode.request("wallet/votewitnessaccount",o,"post").then(function(e){return it(e,i)}).catch(function(e){return i(e)})}}}},{key:"createSmartContract",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.tronWeb.defaultAddress.hex,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(Le.isFunction(t)&&(n=t,t=this.tronWeb.defaultAddress.hex),!n)return this.injectPromise(this.createSmartContract,e,t);var r=e.feeLimit||1e9,i=e.userFeePercentage;"number"==typeof i||i||(i=100);var s=e.originEnergyLimit||1e7,o=e.callValue||0,a=e.tokenValue,u=e.tokenId||e.token_id,c=e.abi,d=void 0!==c&&c,l=e.bytecode,h=void 0!==l&&l,f=e.parameters,v=void 0===f?[]:f,p=e.name,g=void 0===p?"":p;if(d&&Le.isString(d))try{d=JSON.parse(d)}catch(e){return n("Invalid options.abi provided")}if(d.entrys&&(d=d.entrys),!Le.isArray(d))return n("Invalid options.abi provided");var b=d.some(function(e){return"constructor"==e.type&&e.payable});if(!this.validator.notValid([{name:"bytecode",type:"hex",value:h},{name:"feeLimit",type:"integer",value:r,gt:0,lte:1e9},{name:"callValue",type:"integer",value:o,gte:0},{name:"userFeePercentage",type:"integer",value:i,gte:0,lte:100},{name:"originEnergyLimit",type:"integer",value:s,gte:0,lte:1e7},{name:"parameters",type:"array",value:v},{name:"issuer",type:"address",value:t},{name:"tokenValue",type:"integer",value:a,gte:0,optional:!0},{name:"tokenId",type:"integer",value:u,gte:0,optional:!0}],n)){if(b&&0==o&&0==a)return n("When contract is payable, options.callValue or options.tokenValue must be a positive integer");if(!b&&(o>0||a>0))return n("When contract is not payable, options.callValue and options.tokenValue must be 0");var m=d.find(function(e){return"constructor"===e.type});if(void 0!==m&&m){var y=new fe,k=[],x=[];if(m=m.inputs,v.length!=m.length)return n("constructor needs ".concat(m.length," but ").concat(v.length," provided"));for(var w=0;w<v.length;w++){var I=m[w].type,W=v[w];if(!I||!Le.isString(I)||!I.length)return n("Invalid parameter type provided: "+I);"address"==I?W=nt(W).replace(L,"0x"):"address[]"==I&&(W=W.map(function(e){return nt(e).replace(L,"0x")})),k.push(I),x.push(W)}try{v=y.encode(k,x).replace(/^(0x)/,"")}catch(e){return n(e)}}else v="";var A={owner_address:nt(t),fee_limit:parseInt(r),call_value:parseInt(o),consume_user_resource_percent:i,origin_energy_limit:s,abi:JSON.stringify(d),bytecode:h,parameter:v,name:g};Le.isNotNullOrUndefined(a)&&(A.call_token_value=parseInt(a)),Le.isNotNullOrUndefined(u)&&(A.token_id=parseInt(u)),e&&e.permissionId&&(A.Permission_id=e.permissionId),this.tronWeb.fullNode.request("wallet/deploycontract",A,"post").then(function(e){return it(e,n)}).catch(function(e){return n(e)})}}},{key:"triggerSmartContract",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return"object"!==p()(t[2])&&(t[2]={feeLimit:t[2],callValue:t[3]},t.splice(3,1)),this._triggerSmartContract.apply(this,t)}},{key:"triggerConstantContract",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t[2]._isConstant=!0,this.triggerSmartContract.apply(this,t)}},{key:"triggerConfirmedConstantContract",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t[2]._isConstant=!0,t[2].confirmed=!0,this.triggerSmartContract.apply(this,t)}},{key:"_triggerSmartContract",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:this.tronWeb.defaultAddress.hex,s=arguments.length>5&&void 0!==arguments[5]&&arguments[5];if(Le.isFunction(i)&&(s=i,i=this.tronWeb.defaultAddress.hex),Le.isFunction(r)&&(s=r,r=[]),!s)return this.injectPromise(this._triggerSmartContract,e,t,n,r,i);var o=Object.assign({callValue:0,feeLimit:1e9},n),a=o.tokenValue,u=o.tokenId,c=o.callValue,d=o.feeLimit;if(!this.validator.notValid([{name:"feeLimit",type:"integer",value:d,gt:0,lte:1e9},{name:"callValue",type:"integer",value:c,gte:0},{name:"parameters",type:"array",value:r},{name:"contract",type:"address",value:e},{name:"issuer",type:"address",value:i,optional:!0},{name:"tokenValue",type:"integer",value:a,gte:0,optional:!0},{name:"tokenId",type:"integer",value:u,gte:0,optional:!0},{name:"function selector",type:"not-empty-string",value:t}],s)){if(t=t.replace("/s*/g",""),r.length){for(var l=new fe,h=[],f=[],v=0;v<r.length;v++){var p=r[v],g=p.type,b=p.value;if(!g||!Le.isString(g)||!g.length)return s("Invalid parameter type provided: "+g);"address"==g?b=nt(b).replace(L,"0x"):"address[]"==g&&(b=b.map(function(e){return nt(e).replace(L,"0x")})),h.push(g),f.push(b)}try{h=h.map(function(e){return/trcToken/.test(e)&&(e=e.replace(/trcToken/,"uint256")),e}),r=l.encode(h,f).replace(/^(0x)/,"")}catch(e){return s(e)}}else r="";var m={contract_address:nt(e),owner_address:nt(i),function_selector:t,parameter:r};n._isConstant||(m.call_value=parseInt(c),m.fee_limit=parseInt(d),Le.isNotNullOrUndefined(a)&&(m.call_token_value=parseInt(a)),Le.isNotNullOrUndefined(u)&&(m.token_id=parseInt(u))),n.permissionId&&(m.Permission_id=n.permissionId),this.tronWeb[n.confirmed?"solidityNode":"fullNode"].request("wallet".concat(n.confirmed?"solidity":"","/trigger").concat(n._isConstant?"constant":"smart","contract"),m,"post").then(function(e){return it(e,s)}).catch(function(e){return s(e)})}}},{key:"clearABI",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.tronWeb.defaultAddress.hex,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(!n)return this.injectPromise(this.clearABI,e,t);if(!this.tronWeb.isAddress(e))return n("Invalid contract address provided");if(!this.tronWeb.isAddress(t))return n("Invalid owner address provided");var r={contract_address:nt(e),owner_address:nt(t)};this.tronWeb.trx.cache.contracts[e]&&delete this.tronWeb.trx.cache.contracts[e],this.tronWeb.fullNode.request("wallet/clearabi",r,"post").then(function(e){return it(e,n)}).catch(function(e){return n(e)})}},{key:"updateBrokerage",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.tronWeb.defaultAddress.hex,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(!n)return this.injectPromise(this.updateBrokerage,e,t);if(!Le.isNotNullOrUndefined(e))return n("Invalid brokerage provided");if(!Le.isInteger(e)||e<0||e>100)return n("Brokerage must be an integer between 0 and 100");if(!this.tronWeb.isAddress(t))return n("Invalid owner address provided");var r={brokerage:parseInt(e),owner_address:nt(t)};this.tronWeb.fullNode.request("wallet/updateBrokerage",r,"post").then(function(e){return it(e,n)}).catch(function(e){return n(e)})}},{key:"createToken",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.tronWeb.defaultAddress.hex,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(Le.isFunction(t)&&(n=t,t=this.tronWeb.defaultAddress.hex),!n)return this.injectPromise(this.createToken,e,t);var r=e.name,i=void 0!==r&&r,s=e.abbreviation,o=void 0!==s&&s,a=e.description,u=void 0!==a&&a,c=e.url,d=void 0!==c&&c,l=e.totalSupply,h=void 0===l?0:l,f=e.trxRatio,v=void 0===f?1:f,p=e.tokenRatio,g=void 0===p?1:p,b=e.saleStart,m=void 0===b?Date.now():b,y=e.saleEnd,k=void 0!==y&&y,x=e.freeBandwidth,w=void 0===x?0:x,I=e.freeBandwidthLimit,W=void 0===I?0:I,A=e.frozenAmount,P=void 0===A?0:A,_=e.frozenDuration,N=void 0===_?0:_,S=e.voteScore,j=e.precision;if(!this.validator.notValid([{name:"Supply amount",type:"positive-integer",value:h},{name:"TRX ratio",type:"positive-integer",value:v},{name:"Token ratio",type:"positive-integer",value:g},{name:"token abbreviation",type:"not-empty-string",value:o},{name:"token name",type:"not-empty-string",value:i},{name:"token description",type:"not-empty-string",value:u},{name:"token url",type:"url",value:d},{name:"issuer",type:"address",value:t},{name:"sale start timestamp",type:"integer",value:m,gte:Date.now()},{name:"sale end timestamp",type:"integer",value:k,gt:m},{name:"Free bandwidth amount",type:"integer",value:w,gte:0},{name:"Free bandwidth limit",type:"integer",value:W,gte:0},{name:"Frozen supply",type:"integer",value:P,gte:0},{name:"Frozen duration",type:"integer",value:N,gte:0}],n)){if(Le.isNotNullOrUndefined(S)&&(!Le.isInteger(S)||S<=0))return n("voteScore must be a positive integer greater than 0");if(Le.isNotNullOrUndefined(j)&&(!Le.isInteger(j)||j<=0||j>6))return n("precision must be a positive integer > 0 and <= 6");var T={owner_address:nt(t),name:rt(i),abbr:rt(o),description:rt(u),url:rt(d),total_supply:parseInt(h),trx_num:parseInt(v),num:parseInt(g),start_time:parseInt(m),end_time:parseInt(k),free_asset_net_limit:parseInt(w),public_free_asset_net_limit:parseInt(W),frozen_supply:{frozen_amount:parseInt(P),frozen_days:parseInt(N)}};!this.tronWeb.fullnodeSatisfies(">=3.5.0")||parseInt(P)>0||delete T.frozen_supply,j&&!isNaN(parseInt(j))&&(T.precision=parseInt(j)),S&&!isNaN(parseInt(S))&&(T.vote_score=parseInt(S)),e&&e.permissionId&&(T.Permission_id=e.permissionId),this.tronWeb.fullNode.request("wallet/createassetissue",T,"post").then(function(e){return it(e,n)}).catch(function(e){return n(e)})}}},{key:"updateAccount",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.tronWeb.defaultAddress.hex,n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(Le.isFunction(n)&&(r=n,n={}),Le.isFunction(t)?(r=t,t=this.tronWeb.defaultAddress.hex):Le.isObject(t)&&(n=t,t=this.tronWeb.defaultAddress.hex),!r)return this.injectPromise(this.updateAccount,e,t,n);if(!this.validator.notValid([{name:"Name",type:"not-empty-string",value:e},{name:"origin",type:"address",value:t}],r)){var i={account_name:rt(e),owner_address:nt(t)};n&&n.permissionId&&(i.Permission_id=n.permissionId),this.tronWeb.fullNode.request("wallet/updateaccount",i,"post").then(function(e){return it(e,r)}).catch(function(e){return r(e)})}}},{key:"setAccountId",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.tronWeb.defaultAddress.hex,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(Le.isFunction(t)&&(n=t,t=this.tronWeb.defaultAddress.hex),!n)return this.injectPromise(this.setAccountId,e,t);e&&Le.isString(e)&&e.startsWith("0x")&&(e=e.slice(2)),this.validator.notValid([{name:"accountId",type:"hex",value:e},{name:"accountId",type:"string",lte:32,gte:8,value:e},{name:"origin",type:"address",value:t}],n)||this.tronWeb.fullNode.request("wallet/setaccountid",{account_id:e,owner_address:nt(t)},"post").then(function(e){return it(e,n)}).catch(function(e){return n(e)})}},{key:"updateToken",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.tronWeb.defaultAddress.hex,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(Le.isFunction(t)?(n=t,t=this.tronWeb.defaultAddress.hex):Le.isObject(t)&&(e=t,t=this.tronWeb.defaultAddress.hex),!n)return this.injectPromise(this.updateToken,e,t);var r=e,i=r.description,s=void 0!==i&&i,o=r.url,a=void 0!==o&&o,u=r.freeBandwidth,c=void 0===u?0:u,d=r.freeBandwidthLimit,l=void 0===d?0:d;if(!this.validator.notValid([{name:"token description",type:"not-empty-string",value:s},{name:"token url",type:"url",value:a},{name:"issuer",type:"address",value:t},{name:"Free bandwidth amount",type:"positive-integer",value:c},{name:"Free bandwidth limit",type:"positive-integer",value:l}],n)){var h={owner_address:nt(t),description:rt(s),url:rt(a),new_limit:parseInt(c),new_public_limit:parseInt(l)};e&&e.permissionId&&(h.Permission_id=e.permissionId),this.tronWeb.fullNode.request("wallet/updateasset",h,"post").then(function(e){return it(e,n)}).catch(function(e){return n(e)})}}},{key:"sendAsset",value:function(){return this.sendToken.apply(this,arguments)}},{key:"purchaseAsset",value:function(){return this.purchaseToken.apply(this,arguments)}},{key:"createAsset",value:function(){return this.createToken.apply(this,arguments)}},{key:"updateAsset",value:function(){return this.updateToken.apply(this,arguments)}},{key:"createProposal",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.tronWeb.defaultAddress.hex,n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(Le.isFunction(n)&&(r=n,n={}),Le.isFunction(t)?(r=t,t=this.tronWeb.defaultAddress.hex):Le.isObject(t)&&(n=t,t=this.tronWeb.defaultAddress.hex),!r)return this.injectPromise(this.createProposal,e,t,n);if(!this.validator.notValid([{name:"issuer",type:"address",value:t}],r)){var i="Invalid proposal parameters provided";if(!e)return r(i);Le.isArray(e)||(e=[e]);var s=!0,o=!1,a=void 0;try{for(var u,c=e[Symbol.iterator]();!(s=(u=c.next()).done);s=!0){var d=u.value;if(!Le.isObject(d))return r(i)}}catch(e){o=!0,a=e}finally{try{s||null==c.return||c.return()}finally{if(o)throw a}}var l={owner_address:nt(t),parameters:e};n&&n.permissionId&&(l.Permission_id=n.permissionId),this.tronWeb.fullNode.request("wallet/proposalcreate",l,"post").then(function(e){return it(e,r)}).catch(function(e){return r(e)})}}},{key:"deleteProposal",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.tronWeb.defaultAddress.hex,n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(Le.isFunction(n)&&(r=n,n={}),Le.isFunction(t)?(r=t,t=this.tronWeb.defaultAddress.hex):Le.isObject(t)&&(n=t,t=this.tronWeb.defaultAddress.hex),!r)return this.injectPromise(this.deleteProposal,e,t,n);if(!this.validator.notValid([{name:"issuer",type:"address",value:t},{name:"proposalID",type:"integer",value:e,gte:0}],r)){var i={owner_address:nt(t),proposal_id:parseInt(e)};n&&n.permissionId&&(i.Permission_id=n.permissionId),this.tronWeb.fullNode.request("wallet/proposaldelete",i,"post").then(function(e){return it(e,r)}).catch(function(e){return r(e)})}}},{key:"voteProposal",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.tronWeb.defaultAddress.hex,r=arguments.length>3?arguments[3]:void 0,i=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(Le.isFunction(r)&&(i=r,r={}),Le.isFunction(n)?(i=n,n=this.tronWeb.defaultAddress.hex):Le.isObject(n)&&(r=n,n=this.tronWeb.defaultAddress.hex),!i)return this.injectPromise(this.voteProposal,e,t,n,r);if(!this.validator.notValid([{name:"voter",type:"address",value:n},{name:"proposalID",type:"integer",value:e,gte:0},{name:"has approval",type:"boolean",value:t}],i)){var s={owner_address:nt(n),proposal_id:parseInt(e),is_add_approval:t};r&&r.permissionId&&(s.Permission_id=r.permissionId),this.tronWeb.fullNode.request("wallet/proposalapprove",s,"post").then(function(e){return it(e,i)}).catch(function(e){return i(e)})}}},{key:"createTRXExchange",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.tronWeb.defaultAddress.hex,i=arguments.length>4?arguments[4]:void 0,s=arguments.length>5&&void 0!==arguments[5]&&arguments[5];if(Le.isFunction(i)&&(s=i,i={}),Le.isFunction(r)?(s=r,r=this.tronWeb.defaultAddress.hex):Le.isObject(r)&&(i=r,r=this.tronWeb.defaultAddress.hex),!s)return this.injectPromise(this.createTRXExchange,e,t,n,r,i);if(!this.validator.notValid([{name:"owner",type:"address",value:r},{name:"token name",type:"not-empty-string",value:e},{name:"token balance",type:"positive-integer",value:t},{name:"trx balance",type:"positive-integer",value:n}],s)){var o={owner_address:nt(r),first_token_id:rt(e),first_token_balance:t,second_token_id:"5f",second_token_balance:n};i&&i.permissionId&&(o.Permission_id=i.permissionId),this.tronWeb.fullNode.request("wallet/exchangecreate",o,"post").then(function(e){s(null,e)}).catch(function(e){return s(e)})}}},{key:"createTokenExchange",value:function(e,t,n,r){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:this.tronWeb.defaultAddress.hex,s=arguments.length>5?arguments[5]:void 0,o=arguments.length>6&&void 0!==arguments[6]&&arguments[6];if(Le.isFunction(s)&&(o=s,s={}),Le.isFunction(i)?(o=i,i=this.tronWeb.defaultAddress.hex):Le.isObject(i)&&(s=i,i=this.tronWeb.defaultAddress.hex),!o)return this.injectPromise(this.createTokenExchange,e,t,n,r,i,s);if(!this.validator.notValid([{name:"owner",type:"address",value:i},{name:"first token name",type:"not-empty-string",value:e},{name:"second token name",type:"not-empty-string",value:n},{name:"first token balance",type:"positive-integer",value:t},{name:"second token balance",type:"positive-integer",value:r}],o)){var a={owner_address:nt(i),first_token_id:rt(e),first_token_balance:t,second_token_id:rt(n),second_token_balance:r};s&&s.permissionId&&(a.Permission_id=s.permissionId),this.tronWeb.fullNode.request("wallet/exchangecreate",a,"post").then(function(e){o(null,e)}).catch(function(e){return o(e)})}}},{key:"injectExchangeTokens",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.tronWeb.defaultAddress.hex,i=arguments.length>4?arguments[4]:void 0,s=arguments.length>5&&void 0!==arguments[5]&&arguments[5];if(Le.isFunction(i)&&(s=i,i={}),Le.isFunction(r)?(s=r,r=this.tronWeb.defaultAddress.hex):Le.isObject(r)&&(i=r,r=this.tronWeb.defaultAddress.hex),!s)return this.injectPromise(this.injectExchangeTokens,e,t,n,r,i);if(!this.validator.notValid([{name:"owner",type:"address",value:r},{name:"token name",type:"not-empty-string",value:t},{name:"token amount",type:"integer",value:n,gte:1},{name:"exchangeID",type:"integer",value:e,gte:0}],s)){var o={owner_address:nt(r),exchange_id:parseInt(e),token_id:rt(t),quant:parseInt(n)};i&&i.permissionId&&(o.Permission_id=i.permissionId),this.tronWeb.fullNode.request("wallet/exchangeinject",o,"post").then(function(e){return it(e,s)}).catch(function(e){return s(e)})}}},{key:"withdrawExchangeTokens",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.tronWeb.defaultAddress.hex,i=arguments.length>4?arguments[4]:void 0,s=arguments.length>5&&void 0!==arguments[5]&&arguments[5];if(Le.isFunction(i)&&(s=i,i={}),Le.isFunction(r)?(s=r,r=this.tronWeb.defaultAddress.hex):Le.isObject(r)&&(i=r,r=this.tronWeb.defaultAddress.hex),!s)return this.injectPromise(this.withdrawExchangeTokens,e,t,n,r,i);if(!this.validator.notValid([{name:"owner",type:"address",value:r},{name:"token name",type:"not-empty-string",value:t},{name:"token amount",type:"integer",value:n,gte:1},{name:"exchangeID",type:"integer",value:e,gte:0}],s)){var o={owner_address:nt(r),exchange_id:parseInt(e),token_id:rt(t),quant:parseInt(n)};i&&i.permissionId&&(o.Permission_id=i.permissionId),this.tronWeb.fullNode.request("wallet/exchangewithdraw",o,"post").then(function(e){return it(e,s)}).catch(function(e){return s(e)})}}},{key:"tradeExchangeTokens",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:this.tronWeb.defaultAddress.hex,s=arguments.length>5?arguments[5]:void 0,o=arguments.length>6&&void 0!==arguments[6]&&arguments[6];if(Le.isFunction(s)&&(o=s,s={}),Le.isFunction(i)?(o=i,i=this.tronWeb.defaultAddress.hex):Le.isObject(i)&&(s=i,i=this.tronWeb.defaultAddress.hex),!o)return this.injectPromise(this.tradeExchangeTokens,e,t,n,r,i,s);if(!this.validator.notValid([{name:"owner",type:"address",value:i},{name:"token name",type:"not-empty-string",value:t},{name:"tokenAmountSold",type:"integer",value:n,gte:1},{name:"tokenAmountExpected",type:"integer",value:r,gte:1},{name:"exchangeID",type:"integer",value:e,gte:0}],o)){var a={owner_address:nt(i),exchange_id:parseInt(e),token_id:this.tronWeb.fromAscii(t),quant:parseInt(n),expected:parseInt(r)};s&&s.permissionId&&(a.Permission_id=s.permissionId),this.tronWeb.fullNode.request("wallet/exchangetransaction",a,"post").then(function(e){return it(e,o)}).catch(function(e){return o(e)})}}},{key:"updateSetting",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.tronWeb.defaultAddress.hex,r=arguments.length>3?arguments[3]:void 0,i=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(Le.isFunction(r)&&(i=r,r={}),Le.isFunction(n)?(i=n,n=this.tronWeb.defaultAddress.hex):Le.isObject(n)&&(r=n,n=this.tronWeb.defaultAddress.hex),!i)return this.injectPromise(this.updateSetting,e,t,n,r);if(!this.validator.notValid([{name:"owner",type:"address",value:n},{name:"contract",type:"address",value:e},{name:"userFeePercentage",type:"integer",value:t,gte:0,lte:100}],i)){var s={owner_address:nt(n),contract_address:nt(e),consume_user_resource_percent:t};r&&r.permissionId&&(s.Permission_id=r.permissionId),this.tronWeb.fullNode.request("wallet/updatesetting",s,"post").then(function(e){return it(e,i)}).catch(function(e){return i(e)})}}},{key:"updateEnergyLimit",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.tronWeb.defaultAddress.hex,r=arguments.length>3?arguments[3]:void 0,i=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(Le.isFunction(r)&&(i=r,r={}),Le.isFunction(n)?(i=n,n=this.tronWeb.defaultAddress.hex):Le.isObject(n)&&(r=n,n=this.tronWeb.defaultAddress.hex),!i)return this.injectPromise(this.updateEnergyLimit,e,t,n,r);if(!this.validator.notValid([{name:"owner",type:"address",value:n},{name:"contract",type:"address",value:e},{name:"originEnergyLimit",type:"integer",value:t,gte:0,lte:1e7}],i)){var s={owner_address:nt(n),contract_address:nt(e),origin_energy_limit:t};r&&r.permissionId&&(s.Permission_id=r.permissionId),this.tronWeb.fullNode.request("wallet/updateenergylimit",s,"post").then(function(e){return it(e,i)}).catch(function(e){return i(e)})}}},{key:"checkPermissions",value:function(e,t){if(e){if(e.type!==t||!e.permission_name||!Le.isString(e.permission_name)||!Le.isInteger(e.threshold)||e.threshold<1||!e.keys)return!1;var n=!0,r=!1,i=void 0;try{for(var s,o=e.keys[Symbol.iterator]();!(n=(s=o.next()).done);n=!0){var a=s.value;if(!this.tronWeb.isAddress(a.address)||!Le.isInteger(a.weight)||a.weight>e.threshold||a.weight<1||2===t&&!e.operations)return!1}}catch(e){r=!0,i=e}finally{try{n||null==o.return||o.return()}finally{if(r)throw i}}}return!0}},{key:"updateAccountPermissions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.tronWeb.defaultAddress.hex,t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(Le.isFunction(r)&&(i=r,r=!1),Le.isFunction(n)&&(i=n,n=r=!1),Le.isFunction(t)&&(i=t,t=n=r=!1),!i)return this.injectPromise(this.updateAccountPermissions,e,t,n,r);if(!this.tronWeb.isAddress(e))return i("Invalid ownerAddress provided");if(!this.checkPermissions(t,0))return i("Invalid ownerPermissions provided");if(!this.checkPermissions(n,1))return i("Invalid witnessPermissions provided");Array.isArray(r)||(r=[r]);var s=!0,o=!1,a=void 0;try{for(var u,c=r[Symbol.iterator]();!(s=(u=c.next()).done);s=!0){var d=u.value;if(!this.checkPermissions(d,2))return i("Invalid activesPermissions provided")}}catch(e){o=!0,a=e}finally{try{s||null==c.return||c.return()}finally{if(o)throw a}}var l={owner_address:e};t&&(l.owner=t),n&&(l.witness=n),r&&(l.actives=1===r.length?r[0]:r),this.tronWeb.fullNode.request("wallet/accountpermissionupdate",l,"post").then(function(e){return it(e,i)}).catch(function(e){return i(e)})}},{key:"newTxID",value:(i=f()(l.a.mark(function e(t,n){return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n){e.next=2;break}return e.abrupt("return",this.injectPromise(this.newTxID,t));case 2:this.tronWeb.fullNode.request("wallet/getsignweight",t,"post").then(function(e){e=e.transaction.transaction,"boolean"==typeof t.visible&&(e.visible=t.visible),n(null,e)}).catch(function(e){return n("Error generating a new transaction id.")});case 3:case"end":return e.stop()}},e,this)})),function(e,t){return i.apply(this,arguments)})},{key:"alterTransaction",value:(r=f()(l.a.mark(function e(t){var n,r,i=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=i.length>1&&void 0!==i[1]?i[1]:{},r=i.length>2&&void 0!==i[2]&&i[2]){e.next=4;break}return e.abrupt("return",this.injectPromise(this.alterTransaction,t,n));case 4:if(!t.signature){e.next=6;break}return e.abrupt("return",r("You can not extend the expiration of a signed transaction."));case 6:if(!n.data){e.next=12;break}if("hex"!==n.dataFormat&&(n.data=this.tronWeb.toHex(n.data)),n.data=n.data.replace(/^0x/,""),0!==n.data.length){e.next=11;break}return e.abrupt("return",r("Invalid data provided"));case 11:t.raw_data.data=n.data;case 12:if(!n.extension){e.next=17;break}if(n.extension=parseInt(1e3*n.extension),!(isNaN(n.extension)||t.raw_data.expiration+n.extension<=Date.now()+3e3)){e.next=16;break}return e.abrupt("return",r("Invalid extension provided"));case 16:t.raw_data.expiration+=n.extension;case 17:this.newTxID(t,r);case 18:case"end":return e.stop()}},e,this)})),function(e){return r.apply(this,arguments)})},{key:"extendExpiration",value:(n=f()(l.a.mark(function e(t,n){var r,i=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=i.length>2&&void 0!==i[2]&&i[2]){e.next=3;break}return e.abrupt("return",this.injectPromise(this.extendExpiration,t,n));case 3:this.alterTransaction(t,{extension:n},r);case 4:case"end":return e.stop()}},e,this)})),function(e,t){return n.apply(this,arguments)})},{key:"addUpdateData",value:(t=f()(l.a.mark(function e(t,n){var r,i,s=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=s.length>2&&void 0!==s[2]?s[2]:"utf8",i=s.length>3&&void 0!==s[3]&&s[3],Le.isFunction(r)&&(i=r,r="utf8"),i){e.next=5;break}return e.abrupt("return",this.injectPromise(this.addUpdateData,t,n,r));case 5:this.alterTransaction(t,{data:n,dataFormat:r},i);case 6:case"end":return e.stop()}},e,this)})),function(e,n){return t.apply(this,arguments)})}]),e}();function ot(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function at(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ot(n,!0).forEach(function(t){S()(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ot(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}var ut="Ethereum Signed Message:\n32";function ct(e){return It.address.toHex(e)}var dt=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(b()(this,e),!t||!t instanceof It)throw new Error("Expected instance of TronWeb");this.tronWeb=t,this.injectPromise=$e()(this),this.cache={contracts:{}},this.validator=new tt(t)}var t,n,r,i,s,o,a,u,c,d,h,v,p,g,m,k,x;return y()(e,[{key:"_parseToken",value:function(e){return at({},e,{name:this.tronWeb.toUtf8(e.name),abbr:e.abbr&&this.tronWeb.toUtf8(e.abbr),description:e.description&&this.tronWeb.toUtf8(e.description),url:e.url&&this.tronWeb.toUtf8(e.url)})}},{key:"getCurrentBlock",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!e)return this.injectPromise(this.getCurrentBlock);this.tronWeb.fullNode.request("wallet/getnowblock").then(function(t){e(null,t)}).catch(function(t){return e(t)})}},{key:"getConfirmedCurrentBlock",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!e)return this.injectPromise(this.getConfirmedCurrentBlock);this.tronWeb.solidityNode.request("walletsolidity/getnowblock").then(function(t){e(null,t)}).catch(function(t){return e(t)})}},{key:"getBlock",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.tronWeb.defaultBlock,t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return Le.isFunction(e)&&(t=e,e=this.tronWeb.defaultBlock),t?!1===e?t("No block identifier provided"):("earliest"==e&&(e=0),"latest"==e?this.getCurrentBlock(t):isNaN(e)&&Le.isHex(e)?this.getBlockByHash(e,t):void this.getBlockByNumber(e,t)):this.injectPromise(this.getBlock,e)}},{key:"getBlockByHash",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!t)return this.injectPromise(this.getBlockByHash,e);this.tronWeb.fullNode.request("wallet/getblockbyid",{value:e},"post").then(function(e){if(!Object.keys(e).length)return t("Block not found");t(null,e)}).catch(function(e){return t(e)})}},{key:"getBlockByNumber",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return t?!Le.isInteger(e)||e<0?t("Invalid block number provided"):void this.tronWeb.fullNode.request("wallet/getblockbynum",{num:parseInt(e)},"post").then(function(e){if(!Object.keys(e).length)return t("Block not found");t(null,e)}).catch(function(e){return t(e)}):this.injectPromise(this.getBlockByNumber,e)}},{key:"getBlockTransactionCount",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.tronWeb.defaultBlock,t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(Le.isFunction(e)&&(t=e,e=this.tronWeb.defaultBlock),!t)return this.injectPromise(this.getBlockTransactionCount,e);this.getBlock(e).then(function(e){var n=e.transactions;t(null,(void 0===n?[]:n).length)}).catch(function(e){return t(e)})}},{key:"getTransactionFromBlock",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.tronWeb.defaultBlock,t=arguments.length>1?arguments[1]:void 0,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(Le.isFunction(t)&&(n=t,t=0),Le.isFunction(e)&&(n=e,e=this.tronWeb.defaultBlock),!n)return this.injectPromise(this.getTransactionFromBlock,e,t);this.getBlock(e).then(function(e){var r=e.transactions,i=void 0!==r&&r;i?"number"==typeof t?t>=0&&t<i.length?n(null,i[t]):n("Invalid transaction index provided"):n(null,i):n("Transaction not found in block")}).catch(function(e){return n(e)})}},{key:"getTransaction",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!t)return this.injectPromise(this.getTransaction,e);this.tronWeb.fullNode.request("wallet/gettransactionbyid",{value:e},"post").then(function(e){if(!Object.keys(e).length)return t("Transaction not found");t(null,e)}).catch(function(e){return t(e)})}},{key:"getConfirmedTransaction",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!t)return this.injectPromise(this.getConfirmedTransaction,e);this.tronWeb.solidityNode.request("walletsolidity/gettransactionbyid",{value:e},"post").then(function(e){if(!Object.keys(e).length)return t("Transaction not found");t(null,e)}).catch(function(e){return t(e)})}},{key:"getUnconfirmedTransactionInfo",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return this._getTransactionInfoById(e,{confirmed:!1},t)}},{key:"getTransactionInfo",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return this._getTransactionInfoById(e,{confirmed:!0},t)}},{key:"_getTransactionInfoById",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(!n)return this.injectPromise(this._getTransactionInfoById,e,t);this.tronWeb[t.confirmed?"solidityNode":"fullNode"].request("wallet".concat(t.confirmed?"solidity":"","/gettransactioninfobyid"),{value:e},"post").then(function(e){n(null,e)}).catch(function(e){return n(e)})}},{key:"getTransactionsToAddress",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.tronWeb.defaultAddress.hex,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:30,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return Le.isFunction(n)&&(r=n,n=0),Le.isFunction(t)&&(r=t,t=30),r?(e=this.tronWeb.address.toHex(e),this.getTransactionsRelated(e,"to",t,n,r)):this.injectPromise(this.getTransactionsToAddress,e,t,n)}},{key:"getTransactionsFromAddress",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.tronWeb.defaultAddress.hex,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:30,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return Le.isFunction(n)&&(r=n,n=0),Le.isFunction(t)&&(r=t,t=30),r?(e=this.tronWeb.address.toHex(e),this.getTransactionsRelated(e,"from",t,n,r)):this.injectPromise(this.getTransactionsFromAddress,e,t,n)}},{key:"getTransactionsRelated",value:(x=f()(l.a.mark(function e(){var t,n,r,i,s,o,a,u,c,d=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=d.length>0&&void 0!==d[0]?d[0]:this.tronWeb.defaultAddress.hex,n=d.length>1&&void 0!==d[1]?d[1]:"all",r=d.length>2&&void 0!==d[2]?d[2]:30,i=d.length>3&&void 0!==d[3]?d[3]:0,s=d.length>4&&void 0!==d[4]&&d[4],Le.isFunction(i)&&(s=i,i=0),Le.isFunction(r)&&(s=r,r=30),Le.isFunction(n)&&(s=n,n="all"),Le.isFunction(t)&&(s=t,t=this.tronWeb.defaultAddress.hex),s){e.next=11;break}return e.abrupt("return",this.injectPromise(this.getTransactionsRelated,t,n,r,i));case 11:if(["to","from","all"].includes(n)){e.next=13;break}return e.abrupt("return",s('Invalid direction provided: Expected "to", "from" or "all"'));case 13:if("all"!=n){e.next=27;break}return e.prev=14,e.next=17,Promise.all([this.getTransactionsRelated(t,"from",r,i),this.getTransactionsRelated(t,"to",r,i)]);case 17:return o=e.sent,a=et()(o,2),u=a[0],c=a[1],e.abrupt("return",s(null,[].concat(R()(u.map(function(e){return e.direction="from",e})),R()(c.map(function(e){return e.direction="to",e}))).sort(function(e,t){return t.raw_data.timestamp-e.raw_data.timestamp})));case 24:return e.prev=24,e.t0=e.catch(14),e.abrupt("return",s(e.t0));case 27:if(this.tronWeb.isAddress(t)){e.next=29;break}return e.abrupt("return",s("Invalid address provided"));case 29:if(!(!Le.isInteger(r)||r<0||i&&r<1)){e.next=31;break}return e.abrupt("return",s("Invalid limit provided"));case 31:if(Le.isInteger(i)&&!(i<0)){e.next=33;break}return e.abrupt("return",s("Invalid offset provided"));case 33:t=this.tronWeb.address.toHex(t),this.tronWeb.solidityNode.request("walletextension/gettransactions".concat(n,"this"),{account:{address:t},offset:i,limit:r},"post").then(function(e){var t=e.transaction;s(null,t)}).catch(function(e){return s(e)});case 35:case"end":return e.stop()}},e,this,[[14,24]])})),function(){return x.apply(this,arguments)})},{key:"getAccount",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.tronWeb.defaultAddress.hex,t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return Le.isFunction(e)&&(t=e,e=this.tronWeb.defaultAddress.hex),t?this.tronWeb.isAddress(e)?(e=this.tronWeb.address.toHex(e),void this.tronWeb.solidityNode.request("walletsolidity/getaccount",{address:e},"post").then(function(e){t(null,e)}).catch(function(e){return t(e)})):t("Invalid address provided"):this.injectPromise(this.getAccount,e)}},{key:"getAccountById",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!t)return this.injectPromise(this.getAccountById,e);this.getAccountInfoById(e,{confirmed:!0},t)}},{key:"getAccountInfoById",value:function(e,t,n){this.validator.notValid([{name:"accountId",type:"hex",value:e},{name:"accountId",type:"string",lte:32,gte:8,value:e}],n)||(e.startsWith("0x")&&(e=e.slice(2)),this.tronWeb[t.confirmed?"solidityNode":"fullNode"].request("wallet".concat(t.confirmed?"solidity":"","/getaccountbyid"),{account_id:e},"post").then(function(e){n(null,e)}).catch(function(e){return n(e)}))}},{key:"getBalance",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.tronWeb.defaultAddress.hex,t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(Le.isFunction(e)&&(t=e,e=this.tronWeb.defaultAddress.hex),!t)return this.injectPromise(this.getBalance,e);this.getAccount(e).then(function(e){var n=e.balance;t(null,void 0===n?0:n)}).catch(function(e){return t(e)})}},{key:"getUnconfirmedAccount",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.tronWeb.defaultAddress.hex,t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return Le.isFunction(e)&&(t=e,e=this.tronWeb.defaultAddress.hex),t?this.tronWeb.isAddress(e)?(e=this.tronWeb.address.toHex(e),void this.tronWeb.fullNode.request("wallet/getaccount",{address:e},"post").then(function(e){t(null,e)}).catch(function(e){return t(e)})):t("Invalid address provided"):this.injectPromise(this.getUnconfirmedAccount,e)}},{key:"getUnconfirmedAccountById",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!t)return this.injectPromise(this.getUnconfirmedAccountById,e);this.getAccountInfoById(e,{confirmed:!1},t)}},{key:"getUnconfirmedBalance",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.tronWeb.defaultAddress.hex,t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(Le.isFunction(e)&&(t=e,e=this.tronWeb.defaultAddress.hex),!t)return this.injectPromise(this.getUnconfirmedBalance,e);this.getUnconfirmedAccount(e).then(function(e){var n=e.balance;t(null,void 0===n?0:n)}).catch(function(e){return t(e)})}},{key:"getBandwidth",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.tronWeb.defaultAddress.hex,t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return Le.isFunction(e)&&(t=e,e=this.tronWeb.defaultAddress.hex),t?this.tronWeb.isAddress(e)?(e=this.tronWeb.address.toHex(e),void this.tronWeb.fullNode.request("wallet/getaccountnet",{address:e},"post").then(function(e){var n=e.freeNetUsed,r=void 0===n?0:n,i=e.freeNetLimit,s=void 0===i?0:i,o=e.NetUsed,a=void 0===o?0:o,u=e.NetLimit;t(null,s-r+((void 0===u?0:u)-a))}).catch(function(e){return t(e)})):t("Invalid address provided"):this.injectPromise(this.getBandwidth,e)}},{key:"getTokensIssuedByAddress",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.tronWeb.defaultAddress.hex,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return Le.isFunction(t)&&(n=t,t=this.tronWeb.defaultAddress.hex),n?this.tronWeb.isAddress(t)?(t=this.tronWeb.address.toHex(t),void this.tronWeb.fullNode.request("wallet/getassetissuebyaccount",{address:t},"post").then(function(t){var r=t.assetIssue,i=void 0!==r&&r;if(!i)return n(null,{});var s=i.map(function(t){return e._parseToken(t)}).reduce(function(e,t){return e[t.name]=t,e},{});n(null,s)}).catch(function(e){return n(e)})):n("Invalid address provided"):this.injectPromise(this.getTokensIssuedByAddress,t)}},{key:"getTokenFromID",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return n?(Le.isInteger(t)&&(t=t.toString()),Le.isString(t)&&t.length?void this.tronWeb.fullNode.request("wallet/getassetissuebyname",{value:this.tronWeb.fromUtf8(t)},"post").then(function(t){if(!t.name)return n("Token does not exist");n(null,e._parseToken(t))}).catch(function(e){return n(e)}):n("Invalid token ID provided")):this.injectPromise(this.getTokenFromID,t)}},{key:"listNodes",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!t)return this.injectPromise(this.listNodes);this.tronWeb.fullNode.request("wallet/listnodes").then(function(n){var r=n.nodes;t(null,(void 0===r?[]:r).map(function(t){var n=t.address,r=n.host,i=n.port;return"".concat(e.tronWeb.toUtf8(r),":").concat(i)}))}).catch(function(e){return t(e)})}},{key:"getBlockRange",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:30,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return Le.isFunction(t)&&(n=t,t=30),Le.isFunction(e)&&(n=e,e=0),n?!Le.isInteger(e)||e<0?n("Invalid start of range provided"):!Le.isInteger(t)||t<=e?n("Invalid end of range provided"):void this.tronWeb.fullNode.request("wallet/getblockbylimitnext",{startNum:parseInt(e),endNum:parseInt(t)+1},"post").then(function(e){var t=e.block;n(null,void 0===t?[]:t)}).catch(function(e){return n(e)}):this.injectPromise(this.getBlockRange,e,t)}},{key:"listSuperRepresentatives",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!e)return this.injectPromise(this.listSuperRepresentatives);this.tronWeb.fullNode.request("wallet/listwitnesses").then(function(t){var n=t.witnesses;e(null,void 0===n?[]:n)}).catch(function(t){return e(t)})}},{key:"listTokens",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return Le.isFunction(n)&&(r=n,n=0),Le.isFunction(t)&&(r=t,t=0),r?!Le.isInteger(t)||t<0||n&&t<1?r("Invalid limit provided"):!Le.isInteger(n)||n<0?r("Invalid offset provided"):t?void this.tronWeb.fullNode.request("wallet/getpaginatedassetissuelist",{offset:parseInt(n),limit:parseInt(t)},"post").then(function(t){var n=t.assetIssue;r(null,(void 0===n?[]:n).map(function(t){return e._parseToken(t)}))}).catch(function(e){return r(e)}):this.tronWeb.fullNode.request("wallet/getassetissuelist").then(function(t){var n=t.assetIssue;r(null,(void 0===n?[]:n).map(function(t){return e._parseToken(t)}))}).catch(function(e){return r(e)}):this.injectPromise(this.listTokens,t,n)}},{key:"timeUntilNextVoteCycle",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!e)return this.injectPromise(this.timeUntilNextVoteCycle);this.tronWeb.fullNode.request("wallet/getnextmaintenancetime").then(function(t){var n=t.num,r=void 0===n?-1:n;if(-1==r)return e("Failed to get time until next vote cycle");e(null,Math.floor(r/1e3))}).catch(function(t){return e(t)})}},{key:"getContract",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return n?this.tronWeb.isAddress(e)?void(this.cache.contracts[e]?n(null,this.cache.contracts[e]):(e=this.tronWeb.address.toHex(e),this.tronWeb.fullNode.request("wallet/getcontract",{value:e}).then(function(r){if(r.Error)return n("Contract does not exist");t.cache.contracts[e]=r,n(null,r)}).catch(function(e){return n(e)}))):n("Invalid contract address provided"):this.injectPromise(this.getContract,e)}},{key:"verifyMessage",value:(k=f()(l.a.mark(function t(){var n,r,i,s,o,a=arguments;return l.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(n=a.length>0&&void 0!==a[0]&&a[0],r=a.length>1&&void 0!==a[1]&&a[1],i=a.length>2&&void 0!==a[2]?a[2]:this.tronWeb.defaultAddress.base58,s=!(a.length>3&&void 0!==a[3])||a[3],o=a.length>4&&void 0!==a[4]&&a[4],Le.isFunction(i)&&(o=i,i=this.tronWeb.defaultAddress.base58,s=!0),Le.isFunction(s)&&(o=s,s=!0),o){t.next=9;break}return t.abrupt("return",this.injectPromise(this.verifyMessage,n,r,i,s));case 9:if(Le.isHex(n)){t.next=11;break}return t.abrupt("return",o("Expected hex message input"));case 11:if(!e.verifySignature(n,i,r,s)){t.next=13;break}return t.abrupt("return",o(null,!0));case 13:o("Signature does not match");case 14:case"end":return t.stop()}},t,this)})),function(){return k.apply(this,arguments)})},{key:"sign",value:(m=f()(l.a.mark(function t(){var n,r,i,s,o,a,u=arguments;return l.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(n=u.length>0&&void 0!==u[0]&&u[0],r=u.length>1&&void 0!==u[1]?u[1]:this.tronWeb.defaultPrivateKey,i=!(u.length>2&&void 0!==u[2])||u[2],s=u.length>3&&void 0!==u[3]&&u[3],o=u.length>4&&void 0!==u[4]&&u[4],Le.isFunction(s)&&(o=s,s=!1),Le.isFunction(i)&&(o=i,i=!0,s=!1),Le.isFunction(r)&&(o=r,r=this.tronWeb.defaultPrivateKey,i=!0,s=!1),o){t.next=10;break}return t.abrupt("return",this.injectPromise(this.sign,n,r,i,s));case 10:if(!Le.isString(n)){t.next=21;break}if(Le.isHex(n)){t.next=13;break}return t.abrupt("return",o("Expected hex message input"));case 13:return t.prev=13,a=e.signString(n,r,i),t.abrupt("return",o(null,a));case 18:t.prev=18,t.t0=t.catch(13),o(t.t0);case 21:if(Le.isObject(n)){t.next=23;break}return t.abrupt("return",o("Invalid transaction provided"));case 23:if(s||!n.signature){t.next=25;break}return t.abrupt("return",o("Transaction is already signed"));case 25:if(t.prev=25,s){t.next=30;break}if(this.tronWeb.address.toHex(this.tronWeb.address.fromPrivateKey(r)).toLowerCase()===n.raw_data.contract[0].parameter.value.owner_address.toLowerCase()){t.next=30;break}return t.abrupt("return",o("Private key does not match address in transaction"));case 30:return t.abrupt("return",o(null,Le.crypto.signTransaction(r,n)));case 33:t.prev=33,t.t1=t.catch(25),o(t.t1);case 36:case"end":return t.stop()}},t,this,[[13,18],[25,33]])})),function(){return m.apply(this,arguments)})},{key:"multiSign",value:(g=f()(l.a.mark(function e(){var t,n,r,i,s,o,a,u=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=u.length>0&&void 0!==u[0]&&u[0],n=u.length>1&&void 0!==u[1]?u[1]:this.tronWeb.defaultPrivateKey,r=u.length>2&&void 0!==u[2]&&u[2],i=u.length>3&&void 0!==u[3]&&u[3],Le.isFunction(r)&&(i=r,r=0),Le.isFunction(n)&&(i=n,n=this.tronWeb.defaultPrivateKey,r=0),i){e.next=8;break}return e.abrupt("return",this.injectPromise(this.multiSign,t,n,r));case 8:if(Le.isObject(t)&&t.raw_data&&t.raw_data.contract){e.next=10;break}return e.abrupt("return",i("Invalid transaction provided"));case 10:if(t.raw_data.contract[0].Permission_id||!(r>0)){e.next=30;break}return t.raw_data.contract[0].Permission_id=r,s=this.tronWeb.address.toHex(this.tronWeb.address.fromPrivateKey(n)).toLowerCase(),e.next=15,this.getSignWeight(t,r);case 15:if("PERMISSION_ERROR"!==(o=e.sent).result.code){e.next=18;break}return e.abrupt("return",i(o.result.message));case 18:if(a=!1,o.permission.keys.map(function(e){e.address===s&&(a=!0)}),a){e.next=22;break}return e.abrupt("return",i(n+" has no permission to sign"));case 22:if(!o.approved_list||-1==o.approved_list.indexOf(s)){e.next=24;break}return e.abrupt("return",i(n+" already sign transaction"));case 24:if(!o.transaction||!o.transaction.transaction){e.next=29;break}t=o.transaction.transaction,r>0&&(t.raw_data.contract[0].Permission_id=r),e.next=30;break;case 29:return e.abrupt("return",i("Invalid transaction provided"));case 30:return e.prev=30,e.abrupt("return",i(null,Le.crypto.signTransaction(n,t)));case 34:e.prev=34,e.t0=e.catch(30),i(e.t0);case 37:case"end":return e.stop()}},e,this,[[30,34]])})),function(){return g.apply(this,arguments)})},{key:"getApprovedList",value:(p=f()(l.a.mark(function e(t){var n,r=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=r.length>1&&void 0!==r[1]&&r[1]){e.next=3;break}return e.abrupt("return",this.injectPromise(this.getApprovedList,t));case 3:if(Le.isObject(t)){e.next=5;break}return e.abrupt("return",n("Invalid transaction provided"));case 5:this.tronWeb.fullNode.request("wallet/getapprovedlist",t,"post").then(function(e){n(null,e)}).catch(function(e){return n(e)});case 6:case"end":return e.stop()}},e,this)})),function(e){return p.apply(this,arguments)})},{key:"getSignWeight",value:(v=f()(l.a.mark(function e(t,n){var r,i=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=i.length>2&&void 0!==i[2]&&i[2],Le.isFunction(n)&&(r=n,n=void 0),r){e.next=4;break}return e.abrupt("return",this.injectPromise(this.getSignWeight,t,n));case 4:if(Le.isObject(t)&&t.raw_data&&t.raw_data.contract){e.next=6;break}return e.abrupt("return",r("Invalid transaction provided"));case 6:if(Le.isInteger(n)?t.raw_data.contract[0].Permission_id=parseInt(n):"number"!=typeof t.raw_data.contract[0].Permission_id&&(t.raw_data.contract[0].Permission_id=0),Le.isObject(t)){e.next=9;break}return e.abrupt("return",r("Invalid transaction provided"));case 9:this.tronWeb.fullNode.request("wallet/getsignweight",t,"post").then(function(e){r(null,e)}).catch(function(e){return r(e)});case 10:case"end":return e.stop()}},e,this)})),function(e,t){return v.apply(this,arguments)})},{key:"sendRawTransaction",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return Le.isFunction(t)&&(n=t,t={}),n?Le.isObject(e)?Le.isObject(t)?e.signature&&Le.isArray(e.signature)?void this.tronWeb.fullNode.request("wallet/broadcasttransaction",e,"post").then(function(t){t.result&&(t.transaction=e),n(null,t)}).catch(function(e){return n(e)}):n("Transaction is not signed"):n("Invalid options provided"):n("Invalid transaction provided"):this.injectPromise(this.sendRawTransaction,e,t)}},{key:"sendTransaction",value:(h=f()(l.a.mark(function e(){var t,n,r,i,s,o,a,u,c=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=c.length>0&&void 0!==c[0]&&c[0],n=c.length>1&&void 0!==c[1]&&c[1],r=c.length>2&&void 0!==c[2]?c[2]:{},i=c.length>3&&void 0!==c[3]&&c[3],Le.isFunction(r)&&(i=r,r={}),"string"==typeof r&&(r={privateKey:r}),i){e.next=8;break}return e.abrupt("return",this.injectPromise(this.sendTransaction,t,n,r));case 8:if(this.tronWeb.isAddress(t)){e.next=10;break}return e.abrupt("return",i("Invalid recipient provided"));case 10:if(Le.isInteger(n)&&!(n<=0)){e.next=12;break}return e.abrupt("return",i("Invalid amount provided"));case 12:if((r=at({privateKey:this.tronWeb.defaultPrivateKey,address:this.tronWeb.defaultAddress.hex},r)).privateKey||r.address){e.next=15;break}return e.abrupt("return",i("Function requires either a private key or address to be set"));case 15:return e.prev=15,s=r.privateKey?this.tronWeb.address.fromPrivateKey(r.privateKey):r.address,e.next=19,this.tronWeb.transactionBuilder.sendTrx(t,n,s);case 19:return o=e.sent,e.next=22,this.sign(o,r.privateKey||void 0);case 22:return a=e.sent,e.next=25,this.sendRawTransaction(a);case 25:return u=e.sent,e.abrupt("return",i(null,u));case 29:return e.prev=29,e.t0=e.catch(15),e.abrupt("return",i(e.t0));case 32:case"end":return e.stop()}},e,this,[[15,29]])})),function(){return h.apply(this,arguments)})},{key:"sendToken",value:(d=f()(l.a.mark(function e(){var t,n,r,i,s,o,a,u,c,d=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=d.length>0&&void 0!==d[0]&&d[0],n=d.length>1&&void 0!==d[1]&&d[1],r=d.length>2&&void 0!==d[2]&&d[2],i=d.length>3&&void 0!==d[3]?d[3]:{},s=d.length>4&&void 0!==d[4]&&d[4],Le.isFunction(i)&&(s=i,i={}),"string"==typeof i&&(i={privateKey:i}),s){e.next=9;break}return e.abrupt("return",this.injectPromise(this.sendToken,t,n,r,i));case 9:if(this.tronWeb.isAddress(t)){e.next=11;break}return e.abrupt("return",s("Invalid recipient provided"));case 11:if(Le.isInteger(n)&&!(n<=0)){e.next=13;break}return e.abrupt("return",s("Invalid amount provided"));case 13:if(Le.isInteger(r)&&(r=r.toString()),Le.isString(r)){e.next=16;break}return e.abrupt("return",s("Invalid token ID provided"));case 16:if((i=at({privateKey:this.tronWeb.defaultPrivateKey,address:this.tronWeb.defaultAddress.hex},i)).privateKey||i.address){e.next=19;break}return e.abrupt("return",s("Function requires either a private key or address to be set"));case 19:return e.prev=19,o=i.privateKey?this.tronWeb.address.fromPrivateKey(i.privateKey):i.address,e.next=23,this.tronWeb.transactionBuilder.sendToken(t,n,r,o);case 23:return a=e.sent,e.next=26,this.sign(a,i.privateKey||void 0);case 26:return u=e.sent,e.next=29,this.sendRawTransaction(u);case 29:return c=e.sent,e.abrupt("return",s(null,c));case 33:return e.prev=33,e.t0=e.catch(19),e.abrupt("return",s(e.t0));case 36:case"end":return e.stop()}},e,this,[[19,33]])})),function(){return d.apply(this,arguments)})},{key:"freezeBalance",value:(c=f()(l.a.mark(function e(){var t,n,r,i,s,o,a,u,c,d,h=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=h.length>0&&void 0!==h[0]?h[0]:0,n=h.length>1&&void 0!==h[1]?h[1]:3,r=h.length>2&&void 0!==h[2]?h[2]:"BANDWIDTH",i=h.length>3&&void 0!==h[3]?h[3]:{},s=h.length>4&&void 0!==h[4]?h[4]:void 0,o=h.length>5&&void 0!==h[5]&&h[5],Le.isFunction(s)&&(o=s,s=void 0),Le.isFunction(n)&&(o=n,n=3),Le.isFunction(r)&&(o=r,r="BANDWIDTH"),Le.isFunction(i)&&(o=i,i={}),"string"==typeof i&&(i={privateKey:i}),o){e.next=13;break}return e.abrupt("return",this.injectPromise(this.freezeBalance,t,n,r,i,s));case 13:if(["BANDWIDTH","ENERGY"].includes(r)){e.next=15;break}return e.abrupt("return",o('Invalid resource provided: Expected "BANDWIDTH" or "ENERGY"'));case 15:if(Le.isInteger(t)&&!(t<=0)){e.next=17;break}return e.abrupt("return",o("Invalid amount provided"));case 17:if(Le.isInteger(n)&&!(n<3)){e.next=19;break}return e.abrupt("return",o("Invalid duration provided, minimum of 3 days"));case 19:if((i=at({privateKey:this.tronWeb.defaultPrivateKey,address:this.tronWeb.defaultAddress.hex},i)).privateKey||i.address){e.next=22;break}return e.abrupt("return",o("Function requires either a private key or address to be set"));case 22:return e.prev=22,a=i.privateKey?this.tronWeb.address.fromPrivateKey(i.privateKey):i.address,e.next=26,this.tronWeb.transactionBuilder.freezeBalance(t,n,r,a,s);case 26:return u=e.sent,e.next=29,this.sign(u,i.privateKey||void 0);case 29:return c=e.sent,e.next=32,this.sendRawTransaction(c);case 32:return d=e.sent,e.abrupt("return",o(null,d));case 36:return e.prev=36,e.t0=e.catch(22),e.abrupt("return",o(e.t0));case 39:case"end":return e.stop()}},e,this,[[22,36]])})),function(){return c.apply(this,arguments)})},{key:"unfreezeBalance",value:(u=f()(l.a.mark(function e(){var t,n,r,i,s,o,a,u,c=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=c.length>0&&void 0!==c[0]?c[0]:"BANDWIDTH",n=c.length>1&&void 0!==c[1]?c[1]:{},r=c.length>2&&void 0!==c[2]?c[2]:void 0,i=c.length>3&&void 0!==c[3]&&c[3],Le.isFunction(r)&&(i=r,r=void 0),Le.isFunction(t)&&(i=t,t="BANDWIDTH"),Le.isFunction(n)&&(i=n,n={}),"string"==typeof n&&(n={privateKey:n}),i){e.next=10;break}return e.abrupt("return",this.injectPromise(this.unfreezeBalance,t,n,r));case 10:if(["BANDWIDTH","ENERGY"].includes(t)){e.next=12;break}return e.abrupt("return",i('Invalid resource provided: Expected "BANDWIDTH" or "ENERGY"'));case 12:if((n=at({privateKey:this.tronWeb.defaultPrivateKey,address:this.tronWeb.defaultAddress.hex},n)).privateKey||n.address){e.next=15;break}return e.abrupt("return",i("Function requires either a private key or address to be set"));case 15:return e.prev=15,s=n.privateKey?this.tronWeb.address.fromPrivateKey(n.privateKey):n.address,e.next=19,this.tronWeb.transactionBuilder.unfreezeBalance(t,s,r);case 19:return o=e.sent,e.next=22,this.sign(o,n.privateKey||void 0);case 22:return a=e.sent,e.next=25,this.sendRawTransaction(a);case 25:return u=e.sent,e.abrupt("return",i(null,u));case 29:return e.prev=29,e.t0=e.catch(15),e.abrupt("return",i(e.t0));case 32:case"end":return e.stop()}},e,this,[[15,29]])})),function(){return u.apply(this,arguments)})},{key:"updateAccount",value:(a=f()(l.a.mark(function e(){var t,n,r,i,s,o,a,u=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=u.length>0&&void 0!==u[0]&&u[0],n=u.length>1&&void 0!==u[1]?u[1]:{},r=u.length>2&&void 0!==u[2]&&u[2],Le.isFunction(n)&&(r=n,n={}),"string"==typeof n&&(n={privateKey:n}),r){e.next=7;break}return e.abrupt("return",this.injectPromise(this.updateAccount,t,n));case 7:if(Le.isString(t)&&t.length){e.next=9;break}return e.abrupt("return",r("Name must be a string"));case 9:if((n=at({privateKey:this.tronWeb.defaultPrivateKey,address:this.tronWeb.defaultAddress.hex},n)).privateKey||n.address){e.next=12;break}return e.abrupt("return",r("Function requires either a private key or address to be set"));case 12:return e.prev=12,i=n.privateKey?this.tronWeb.address.fromPrivateKey(n.privateKey):n.address,e.next=16,this.tronWeb.transactionBuilder.updateAccount(t,i);case 16:return s=e.sent,e.next=19,this.sign(s,n.privateKey||void 0);case 19:return o=e.sent,e.next=22,this.sendRawTransaction(o);case 22:return a=e.sent,e.abrupt("return",r(null,a));case 26:return e.prev=26,e.t0=e.catch(12),e.abrupt("return",r(e.t0));case 29:case"end":return e.stop()}},e,this,[[12,26]])})),function(){return a.apply(this,arguments)})},{key:"signMessage",value:function(){return this.sign.apply(this,arguments)}},{key:"sendAsset",value:function(){return this.sendToken.apply(this,arguments)}},{key:"send",value:function(){return this.sendTransaction.apply(this,arguments)}},{key:"sendTrx",value:function(){return this.sendTransaction.apply(this,arguments)}},{key:"broadcast",value:function(){return this.sendRawTransaction.apply(this,arguments)}},{key:"signTransaction",value:function(){return this.sign.apply(this,arguments)}},{key:"getProposal",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return t?!Le.isInteger(e)||e<0?t("Invalid proposalID provided"):void this.tronWeb.fullNode.request("wallet/getproposalbyid",{id:parseInt(e)},"post").then(function(e){t(null,e)}).catch(function(e){return t(e)}):this.injectPromise(this.getProposal,e)}},{key:"listProposals",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!e)return this.injectPromise(this.listProposals);this.tronWeb.fullNode.request("wallet/listproposals",{},"post").then(function(t){var n=t.proposals;e(null,void 0===n?[]:n)}).catch(function(t){return e(t)})}},{key:"getChainParameters",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!e)return this.injectPromise(this.getChainParameters);this.tronWeb.fullNode.request("wallet/getchainparameters",{},"post").then(function(t){var n=t.chainParameter;e(null,void 0===n?[]:n)}).catch(function(t){return e(t)})}},{key:"getAccountResources",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.tronWeb.defaultAddress.hex,t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return t?this.tronWeb.isAddress(e)?void this.tronWeb.fullNode.request("wallet/getaccountresource",{address:this.tronWeb.address.toHex(e)},"post").then(function(e){t(null,e)}).catch(function(e){return t(e)}):t("Invalid address provided"):this.injectPromise(this.getAccountResources,e)}},{key:"getExchangeByID",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return t?!Le.isInteger(e)||e<0?t("Invalid exchangeID provided"):void this.tronWeb.fullNode.request("wallet/getexchangebyid",{id:e},"post").then(function(e){t(null,e)}).catch(function(e){return t(e)}):this.injectPromise(this.getExchangeByID,e)}},{key:"listExchanges",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!e)return this.injectPromise(this.listExchanges);this.tronWeb.fullNode.request("wallet/listexchanges",{},"post").then(function(t){var n=t.exchanges;e(null,void 0===n?[]:n)},"post").catch(function(t){return e(t)})}},{key:"listExchangesPaginated",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(Le.isFunction(t)&&(n=t,t=0),Le.isFunction(e)&&(n=e,e=10),!n)return this.injectPromise(this.listExchangesPaginated,e,t);this.tronWeb.fullNode.request("wallet/getpaginatedexchangelist",{limit:e,offset:t},"post").then(function(e){var t=e.exchanges;n(null,void 0===t?[]:t)}).catch(function(e){return n(e)})}},{key:"getNodeInfo",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!e)return this.injectPromise(this.getNodeInfo);this.tronWeb.fullNode.request("wallet/getnodeinfo",{},"post").then(function(t){e(null,t)},"post").catch(function(t){return e(t)})}},{key:"getTokenListByName",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return n?(Le.isInteger(t)&&(t=t.toString()),Le.isString(t)&&t.length?void this.tronWeb.fullNode.request("wallet/getassetissuelistbyname",{value:this.tronWeb.fromUtf8(t)},"post").then(function(t){if(Array.isArray(t.assetIssue))n(null,t.assetIssue.map(function(t){return e._parseToken(t)}));else if(!t.name)return n("Token does not exist");n(null,e._parseToken(t))}).catch(function(e){return n(e)}):n("Invalid token ID provided")):this.injectPromise(this.getTokenListByName,t)}},{key:"getTokenByID",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return n?(Le.isInteger(t)&&(t=t.toString()),Le.isString(t)&&t.length?void this.tronWeb.fullNode.request("wallet/getassetissuebyid",{value:t},"post").then(function(t){if(!t.name)return n("Token does not exist");n(null,e._parseToken(t))}).catch(function(e){return n(e)}):n("Invalid token ID provided")):this.injectPromise(this.getTokenByID,t)}},{key:"getReward",value:(o=f()(l.a.mark(function e(t){var n,r,i=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=i.length>1&&void 0!==i[1]?i[1]:{},r=i.length>2&&void 0!==i[2]&&i[2],n.confirmed=!0,e.abrupt("return",this._getReward(t,n,r));case 4:case"end":return e.stop()}},e,this)})),function(e){return o.apply(this,arguments)})},{key:"getUnconfirmedReward",value:(s=f()(l.a.mark(function e(t){var n,r,i=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=i.length>1&&void 0!==i[1]?i[1]:{},r=i.length>2&&void 0!==i[2]&&i[2],n.confirmed=!1,e.abrupt("return",this._getReward(t,n,r));case 4:case"end":return e.stop()}},e,this)})),function(e){return s.apply(this,arguments)})},{key:"getBrokerage",value:(i=f()(l.a.mark(function e(t){var n,r,i=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=i.length>1&&void 0!==i[1]?i[1]:{},r=i.length>2&&void 0!==i[2]&&i[2],n.confirmed=!0,e.abrupt("return",this._getBrokerage(t,n,r));case 4:case"end":return e.stop()}},e,this)})),function(e){return i.apply(this,arguments)})},{key:"getUnconfirmedBrokerage",value:(r=f()(l.a.mark(function e(t){var n,r,i=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=i.length>1&&void 0!==i[1]?i[1]:{},r=i.length>2&&void 0!==i[2]&&i[2],n.confirmed=!1,e.abrupt("return",this._getBrokerage(t,n,r));case 4:case"end":return e.stop()}},e,this)})),function(e){return r.apply(this,arguments)})},{key:"_getReward",value:(n=f()(l.a.mark(function e(){var t,n,r,i,s=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=s.length>0&&void 0!==s[0]?s[0]:this.tronWeb.defaultAddress.hex,n=s.length>1?s[1]:void 0,r=s.length>2&&void 0!==s[2]&&s[2],Le.isFunction(n)&&(r=n,n={}),Le.isFunction(t)?(r=t,t=this.tronWeb.defaultAddress.hex):Le.isObject(t)&&(n=t,t=this.tronWeb.defaultAddress.hex),r){e.next=7;break}return e.abrupt("return",this.injectPromise(this._getReward,t,n));case 7:if(!this.validator.notValid([{name:"origin",type:"address",value:t}],r)){e.next=9;break}return e.abrupt("return");case 9:i={address:ct(t)},this.tronWeb[n.confirmed?"solidityNode":"fullNode"].request("wallet".concat(n.confirmed?"solidity":"","/getReward"),i,"post").then(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(void 0===e.reward)return r("Not found.");r(null,e.reward)}).catch(function(e){return r(e)});case 11:case"end":return e.stop()}},e,this)})),function(){return n.apply(this,arguments)})},{key:"_getBrokerage",value:(t=f()(l.a.mark(function e(){var t,n,r,i,s=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=s.length>0&&void 0!==s[0]?s[0]:this.tronWeb.defaultAddress.hex,n=s.length>1?s[1]:void 0,r=s.length>2&&void 0!==s[2]&&s[2],Le.isFunction(n)&&(r=n,n={}),Le.isFunction(t)?(r=t,t=this.tronWeb.defaultAddress.hex):Le.isObject(t)&&(n=t,t=this.tronWeb.defaultAddress.hex),r){e.next=7;break}return e.abrupt("return",this.injectPromise(this._getBrokerage,t,n));case 7:if(!this.validator.notValid([{name:"origin",type:"address",value:t}],r)){e.next=9;break}return e.abrupt("return");case 9:i={address:ct(t)},this.tronWeb[n.confirmed?"solidityNode":"fullNode"].request("wallet".concat(n.confirmed?"solidity":"","/getBrokerage"),i,"post").then(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(void 0===e.brokerage)return r("Not found.");r(null,e.brokerage)}).catch(function(e){return r(e)});case 11:case"end":return e.stop()}},e,this)})),function(){return t.apply(this,arguments)})}],[{key:"verifySignature",value:function(e,t,n){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];e=e.replace(/^0x/,""),n=n.replace(/^0x/,"");var i=[].concat(R()(de(r?"TRON Signed Message:\n32":ut)),R()(Le.code.hexStr2byteArray(e))),s=ue(i),o=le(s,{recoveryParam:"1c"==n.substring(128,130)?1:0,r:"0x"+n.substring(0,64),s:"0x"+n.substring(64,128)}),a=U+o.substr(2),u=It.address.fromHex(a);return u==It.address.fromHex(t)}},{key:"signString",value:function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];e=e.replace(/^0x/,"");var r=new he(t),i=[].concat(R()(de(n?"TRON Signed Message:\n32":ut)),R()(Le.code.hexStr2byteArray(e))),s=ue(i),o=r.signDigest(s),a=["0x",o.r.substring(2),o.s.substring(2),Number(o.v).toString(16)].join("");return a}}]),e}();function lt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function ht(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?lt(n,!0).forEach(function(t){S()(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):lt(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}var ft=function(e){return e.name+"("+vt(e.inputs||[]).join(",")+")"},vt=function(e){return e.map(function(e){return e.type})},pt=function(e,t){var n=e.map(function(e){return e.name}).filter(function(e){return!!e}),r=e.map(function(e){return e.type});return Le.abi.decodeParams(n,r,t)},gt=function(){function e(t,n){b()(this,e),this.tronWeb=t.tronWeb,this.contract=t,this.abi=n,this.name=n.name||(n.name=n.type),this.inputs=n.inputs||[],this.outputs=n.outputs||[],this.functionSelector=ft(n),this.signature=this.tronWeb.sha3(this.functionSelector,!1).slice(0,8),this.injectPromise=$e()(this),this.defaultOptions={feeLimit:1e9,callValue:0,userFeePercentage:100,shouldPollResponse:!1}}var t,n,r;return y()(e,[{key:"decodeInput",value:function(e){return pt(this.inputs,"0x"+e)}},{key:"onMethod",value:function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];var i=vt(this.inputs);return n.forEach(function(t,r){"address"==i[r]&&(n[r]=e.tronWeb.address.toHex(t).replace(L,"0x")),"address[]"==i[r]&&(n[r]=n[r].map(function(t){return e.tronWeb.address.toHex(t).replace(L,"0x")}))}),{call:function(){for(var t=arguments.length,r=new Array(t),s=0;s<t;s++)r[s]=arguments[s];return e._call.apply(e,[i,n].concat(r))},send:function(){for(var t=arguments.length,r=new Array(t),s=0;s<t;s++)r[s]=arguments[s];return e._send.apply(e,[i,n].concat(r))},watch:function(){return e._watch.apply(e,arguments)}}}},{key:"_call",value:(r=f()(l.a.mark(function e(t,n){var r,i,s,o,a=this,u=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=u.length>2&&void 0!==u[2]?u[2]:{},i=u.length>3&&void 0!==u[3]&&u[3],Le.isFunction(r)&&(i=r,r={}),i){e.next=5;break}return e.abrupt("return",this.injectPromise(this._call,t,n,r));case 5:if(t.length===n.length){e.next=7;break}return e.abrupt("return",i("Invalid argument count provided"));case 7:if(this.contract.address){e.next=9;break}return e.abrupt("return",i("Smart contract is missing address"));case 9:if(this.contract.deployed){e.next=11;break}return e.abrupt("return",i("Calling smart contracts requires you to load the contract first"));case 11:if(s=this.abi.stateMutability,["pure","view"].includes(s.toLowerCase())){e.next=14;break}return e.abrupt("return",i('Methods with state mutability "'.concat(s,'" must use send()')));case 14:r=ht({},this.defaultOptions,{from:this.tronWeb.defaultAddress.hex},r),o=n.map(function(e,n){return{type:t[n],value:e}}),this.tronWeb.transactionBuilder.triggerSmartContract(this.contract.address,this.functionSelector,r,o,!!r.from&&this.tronWeb.address.toHex(r.from),function(e,t){if(e)return i(e);if(!Le.hasProperty(t,"constant_result"))return i("Failed to execute");try{var n=t.constant_result[0].length;if(0===n||n%64==8){var r="The call has been reverted or has thrown an error.";if(0!==n){r+=" Error message: ";for(var s="",o=t.constant_result[0].substring(8),u=0;u<n-8;u+=64)s+=a.tronWeb.toUtf8(o.substring(u,u+64));r+=s.replace(/(\u0000|\u000b|\f)+/g," ").replace(/ +/g," ").replace(/\s+$/g,"")}return i(r)}var c=pt(a.outputs,"0x"+t.constant_result[0]);return 1===c.length&&(c=c[0]),i(null,c)}catch(e){return i(e)}});case 17:case"end":return e.stop()}},e,this)})),function(e,t){return r.apply(this,arguments)})},{key:"_send",value:(n=f()(l.a.mark(function e(t,n){var r,i,s,o,a,u,c,d,h,v,p,g=this,b=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=b.length>2&&void 0!==b[2]?b[2]:{},i=b.length>3&&void 0!==b[3]?b[3]:this.tronWeb.defaultPrivateKey,s=b.length>4&&void 0!==b[4]&&b[4],Le.isFunction(i)&&(s=i,i=this.tronWeb.defaultPrivateKey),Le.isFunction(r)&&(s=r,r={}),s){e.next=7;break}return e.abrupt("return",this.injectPromise(this._send,t,n,r,i));case 7:if(t.length===n.length){e.next=9;break}throw new Error("Invalid argument count provided");case 9:if(this.contract.address){e.next=11;break}return e.abrupt("return",s("Smart contract is missing address"));case 11:if(this.contract.deployed){e.next=13;break}return e.abrupt("return",s("Calling smart contracts requires you to load the contract first"));case 13:if(o=this.abi.stateMutability,!["pure","view"].includes(o.toLowerCase())){e.next=16;break}return e.abrupt("return",s('Methods with state mutability "'.concat(o,'" must use call()')));case 16:return["payable"].includes(o.toLowerCase())||(r.callValue=0),r=ht({},this.defaultOptions,{from:this.tronWeb.defaultAddress.hex},r),a=n.map(function(e,n){return{type:t[n],value:e}}),e.prev=19,u=i?this.tronWeb.address.fromPrivateKey(i):this.tronWeb.defaultAddress.base58,e.next=23,this.tronWeb.transactionBuilder.triggerSmartContract(this.contract.address,this.functionSelector,r,a,this.tronWeb.address.toHex(u));case 23:if((c=e.sent).result&&c.result.result){e.next=26;break}return e.abrupt("return",s("Unknown error: "+JSON.stringify(c,null,2)));case 26:return e.next=28,this.tronWeb.trx.sign(c.transaction,i);case 28:if((d=e.sent).signature){e.next=33;break}if(i){e.next=32;break}return e.abrupt("return",s("Transaction was not signed properly"));case 32:return e.abrupt("return",s("Invalid private key provided"));case 33:return e.next=35,this.tronWeb.trx.sendRawTransaction(d);case 35:if(!(h=e.sent).code){e.next=40;break}return v={error:h.code,message:h.code},h.message&&(v.message=this.tronWeb.toUtf8(h.message)),e.abrupt("return",s(v));case 40:if(r.shouldPollResponse){e.next=42;break}return e.abrupt("return",s(null,d.txID));case 42:(p=function(){var e=f()(l.a.mark(function e(){var t,n,i,o=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(20!==(t=o.length>0&&void 0!==o[0]?o[0]:0)){e.next=3;break}return e.abrupt("return",s({error:"Cannot find result in solidity node",transaction:d}));case 3:return e.next=5,g.tronWeb.trx.getTransactionInfo(d.txID);case 5:if(n=e.sent,Object.keys(n).length){e.next=8;break}return e.abrupt("return",setTimeout(function(){p(t+1)},3e3));case 8:if(!n.result||"FAILED"!==n.result){e.next=10;break}return e.abrupt("return",s({error:g.tronWeb.toUtf8(n.resMessage),transaction:d,output:n}));case 10:if(Le.hasProperty(n,"contractResult")){e.next=12;break}return e.abrupt("return",s({error:"Failed to execute: "+JSON.stringify(n,null,2),transaction:d,output:n}));case 12:if(!r.rawResponse){e.next=14;break}return e.abrupt("return",s(null,n));case 14:if(1===(i=pt(g.outputs,"0x"+n.contractResult[0])).length&&(i=i[0]),!r.keepTxID){e.next=18;break}return e.abrupt("return",s(null,[d.txID,i]));case 18:return e.abrupt("return",s(null,i));case 19:case"end":return e.stop()}},e)}));return function(){return e.apply(this,arguments)}}())(),e.next=49;break;case 46:return e.prev=46,e.t0=e.catch(19),e.abrupt("return",s(e.t0));case 49:case"end":return e.stop()}},e,this,[[19,46]])})),function(e,t){return n.apply(this,arguments)})},{key:"_watch",value:(t=f()(l.a.mark(function e(){var t,n,r,i,s,o,a,u=this,c=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=c.length>0&&void 0!==c[0]?c[0]:{},n=c.length>1&&void 0!==c[1]&&c[1],Le.isFunction(t)&&(n=t,t={}),Le.isFunction(n)){e.next=5;break}throw new Error("Expected callback to be provided");case 5:if(this.contract.address){e.next=7;break}return e.abrupt("return",n("Smart contract is missing address"));case 7:if(this.abi.type&&/event/i.test(this.abi.type)){e.next=9;break}return e.abrupt("return",n("Invalid method type for event watching"));case 9:if(this.tronWeb.eventServer){e.next=11;break}return e.abrupt("return",n("No event server configured"));case 11:return r=!1,i=!1,s=Date.now()-1e3,o=function(){var e=f()(l.a.mark(function e(){var n,r,o,a,c,d;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,n={since:s,eventName:u.name,sort:"block_timestamp",blockNumber:"latest",filters:t.filters},t.resourceNode&&(/full/i.test(t.resourceNode)?n.onlyUnconfirmed=!0:n.onlyConfirmed=!0),e.next=5,u.tronWeb.event.getEventsByContractAddress(u.contract.address,n);case 5:return r=e.sent,o=r.sort(function(e,t){return t.block-e.block}),a=et()(o,1),c=a[0],d=r.filter(function(e,n){return(!t.resourceNode||!e.resourceNode||t.resourceNode.toLowerCase()===e.resourceNode.toLowerCase())&&(!r.slice(0,n).some(function(t){return JSON.stringify(t)==JSON.stringify(e)})&&(!i||e.block>i))}),c&&(i=c.block),e.abrupt("return",d);case 12:return e.prev=12,e.t0=e.catch(0),e.abrupt("return",Promise.reject(e.t0));case 15:case"end":return e.stop()}},e,null,[[0,12]])}));return function(){return e.apply(this,arguments)}}(),a=function(){r&&clearInterval(r),r=setInterval(function(){o().then(function(e){return e.forEach(function(e){n(null,Le.parseEvent(e,u.abi))})}).catch(function(e){return n(e)})},3e3)},e.next=18,o();case 18:return a(),e.abrupt("return",{start:a(),stop:function(){r&&(clearInterval(r),r=!1)}});case 20:case"end":return e.stop()}},e,this)})),function(){return t.apply(this,arguments)})}]),e}(),bt=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(b()(this,e),!t||!t instanceof It)throw new Error("Expected instance of TronWeb");this.tronWeb=t,this.injectPromise=$e()(this),this.address=r,this.abi=n,this.eventListener=!1,this.bytecode=!1,this.deployed=!1,this.lastBlock=!1,this.methods={},this.methodInstances={},this.props=[],this.tronWeb.isAddress(r)?this.deployed=!0:this.address=!1,this.loadAbi(n)}var t,n,r,i;return y()(e,[{key:"_getEvents",value:(i=f()(l.a.mark(function e(){var t,n,r,i,s,o,a=this,u=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=u.length>0&&void 0!==u[0]?u[0]:{},e.next=3,this.tronWeb.event.getEventsByContractAddress(this.address,t);case 3:return n=e.sent,r=n.sort(function(e,t){return t.block-e.block}),i=et()(r,1),s=i[0],o=n.filter(function(e,r){return(!t.resourceNode||!e.resourceNode||t.resourceNode.toLowerCase()===e.resourceNode.toLowerCase())&&(!n.slice(0,r).some(function(t){return JSON.stringify(t)==JSON.stringify(e)})&&(!a.lastBlock||e.block>a.lastBlock))}),s&&(this.lastBlock=s.block),e.abrupt("return",o);case 8:case"end":return e.stop()}},e,this)})),function(){return i.apply(this,arguments)})},{key:"_startEventListener",value:(r=f()(l.a.mark(function e(){var t,n,r=this,i=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=i.length>0&&void 0!==i[0]?i[0]:{},n=i.length>1?i[1]:void 0,Le.isFunction(t)&&(n=t,t={}),this.eventListener&&clearInterval(this.eventListener),this.tronWeb.eventServer){e.next=6;break}throw new Error("Event server is not configured");case 6:if(this.address){e.next=8;break}throw new Error("Contract is not configured with an address");case 8:return this.eventCallback=n,e.next=11,this._getEvents(t);case 11:this.eventListener=setInterval(function(){r._getEvents(t).then(function(e){return e.forEach(function(e){r.eventCallback&&r.eventCallback(e)})}).catch(function(e){console.error("Failed to get event list",e)})},3e3);case 12:case"end":return e.stop()}},e,this)})),function(){return r.apply(this,arguments)})},{key:"_stopEventListener",value:function(){this.eventListener&&(clearInterval(this.eventListener),this.eventListener=!1,this.eventCallback=!1)}},{key:"hasProperty",value:function(e){return this.hasOwnProperty(e)||this.__proto__.hasOwnProperty(e)}},{key:"loadAbi",value:function(e){var t=this;this.abi=e,this.methods={},this.props.forEach(function(e){return delete t[e]}),e.forEach(function(e){if(e.type&&!/constructor/i.test(e.type)){var n=new gt(t,e),r=n.onMethod.bind(n),i=n.name,s=n.functionSelector,o=n.signature;t.methods[i]=r,t.methods[s]=r,t.methods[o]=r,t.methodInstances[i]=n,t.methodInstances[s]=n,t.methodInstances[o]=n,t.hasProperty(i)||(t[i]=r,t.props.push(i)),t.hasProperty(s)||(t[s]=r,t.props.push(s)),t.hasProperty(o)||(t[o]=r,t.props.push(o))}})}},{key:"decodeInput",value:function(e){var t=e.substring(0,8),n=e.substring(8);if(!this.methodInstances[t])throw new Error("Contract method "+t+" not found");return{name:this.methodInstances[t].name,params:this.methodInstances[t].decodeInput(n)}}},{key:"new",value:(n=f()(l.a.mark(function e(t){var n,r,i,s,o,a,u=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=u.length>1&&void 0!==u[1]?u[1]:this.tronWeb.defaultPrivateKey,r=u.length>2&&void 0!==u[2]&&u[2],Le.isFunction(n)&&(r=n,n=this.tronWeb.defaultPrivateKey),r){e.next=5;break}return e.abrupt("return",this.injectPromise(this.new,t,n));case 5:return e.prev=5,i=this.tronWeb.address.fromPrivateKey(n),e.next=9,this.tronWeb.transactionBuilder.createSmartContract(t,i);case 9:return s=e.sent,e.next=12,this.tronWeb.trx.sign(s,n);case 12:return o=e.sent,e.next=15,this.tronWeb.trx.sendRawTransaction(o);case 15:if(!(a=e.sent).code){e.next=18;break}return e.abrupt("return",r({error:a.code,message:this.tronWeb.toUtf8(a.message)}));case 18:return e.next=20,Le.sleep(3e3);case 20:return e.abrupt("return",this.at(o.contract_address,r));case 23:return e.prev=23,e.t0=e.catch(5),e.abrupt("return",r(e.t0));case 26:case"end":return e.stop()}},e,this,[[5,23]])})),function(e){return n.apply(this,arguments)})},{key:"at",value:(t=f()(l.a.mark(function e(t){var n,r,i=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=i.length>1&&void 0!==i[1]&&i[1]){e.next=3;break}return e.abrupt("return",this.injectPromise(this.at,t));case 3:return e.prev=3,e.next=6,this.tronWeb.trx.getContract(t);case 6:if((r=e.sent).contract_address){e.next=9;break}return e.abrupt("return",n("Unknown error: "+JSON.stringify(r,null,2)));case 9:return this.address=r.contract_address,this.bytecode=r.bytecode,this.deployed=!0,this.loadAbi(r.abi?r.abi.entrys:[]),e.abrupt("return",n(null,this));case 16:if(e.prev=16,e.t0=e.catch(3),!e.t0.toString().includes("does not exist")){e.next=20;break}return e.abrupt("return",n("Contract has not been deployed on the network"));case 20:return e.abrupt("return",n(e.t0));case 21:case"end":return e.stop()}},e,this,[[3,16]])})),function(e){return t.apply(this,arguments)})},{key:"events",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(Le.isFunction(e)&&(t=e,e={}),!Le.isFunction(t))throw new Error("Callback function expected");var n=this;return{start:function(){var r=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return r?(n._startEventListener(e,t).then(function(){r()}).catch(function(e){r(e)}),this):(n._startEventListener(e,t),this)},stop:function(){n._stopEventListener()}}}}]),e}(),mt=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(b()(this,e),!t||!t instanceof It)throw new Error("Expected instance of TronWeb");this.tronWeb=t,this.pluginNoOverride=["register"],this.disablePlugins=n.disablePlugins}return y()(e,[{key:"register",value:function(e,t){var n={requires:"0.0.0",components:{}},r={libs:[],plugged:[],skipped:[]};if(this.disablePlugins)return r.error="This instance of TronWeb has plugins disabled.",r;var i=new e(this.tronWeb);if(Le.isFunction(i.pluginInterface)&&(n=i.pluginInterface(t)),!Xe.a.satisfies(It.version,n.requires))throw new Error("The plugin is not compatible with this version of TronWeb");if(n.fullClass){var s=i.constructor.name,o=s.substring(0,1).toLowerCase()+s.substring(1);s!==o&&(It[s]=e,this.tronWeb[o]=i,r.libs.push(s))}else for(var a in n.components)if(this.tronWeb.hasOwnProperty(a)){var u=n.components[a],c=this.tronWeb[a].pluginNoOverride||[];for(var d in u)"constructor"===d||this.tronWeb[a][d]&&(c.includes(d)||/^_/.test(d))?r.skipped.push(d):(this.tronWeb[a][d]=u[d].bind(this.tronWeb[a]),r.plugged.push(d))}return r}}]),e}(),yt=n(21),kt=n.n(yt),xt=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(b()(this,e),!(t&&t instanceof It))throw new Error("Expected instance of TronWeb");this.tronWeb=t,this.injectPromise=$e()(this)}return y()(e,[{key:"setServer",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"healthcheck";if(!t)return this.tronWeb.eventServer=!1;if(Le.isString(t)&&(t=new ze.HttpProvider(t)),!this.tronWeb.isValidProvider(t))throw new Error("Invalid event server provided");this.tronWeb.eventServer=t,this.tronWeb.eventServer.isConnected=function(){return e.tronWeb.eventServer.request(n).then(function(){return!0}).catch(function(){return!1})}}},{key:"getEventsByContractAddress",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=Object.assign({sinceTimestamp:0,eventName:!1,blockNumber:!1,size:20,page:1},t),i=r.sinceTimestamp,s=r.since,o=r.fromTimestamp,a=r.eventName,u=r.blockNumber,c=r.size,d=r.page,l=r.onlyConfirmed,h=r.onlyUnconfirmed,f=r.previousLastEventFingerprint,v=r.previousFingerprint,g=r.fingerprint,b=r.rawResponse,m=r.sort,y=r.filters;if(!n)return this.injectPromise(this.getEventsByContractAddress,e,t);if(o=o||i||s,!this.tronWeb.eventServer)return n("No event server configured");var k=[];if(!this.tronWeb.isAddress(e))return n("Invalid contract address provided");if(a&&!e)return n("Usage of event name filtering requires a contract address");if(void 0!==o&&!Le.isInteger(o))return n("Invalid fromTimestamp provided");if(!Le.isInteger(c))return n("Invalid size provided");if(c>200&&(console.warn("Defaulting to maximum accepted size: 200"),c=200),!Le.isInteger(d))return n("Invalid page provided");if(u&&!a)return n("Usage of block number filtering requires an event name");e&&k.push(this.tronWeb.address.fromHex(e)),a&&k.push(a),u&&k.push(u);var x={size:c,page:d};return"object"===p()(y)&&Object.keys(y).length>0&&(x.filters=JSON.stringify(y)),o&&(x.fromTimestamp=x.since=o),l&&(x.onlyConfirmed=l),h&&!l&&(x.onlyUnconfirmed=h),m&&(x.sort=m),(g=g||v||f)&&(x.fingerprint=g),this.tronWeb.eventServer.request("event/contract/".concat(k.join("/"),"?").concat(kt.a.stringify(x))).then(function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return e?Le.isArray(e)?n(null,!0===b?e:e.map(function(e){return Le.mapEvent(e)})):n(e):n("Unknown error occurred")}).catch(function(e){return n(e.response&&e.response.data||e)})}},{key:"getEventsByTransactionID",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return Le.isFunction(t)&&(n=t,t={}),n?this.tronWeb.eventServer?this.tronWeb.eventServer.request("event/transaction/".concat(e)).then(function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return e?Le.isArray(e)?n(null,!0===t.rawResponse?e:e.map(function(e){return Le.mapEvent(e)})):n(e):n("Unknown error occurred")}).catch(function(e){return n(e.response&&e.response.data||e)}):n("No event server configured"):this.injectPromise(this.getEventsByTransactionID,e,t)}}]),e}();n.d(t,"default",function(){return It});var wt="3.5.0",It=function(e){function t(){var e,n,r=arguments.length>0&&void 0!==arguments[0]&&arguments[0],i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],s=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return b()(this,t),e=x()(this,I()(t).call(this)),"object"===p()(r)&&(r.fullNode||r.fullHost)?(n=r.fullNode||r.fullHost,i=r.solidityNode||r.fullHost,s=r.eventServer||r.fullHost,o=r.privateKey):n=r,Le.isString(n)&&(n=new ze.HttpProvider(n)),Le.isString(i)&&(i=new ze.HttpProvider(i)),Le.isString(s)&&(s=new ze.HttpProvider(s)),e.event=new xt(A()(e)),e.transactionBuilder=new st(A()(e)),e.trx=new dt(A()(e)),e.plugin=new mt(A()(e),r),e.utils=Le,e.setFullNode(n),e.setSolidityNode(i),e.setEventServer(s),e.providers=ze,e.BigNumber=Re.a,e.defaultBlock=!1,e.defaultPrivateKey=!1,e.defaultAddress={hex:!1,base58:!1},["sha3","toHex","toUtf8","fromUtf8","toAscii","fromAscii","toDecimal","fromDecimal","toSun","fromSun","toBigNumber","isAddress","createAccount","address","version"].forEach(function(n){e[n]=t[n]}),o&&e.setPrivateKey(o),e.fullnodeVersion=wt,e.injectPromise=$e()(A()(e)),e}var n,r,i;return _()(t,e),y()(t,[{key:"getFullnodeVersion",value:(i=f()(l.a.mark(function e(){var t;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,this.trx.getNodeInfo();case 3:t=e.sent,this.fullnodeVersion=t.configNodeInfo.codeVersion,2===this.fullnodeVersion.split(".").length&&(this.fullnodeVersion+=".0"),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(0),this.fullnodeVersion=wt;case 11:case"end":return e.stop()}},e,this,[[0,8]])})),function(){return i.apply(this,arguments)})},{key:"setDefaultBlock",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if([!1,"latest","earliest",0].includes(e))return this.defaultBlock=e;if(!Le.isInteger(e)||!e)throw new Error("Invalid block ID provided");this.defaultBlock=Math.abs(e)}},{key:"setPrivateKey",value:function(e){try{this.setAddress(this.address.fromPrivateKey(e))}catch(e){throw new Error("Invalid private key provided")}this.defaultPrivateKey=e,this.emit("privateKeyChanged",e)}},{key:"setAddress",value:function(e){if(!this.isAddress(e))throw new Error("Invalid address provided");var t=this.address.toHex(e),n=this.address.fromHex(e);this.defaultPrivateKey&&this.address.fromPrivateKey(this.defaultPrivateKey)!==n&&(this.defaultPrivateKey=!1),this.defaultAddress={hex:t,base58:n},this.emit("addressChanged",{hex:t,base58:n})}},{key:"fullnodeSatisfies",value:function(e){return Xe.a.satisfies(this.fullnodeVersion,e)}},{key:"isValidProvider",value:function(e){return Object.values(ze).some(function(t){return e instanceof t})}},{key:"setFullNode",value:function(e){if(Le.isString(e)&&(e=new ze.HttpProvider(e)),!this.isValidProvider(e))throw new Error("Invalid full node provided");this.fullNode=e,this.fullNode.setStatusPage("wallet/getnowblock"),this.getFullnodeVersion()}},{key:"setSolidityNode",value:function(e){if(Le.isString(e)&&(e=new ze.HttpProvider(e)),!this.isValidProvider(e))throw new Error("Invalid solidity node provided");this.solidityNode=e,this.solidityNode.setStatusPage("walletsolidity/getnowblock")}},{key:"setEventServer",value:function(){var e;(e=this.event).setServer.apply(e,arguments)}},{key:"currentProviders",value:function(){return{fullNode:this.fullNode,solidityNode:this.solidityNode,eventServer:this.eventServer}}},{key:"currentProvider",value:function(){return this.currentProviders()}},{key:"getEventResult",value:function(){for(var e,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return"object"!==p()(n[1])&&(n[1]={sinceTimestamp:n[1]||0,eventName:n[2]||!1,blockNumber:n[3]||!1,size:n[4]||20,page:n[5]||1},n.splice(2,4),Le.isFunction(n[2])||(Le.isFunction(n[1].page)?(n[2]=n[1].page,n[1].page=1):Le.isFunction(n[1].size)&&(n[2]=n[1].size,n[1].size=20,n[1].page=1))),(e=this.event).getEventsByContractAddress.apply(e,n)}},{key:"getEventByTransactionID",value:function(){var e;return(e=this.event).getEventsByTransactionID.apply(e,arguments)}},{key:"contract",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return new bt(this,e,t)}},{key:"isConnected",value:(r=f()(l.a.mark(function e(){var t,n=arguments;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=n.length>0&&void 0!==n[0]&&n[0]){e.next=3;break}return e.abrupt("return",this.injectPromise(this.isConnected));case 3:return e.t0=t,e.next=6,this.fullNode.isConnected();case 6:return e.t1=e.sent,e.next=9,this.solidityNode.isConnected();case 9:if(e.t2=e.sent,e.t3=this.eventServer,!e.t3){e.next=15;break}return e.next=14,this.eventServer.isConnected();case 14:e.t3=e.sent;case 15:return e.t4=e.t3,e.t5={fullNode:e.t1,solidityNode:e.t2,eventServer:e.t4},e.abrupt("return",(0,e.t0)(null,e.t5));case 18:case"end":return e.stop()}},e,this)})),function(){return r.apply(this,arguments)})}],[{key:"sha3",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return(t?"0x":"")+ue(Buffer.from(e,"utf-8")).toString().substring(2)}},{key:"toHex",value:function(e){if(Le.isBoolean(e))return t.fromDecimal(+e);if(Le.isBigNumber(e))return t.fromDecimal(e);if("object"===p()(e))return t.fromUtf8(JSON.stringify(e));if(Le.isString(e)){if(/^(-|)0x/.test(e))return e;if(!isFinite(e))return t.fromUtf8(e)}var n=t.fromDecimal(e);if("0xNaN"===n)throw new Error("The passed value is not convertible to a hex string");return n}},{key:"toUtf8",value:function(e){if(Le.isHex(e))return e=e.replace(/^0x/,""),Buffer.from(e,"hex").toString("utf8");throw new Error("The passed value is not a valid hex string")}},{key:"fromUtf8",value:function(e){if(!Le.isString(e))throw new Error("The passed value is not a valid utf-8 string");return"0x"+Buffer.from(e,"utf8").toString("hex")}},{key:"toAscii",value:function(e){if(Le.isHex(e)){var t="",n=0,r=e.length;for("0x"===e.substring(0,2)&&(n=2);n<r;n+=2){var i=parseInt(e.substr(n,2),16);t+=String.fromCharCode(i)}return t}throw new Error("The passed value is not a valid hex string")}},{key:"fromAscii",value:function(e,t){if(!Le.isString(e))throw new Error("The passed value is not a valid utf-8 string");return"0x"+Buffer.from(e,"ascii").toString("hex").padEnd(t,"0")}},{key:"toDecimal",value:function(e){return t.toBigNumber(e).toNumber()}},{key:"fromDecimal",value:function(e){var n=t.toBigNumber(e),r=n.toString(16);return n.isLessThan(0)?"-0x"+r.substr(1):"0x"+r}},{key:"fromSun",value:function(e){var n=t.toBigNumber(e).div(1e6);return Le.isBigNumber(e)?n:n.toString(10)}},{key:"toSun",value:function(e){var n=t.toBigNumber(e).times(1e6);return Le.isBigNumber(e)?n:n.toString(10)}},{key:"toBigNumber",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return Le.isBigNumber(e)?e:Le.isString(e)&&/^(-|)0x/.test(e)?new Re.a(e.replace("0x",""),16):new Re.a(e.toString(10),10)}},{key:"isAddress",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!Le.isString(e))return!1;if(42===e.length)try{return t.isAddress(Le.crypto.getBase58CheckAddress(Le.code.hexStr2byteArray(e)))}catch(e){return!1}try{return Le.crypto.isAddressValid(e)}catch(e){return!1}}},{key:"createAccount",value:(n=f()(l.a.mark(function e(){var t;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=Le.accounts.generateAccount(),e.abrupt("return",t);case 2:case"end":return e.stop()}},e)})),function(){return n.apply(this,arguments)})},{key:"address",get:function(){return{fromHex:function(e){return Le.isHex(e)?Le.crypto.getBase58CheckAddress(Le.code.hexStr2byteArray(e.replace(/^0x/,U))):e},toHex:function(e){return Le.isHex(e)?e.toLowerCase().replace(/^0x/,U):Le.code.byteArray2hexStr(Le.crypto.decodeBase58Address(e)).toLowerCase()},fromPrivateKey:function(e){try{return Le.crypto.pkToAddress(e)}catch(e){return!1}}}}}]),t}(Je.a);S()(It,"providers",ze),S()(It,"BigNumber",Re.a),S()(It,"TransactionBuilder",st),S()(It,"Trx",dt),S()(It,"Contract",bt),S()(It,"Plugin",mt),S()(It,"Event",xt),S()(It,"version",Ge.a),S()(It,"utils",Le)}]).default;
//# sourceMappingURL=TronWeb.node.js.map

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// This gets overriddenby gulp during bip39-XX
var exportWordlist = false;
var hash_1 = __webpack_require__(28);
var properties_1 = __webpack_require__(7);
function check(wordlist) {
    var words = [];
    for (var i = 0; i < 2048; i++) {
        var word = wordlist.getWord(i);
        if (i !== wordlist.getWordIndex(word)) {
            return '0x';
        }
        words.push(word);
    }
    return hash_1.id(words.join('\n') + '\n');
}
exports.check = check;
var Wordlist = /** @class */ (function () {
    function Wordlist(locale) {
        properties_1.defineReadOnly(this, 'locale', locale);
    }
    // Subclasses may override this
    Wordlist.prototype.split = function (mnemonic) {
        return mnemonic.toLowerCase().split(/ +/g);
    };
    // Subclasses may override this
    Wordlist.prototype.join = function (words) {
        return words.join(' ');
    };
    return Wordlist;
}());
exports.Wordlist = Wordlist;
function register(lang, name) {
    if (!name) {
        name = lang.locale;
    }
    if (exportWordlist) {
        var g = global;
        if (!(g.wordlists)) {
            properties_1.defineReadOnly(g, 'wordlists', {});
        }
        if (!g.wordlists[name]) {
            properties_1.defineReadOnly(g.wordlists, name, lang);
        }
        if (g.ethers && g.ethers.wordlists) {
            if (!g.ethers.wordlists[name]) {
                properties_1.defineReadOnly(g.ethers.wordlists, name, lang);
            }
        }
    }
}
exports.register = register;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

try {
  var util = __webpack_require__(76);
  /* istanbul ignore next */
  if (typeof util.inherits !== 'function') throw '';
  module.exports = util.inherits;
} catch (e) {
  /* istanbul ignore next */
  module.exports = __webpack_require__(117);
}


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(67);

var assertThisInitialized = __webpack_require__(68);

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

module.exports = _possibleConstructorReturn;

/***/ }),
/* 24 */
/***/ (function(module, exports) {

function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

var setPrototypeOf = __webpack_require__(108);

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

module.exports = _inherits;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = merge;

function merge() {
  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var defaults = arguments.length > 1 ? arguments[1] : undefined;

  for (var key in defaults) {
    if (typeof obj[key] === 'undefined') {
      obj[key] = defaults[key];
    }
  }

  return obj;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_1 = __webpack_require__(15);
var AddressZero = '0x0000000000000000000000000000000000000000';
exports.AddressZero = AddressZero;
var HashZero = '0x0000000000000000000000000000000000000000000000000000000000000000';
exports.HashZero = HashZero;
// NFKD (decomposed)
//const EtherSymbol = '\uD835\uDF63';
// NFKC (composed)
var EtherSymbol = '\u039e';
exports.EtherSymbol = EtherSymbol;
var NegativeOne = bignumber_1.bigNumberify(-1);
exports.NegativeOne = NegativeOne;
var Zero = bignumber_1.bigNumberify(0);
exports.Zero = Zero;
var One = bignumber_1.bigNumberify(1);
exports.One = One;
var Two = bignumber_1.bigNumberify(2);
exports.Two = Two;
var WeiPerEther = bignumber_1.bigNumberify('1000000000000000000');
exports.WeiPerEther = WeiPerEther;
var MaxUint256 = bignumber_1.bigNumberify('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');
exports.MaxUint256 = MaxUint256;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var errors = __importStar(__webpack_require__(4));
var bytes_1 = __webpack_require__(5);
var utf8_1 = __webpack_require__(9);
var keccak256_1 = __webpack_require__(19);
///////////////////////////////
var Zeros = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
var Partition = new RegExp("^((.*)\\.)?([^.]+)$");
var UseSTD3ASCIIRules = new RegExp("^[a-z0-9.-]*$");
function namehash(name) {
    if (typeof (name) !== 'string') {
        errors.throwError('invalid address - ' + String(name), errors.INVALID_ARGUMENT, {
            argument: 'name',
            value: name
        });
    }
    name = name.toLowerCase();
    // Supporting the full UTF-8 space requires additional (and large)
    // libraries, so for now we simply do not support them.
    // It should be fairly easy in the future to support systems with
    // String.normalize, but that is future work.
    if (!name.match(UseSTD3ASCIIRules)) {
        errors.throwError('contains invalid UseSTD3ASCIIRules characters', errors.INVALID_ARGUMENT, {
            argument: 'name',
            value: name
        });
    }
    var result = Zeros;
    while (name.length) {
        var partition = name.match(Partition);
        var label = utf8_1.toUtf8Bytes(partition[3]);
        result = keccak256_1.keccak256(bytes_1.concat([result, keccak256_1.keccak256(label)]));
        name = partition[2] || '';
    }
    return bytes_1.hexlify(result);
}
exports.namehash = namehash;
function id(text) {
    return keccak256_1.keccak256(utf8_1.toUtf8Bytes(text));
}
exports.id = id;
function hashMessage(message) {
    return keccak256_1.keccak256(bytes_1.concat([
        utf8_1.toUtf8Bytes('\x19Ethereum Signed Message:\n'),
        utf8_1.toUtf8Bytes(String(message.length)),
        ((typeof (message) === 'string') ? utf8_1.toUtf8Bytes(message) : message)
    ]));
}
exports.hashMessage = hashMessage;


/***/ }),
/* 29 */
/***/ (function(module, exports) {

module.exports = require("crypto");

/***/ }),
/* 30 */
/***/ (function(module, exports) {

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;

/***/ }),
/* 31 */
/***/ (function(module) {

module.exports = JSON.parse("[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_integrationProxy\",\"type\":\"address\"}],\"name\":\"setIntegrationProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initiationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setSelfDestructBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"terminateSelfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRates\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeRates\",\"type\":\"address\"}],\"name\":\"setExchangeRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupplyToPurgeInUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_synthetixProxy\",\"type\":\"address\"}],\"name\":\"setSynthetixProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"integrationProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenState\",\"type\":\"address\"}],\"name\":\"setTokenState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SELFDESTRUCT_DELAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"purge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selfDestructInitiated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"setMessageSender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initiateSelfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"synthetixProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selfDestructBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePoolProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"messageSender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feePoolProxy\",\"type\":\"address\"}],\"name\":\"setFeePoolProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currencyKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenState\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"},{\"name\":\"_tokenState\",\"type\":\"address\"},{\"name\":\"_synthetixProxy\",\"type\":\"address\"},{\"name\":\"_feePool\",\"type\":\"address\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_currencyKey\",\"type\":\"bytes32\"},{\"name\":\"_exchangeRates\",\"type\":\"address\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Purged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newSynthetix\",\"type\":\"address\"}],\"name\":\"SynthetixUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newFeePool\",\"type\":\"address\"}],\"name\":\"FeePoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Issued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newTokenState\",\"type\":\"address\"}],\"name\":\"TokenStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"ProxyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SelfDestructTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"SelfDestructed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"selfDestructDelay\",\"type\":\"uint256\"}],\"name\":\"SelfDestructInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"SelfDestructBeneficiaryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]");

/***/ }),
/* 32 */
/***/ (function(module) {

module.exports = JSON.parse("[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_integrationProxy\",\"type\":\"address\"}],\"name\":\"setIntegrationProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initiationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setSelfDestructBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"terminateSelfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRates\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeRates\",\"type\":\"address\"}],\"name\":\"setExchangeRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupplyToPurgeInUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_synthetixProxy\",\"type\":\"address\"}],\"name\":\"setSynthetixProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"integrationProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenState\",\"type\":\"address\"}],\"name\":\"setTokenState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SELFDESTRUCT_DELAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"purge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selfDestructInitiated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"setMessageSender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initiateSelfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"synthetixProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selfDestructBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePoolProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"messageSender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feePoolProxy\",\"type\":\"address\"}],\"name\":\"setFeePoolProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currencyKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenState\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"},{\"name\":\"_tokenState\",\"type\":\"address\"},{\"name\":\"_synthetixProxy\",\"type\":\"address\"},{\"name\":\"_feePool\",\"type\":\"address\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_currencyKey\",\"type\":\"bytes32\"},{\"name\":\"_exchangeRates\",\"type\":\"address\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Purged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newSynthetix\",\"type\":\"address\"}],\"name\":\"SynthetixUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newFeePool\",\"type\":\"address\"}],\"name\":\"FeePoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Issued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newTokenState\",\"type\":\"address\"}],\"name\":\"TokenStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"ProxyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SelfDestructTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"SelfDestructed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"selfDestructDelay\",\"type\":\"uint256\"}],\"name\":\"SelfDestructInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"SelfDestructBeneficiaryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]");

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var properties_1 = __webpack_require__(7);
;
;
///////////////////////////////
// Exported Abstracts
var Provider = /** @class */ (function () {
    function Provider() {
        properties_1.setType(this, 'Provider');
    }
    Provider.isProvider = function (value) {
        return properties_1.isType(value, 'Provider');
    };
    return Provider;
}());
exports.Provider = Provider;
//defineReadOnly(Signer, 'inherits', inheritable(Abstract));


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(17);
var assert = __webpack_require__(13);

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(18);
var assert = __webpack_require__(13);

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//See: https://github.com/ethereum/wiki/wiki/RLP
Object.defineProperty(exports, "__esModule", { value: true });
var bytes_1 = __webpack_require__(5);
function arrayifyInteger(value) {
    var result = [];
    while (value) {
        result.unshift(value & 0xff);
        value >>= 8;
    }
    return result;
}
function unarrayifyInteger(data, offset, length) {
    var result = 0;
    for (var i = 0; i < length; i++) {
        result = (result * 256) + data[offset + i];
    }
    return result;
}
function _encode(object) {
    if (Array.isArray(object)) {
        var payload = [];
        object.forEach(function (child) {
            payload = payload.concat(_encode(child));
        });
        if (payload.length <= 55) {
            payload.unshift(0xc0 + payload.length);
            return payload;
        }
        var length = arrayifyInteger(payload.length);
        length.unshift(0xf7 + length.length);
        return length.concat(payload);
    }
    var data = Array.prototype.slice.call(bytes_1.arrayify(object));
    if (data.length === 1 && data[0] <= 0x7f) {
        return data;
    }
    else if (data.length <= 55) {
        data.unshift(0x80 + data.length);
        return data;
    }
    var length = arrayifyInteger(data.length);
    length.unshift(0xb7 + length.length);
    return length.concat(data);
}
function encode(object) {
    return bytes_1.hexlify(_encode(object));
}
exports.encode = encode;
function _decodeChildren(data, offset, childOffset, length) {
    var result = [];
    while (childOffset < offset + 1 + length) {
        var decoded = _decode(data, childOffset);
        result.push(decoded.result);
        childOffset += decoded.consumed;
        if (childOffset > offset + 1 + length) {
            throw new Error('invalid rlp');
        }
    }
    return { consumed: (1 + length), result: result };
}
// returns { consumed: number, result: Object }
function _decode(data, offset) {
    if (data.length === 0) {
        throw new Error('invalid rlp data');
    }
    // Array with extra length prefix
    if (data[offset] >= 0xf8) {
        var lengthLength = data[offset] - 0xf7;
        if (offset + 1 + lengthLength > data.length) {
            throw new Error('too short');
        }
        var length = unarrayifyInteger(data, offset + 1, lengthLength);
        if (offset + 1 + lengthLength + length > data.length) {
            throw new Error('to short');
        }
        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
    }
    else if (data[offset] >= 0xc0) {
        var length = data[offset] - 0xc0;
        if (offset + 1 + length > data.length) {
            throw new Error('invalid rlp data');
        }
        return _decodeChildren(data, offset, offset + 1, length);
    }
    else if (data[offset] >= 0xb8) {
        var lengthLength = data[offset] - 0xb7;
        if (offset + 1 + lengthLength > data.length) {
            throw new Error('invalid rlp data');
        }
        var length = unarrayifyInteger(data, offset + 1, lengthLength);
        if (offset + 1 + lengthLength + length > data.length) {
            throw new Error('invalid rlp data');
        }
        var result = bytes_1.hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
        return { consumed: (1 + lengthLength + length), result: result };
    }
    else if (data[offset] >= 0x80) {
        var length = data[offset] - 0x80;
        if (offset + 1 + length > data.length) {
            throw new Error('invlaid rlp data');
        }
        var result = bytes_1.hexlify(data.slice(offset + 1, offset + 1 + length));
        return { consumed: (1 + length), result: result };
    }
    return { consumed: 1, result: bytes_1.hexlify(data[offset]) };
}
function decode(data) {
    var bytes = bytes_1.arrayify(data);
    var decoded = _decode(bytes, 0);
    if (decoded.consumed !== bytes.length) {
        throw new Error('invalid rlp data');
    }
    return decoded.result;
}
exports.decode = decode;


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var properties_1 = __webpack_require__(7);
var Signer = /** @class */ (function () {
    function Signer() {
        properties_1.setType(this, 'Signer');
    }
    Signer.isSigner = function (value) {
        return properties_1.isType(value, 'Signer');
    };
    return Signer;
}());
exports.Signer = Signer;
//defineReadOnly(Signer, 'inherits', inheritable(Signer));


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// See: https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki
// See: https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki
var errors = __importStar(__webpack_require__(4));
// The English language word list.
// For additional word lists, please see /src.tc/wordlists/
var lang_en_1 = __webpack_require__(73);
// Automatically register English?
//import { register } from '../wordlists/wordlist';
//register(langEn);
var basex_1 = __webpack_require__(113);
var bytes_1 = __webpack_require__(5);
var bignumber_1 = __webpack_require__(15);
var utf8_1 = __webpack_require__(9);
var pbkdf2_1 = __webpack_require__(74);
var hmac_1 = __webpack_require__(75);
var properties_1 = __webpack_require__(7);
var secp256k1_1 = __webpack_require__(39);
var sha2_1 = __webpack_require__(53);
var N = bignumber_1.bigNumberify("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
// "Bitcoin seed"
var MasterSecret = utf8_1.toUtf8Bytes('Bitcoin seed');
var HardenedBit = 0x80000000;
// Returns a byte with the MSB bits set
function getUpperMask(bits) {
    return ((1 << bits) - 1) << (8 - bits);
}
// Returns a byte with the LSB bits set
function getLowerMask(bits) {
    return (1 << bits) - 1;
}
function bytes32(value) {
    return bytes_1.hexZeroPad(bytes_1.hexlify(value), 32);
}
function base58check(data) {
    var checksum = bytes_1.hexDataSlice(sha2_1.sha256(sha2_1.sha256(data)), 0, 4);
    return basex_1.Base58.encode(bytes_1.concat([data, checksum]));
}
var _constructorGuard = {};
exports.defaultPath = "m/44'/60'/0'/0/0";
var HDNode = /** @class */ (function () {
    /**
     *  This constructor should not be called directly.
     *
     *  Please use:
     *   - fromMnemonic
     *   - fromSeed
     */
    function HDNode(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonic, path) {
        errors.checkNew(this, HDNode);
        if (constructorGuard !== _constructorGuard) {
            throw new Error('HDNode constructor cannot be called directly');
        }
        if (privateKey) {
            var keyPair = new secp256k1_1.KeyPair(privateKey);
            properties_1.defineReadOnly(this, 'privateKey', keyPair.privateKey);
            properties_1.defineReadOnly(this, 'publicKey', keyPair.compressedPublicKey);
        }
        else {
            properties_1.defineReadOnly(this, 'privateKey', null);
            properties_1.defineReadOnly(this, 'publicKey', bytes_1.hexlify(publicKey));
        }
        properties_1.defineReadOnly(this, 'parentFingerprint', parentFingerprint);
        properties_1.defineReadOnly(this, 'fingerprint', bytes_1.hexDataSlice(sha2_1.ripemd160(sha2_1.sha256(this.publicKey)), 0, 4));
        properties_1.defineReadOnly(this, 'address', secp256k1_1.computeAddress(this.publicKey));
        properties_1.defineReadOnly(this, 'chainCode', chainCode);
        properties_1.defineReadOnly(this, 'index', index);
        properties_1.defineReadOnly(this, 'depth', depth);
        properties_1.defineReadOnly(this, 'mnemonic', mnemonic);
        properties_1.defineReadOnly(this, 'path', path);
        properties_1.setType(this, 'HDNode');
    }
    Object.defineProperty(HDNode.prototype, "extendedKey", {
        get: function () {
            // We only support the mainnet values for now, but if anyone needs
            // testnet values, let me know. I believe current senitment is that
            // we should always use mainnet, and use BIP-44 to derive the network
            //   - Mainnet: public=0x0488B21E, private=0x0488ADE4
            //   - Testnet: public=0x043587CF, private=0x04358394
            if (this.depth >= 256) {
                throw new Error("Depth too large!");
            }
            return base58check(bytes_1.concat([
                ((this.privateKey != null) ? "0x0488ADE4" : "0x0488B21E"),
                bytes_1.hexlify(this.depth),
                this.parentFingerprint,
                bytes_1.hexZeroPad(bytes_1.hexlify(this.index), 4),
                this.chainCode,
                ((this.privateKey != null) ? bytes_1.concat(["0x00", this.privateKey]) : this.publicKey),
            ]));
        },
        enumerable: true,
        configurable: true
    });
    HDNode.prototype.neuter = function () {
        return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, null, this.path);
    };
    HDNode.prototype._derive = function (index) {
        if (index > 0xffffffff) {
            throw new Error("invalid index - " + String(index));
        }
        // Base path
        var path = this.path;
        if (path) {
            path += '/' + (index & ~HardenedBit);
        }
        var data = new Uint8Array(37);
        if (index & HardenedBit) {
            if (!this.privateKey) {
                throw new Error('cannot derive child of neutered node');
            }
            // Data = 0x00 || ser_256(k_par)
            data.set(bytes_1.arrayify(this.privateKey), 1);
            // Hardened path
            if (path) {
                path += "'";
            }
        }
        else {
            // Data = ser_p(point(k_par))
            data.set(bytes_1.arrayify(this.publicKey));
        }
        // Data += ser_32(i)
        for (var i = 24; i >= 0; i -= 8) {
            data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);
        }
        var I = hmac_1.computeHmac(hmac_1.SupportedAlgorithms.sha512, this.chainCode, data);
        var IL = I.slice(0, 32);
        var IR = I.slice(32);
        // The private key
        var ki = null;
        // The public key
        var Ki = null;
        if (this.privateKey) {
            ki = bytes32(bignumber_1.bigNumberify(IL).add(this.privateKey).mod(N));
        }
        else {
            var ek = new secp256k1_1.KeyPair(bytes_1.hexlify(IL));
            Ki = ek._addPoint(this.publicKey);
        }
        return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, this.mnemonic, path);
    };
    HDNode.prototype.derivePath = function (path) {
        var components = path.split('/');
        if (components.length === 0 || (components[0] === 'm' && this.depth !== 0)) {
            throw new Error('invalid path - ' + path);
        }
        if (components[0] === 'm') {
            components.shift();
        }
        var result = this;
        for (var i = 0; i < components.length; i++) {
            var component = components[i];
            if (component.match(/^[0-9]+'$/)) {
                var index = parseInt(component.substring(0, component.length - 1));
                if (index >= HardenedBit) {
                    throw new Error('invalid path index - ' + component);
                }
                result = result._derive(HardenedBit + index);
            }
            else if (component.match(/^[0-9]+$/)) {
                var index = parseInt(component);
                if (index >= HardenedBit) {
                    throw new Error('invalid path index - ' + component);
                }
                result = result._derive(index);
            }
            else {
                throw new Error('invlaid path component - ' + component);
            }
        }
        return result;
    };
    HDNode.isHDNode = function (value) {
        return properties_1.isType(value, 'HDNode');
    };
    return HDNode;
}());
exports.HDNode = HDNode;
function fromExtendedKey(extendedKey) {
    var bytes = basex_1.Base58.decode(extendedKey);
    if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {
        errors.throwError("invalid extended key", errors.INVALID_ARGUMENT, {
            argument: "extendedKey",
            value: "[REDACTED]"
        });
    }
    var depth = bytes[4];
    var parentFingerprint = bytes_1.hexlify(bytes.slice(5, 9));
    var index = parseInt(bytes_1.hexlify(bytes.slice(9, 13)).substring(2), 16);
    var chainCode = bytes_1.hexlify(bytes.slice(13, 45));
    var key = bytes.slice(45, 78);
    switch (bytes_1.hexlify(bytes.slice(0, 4))) {
        // Public Key
        case "0x0488b21e":
        case "0x043587cf":
            return new HDNode(_constructorGuard, null, bytes_1.hexlify(key), parentFingerprint, chainCode, index, depth, null, null);
        // Private Key
        case "0x0488ade4":
        case "0x04358394 ":
            if (key[0] !== 0) {
                break;
            }
            return new HDNode(_constructorGuard, bytes_1.hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null, null);
    }
    return errors.throwError("invalid extended key", errors.INVALID_ARGUMENT, {
        argument: "extendedKey",
        value: "[REDACTED]"
    });
}
exports.fromExtendedKey = fromExtendedKey;
function _fromSeed(seed, mnemonic) {
    var seedArray = bytes_1.arrayify(seed);
    if (seedArray.length < 16 || seedArray.length > 64) {
        throw new Error('invalid seed');
    }
    var I = bytes_1.arrayify(hmac_1.computeHmac(hmac_1.SupportedAlgorithms.sha512, MasterSecret, seedArray));
    return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, "0x00000000", bytes32(I.slice(32)), 0, 0, mnemonic, 'm');
}
function fromMnemonic(mnemonic, wordlist, password) {
    // Check that the checksum s valid (will throw an error)
    mnemonicToEntropy(mnemonic, wordlist);
    return _fromSeed(mnemonicToSeed(mnemonic, password), mnemonic);
}
exports.fromMnemonic = fromMnemonic;
function fromSeed(seed) {
    return _fromSeed(seed, null);
}
exports.fromSeed = fromSeed;
function mnemonicToSeed(mnemonic, password) {
    if (!password) {
        password = '';
    }
    var salt = utf8_1.toUtf8Bytes('mnemonic' + password, utf8_1.UnicodeNormalizationForm.NFKD);
    return bytes_1.hexlify(pbkdf2_1.pbkdf2(utf8_1.toUtf8Bytes(mnemonic, utf8_1.UnicodeNormalizationForm.NFKD), salt, 2048, 64, 'sha512'));
}
exports.mnemonicToSeed = mnemonicToSeed;
function mnemonicToEntropy(mnemonic, wordlist) {
    if (!wordlist) {
        wordlist = lang_en_1.langEn;
    }
    errors.checkNormalize();
    var words = wordlist.split(mnemonic);
    if ((words.length % 3) !== 0) {
        throw new Error('invalid mnemonic');
    }
    var entropy = bytes_1.arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));
    var offset = 0;
    for (var i = 0; i < words.length; i++) {
        var index = wordlist.getWordIndex(words[i].normalize('NFKD'));
        if (index === -1) {
            throw new Error('invalid mnemonic');
        }
        for (var bit = 0; bit < 11; bit++) {
            if (index & (1 << (10 - bit))) {
                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));
            }
            offset++;
        }
    }
    var entropyBits = 32 * words.length / 3;
    var checksumBits = words.length / 3;
    var checksumMask = getUpperMask(checksumBits);
    var checksum = bytes_1.arrayify(sha2_1.sha256(entropy.slice(0, entropyBits / 8)))[0];
    checksum &= checksumMask;
    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
        throw new Error('invalid checksum');
    }
    return bytes_1.hexlify(entropy.slice(0, entropyBits / 8));
}
exports.mnemonicToEntropy = mnemonicToEntropy;
function entropyToMnemonic(entropy, wordlist) {
    entropy = bytes_1.arrayify(entropy);
    if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {
        throw new Error('invalid entropy');
    }
    var indices = [0];
    var remainingBits = 11;
    for (var i = 0; i < entropy.length; i++) {
        // Consume the whole byte (with still more to go)
        if (remainingBits > 8) {
            indices[indices.length - 1] <<= 8;
            indices[indices.length - 1] |= entropy[i];
            remainingBits -= 8;
            // This byte will complete an 11-bit index
        }
        else {
            indices[indices.length - 1] <<= remainingBits;
            indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);
            // Start the next word
            indices.push(entropy[i] & getLowerMask(8 - remainingBits));
            remainingBits += 3;
        }
    }
    // Compute the checksum bits
    var checksum = bytes_1.arrayify(sha2_1.sha256(entropy))[0];
    var checksumBits = entropy.length / 4;
    checksum &= getUpperMask(checksumBits);
    // Shift the checksum into the word indices
    indices[indices.length - 1] <<= checksumBits;
    indices[indices.length - 1] |= (checksum >> (8 - checksumBits));
    if (!wordlist) {
        wordlist = lang_en_1.langEn;
    }
    return wordlist.join(indices.map(function (index) { return wordlist.getWord(index); }));
}
exports.entropyToMnemonic = entropyToMnemonic;
function isValidMnemonic(mnemonic, wordlist) {
    try {
        mnemonicToEntropy(mnemonic, wordlist);
        return true;
    }
    catch (error) { }
    return false;
}
exports.isValidMnemonic = isValidMnemonic;


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var elliptic_1 = __webpack_require__(12);
var address_1 = __webpack_require__(16);
var bytes_1 = __webpack_require__(5);
var hash_1 = __webpack_require__(28);
var keccak256_1 = __webpack_require__(19);
var properties_1 = __webpack_require__(7);
var errors = __importStar(__webpack_require__(4));
///////////////////////////////
var _curve = null;
function getCurve() {
    if (!_curve) {
        _curve = new elliptic_1.ec('secp256k1');
    }
    return _curve;
}
var KeyPair = /** @class */ (function () {
    function KeyPair(privateKey) {
        var keyPair = getCurve().keyFromPrivate(bytes_1.arrayify(privateKey));
        properties_1.defineReadOnly(this, 'privateKey', bytes_1.hexlify(keyPair.priv.toArray('be', 32)));
        properties_1.defineReadOnly(this, 'publicKey', '0x' + keyPair.getPublic(false, 'hex'));
        properties_1.defineReadOnly(this, 'compressedPublicKey', '0x' + keyPair.getPublic(true, 'hex'));
        properties_1.defineReadOnly(this, 'publicKeyBytes', keyPair.getPublic().encode(null, true));
    }
    KeyPair.prototype.sign = function (digest) {
        var keyPair = getCurve().keyFromPrivate(bytes_1.arrayify(this.privateKey));
        var signature = keyPair.sign(bytes_1.arrayify(digest), { canonical: true });
        return {
            recoveryParam: signature.recoveryParam,
            r: bytes_1.hexZeroPad('0x' + signature.r.toString(16), 32),
            s: bytes_1.hexZeroPad('0x' + signature.s.toString(16), 32),
            v: 27 + signature.recoveryParam
        };
    };
    KeyPair.prototype.computeSharedSecret = function (otherKey) {
        var keyPair = getCurve().keyFromPrivate(bytes_1.arrayify(this.privateKey));
        var otherKeyPair = getCurve().keyFromPublic(bytes_1.arrayify(computePublicKey(otherKey)));
        return bytes_1.hexZeroPad('0x' + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
    };
    KeyPair.prototype._addPoint = function (other) {
        var p0 = getCurve().keyFromPublic(bytes_1.arrayify(this.publicKey));
        var p1 = getCurve().keyFromPublic(bytes_1.arrayify(other));
        return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
    };
    return KeyPair;
}());
exports.KeyPair = KeyPair;
function computePublicKey(key, compressed) {
    var bytes = bytes_1.arrayify(key);
    if (bytes.length === 32) {
        var keyPair = new KeyPair(bytes);
        if (compressed) {
            return keyPair.compressedPublicKey;
        }
        return keyPair.publicKey;
    }
    else if (bytes.length === 33) {
        if (compressed) {
            return bytes_1.hexlify(bytes);
        }
        return '0x' + getCurve().keyFromPublic(bytes).getPublic(false, 'hex');
    }
    else if (bytes.length === 65) {
        if (!compressed) {
            return bytes_1.hexlify(bytes);
        }
        return '0x' + getCurve().keyFromPublic(bytes).getPublic(true, 'hex');
    }
    errors.throwError('invalid public or private key', errors.INVALID_ARGUMENT, { arg: 'key', value: '[REDACTED]' });
    return null;
}
exports.computePublicKey = computePublicKey;
function computeAddress(key) {
    // Strip off the leading "0x04"
    var publicKey = '0x' + computePublicKey(key).slice(4);
    return address_1.getAddress('0x' + keccak256_1.keccak256(publicKey).substring(26));
}
exports.computeAddress = computeAddress;
function recoverPublicKey(digest, signature) {
    var sig = bytes_1.splitSignature(signature);
    var rs = { r: bytes_1.arrayify(sig.r), s: bytes_1.arrayify(sig.s) };
    return '0x' + getCurve().recoverPubKey(bytes_1.arrayify(digest), rs, sig.recoveryParam).encode('hex', false);
}
exports.recoverPublicKey = recoverPublicKey;
function recoverAddress(digest, signature) {
    return computeAddress(recoverPublicKey(bytes_1.arrayify(digest), signature));
}
exports.recoverAddress = recoverAddress;
function verifyMessage(message, signature) {
    return recoverAddress(hash_1.hashMessage(message), signature);
}
exports.verifyMessage = verifyMessage;


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

var hash = exports;

hash.utils = __webpack_require__(17);
hash.common = __webpack_require__(34);
hash.sha = __webpack_require__(118);
hash.ripemd = __webpack_require__(122);
hash.hmac = __webpack_require__(123);

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = exports;

curve.base = __webpack_require__(124);
curve.short = __webpack_require__(125);
curve.mont = __webpack_require__(126);
curve.edwards = __webpack_require__(127);


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = __webpack_require__(27);
var errors = __importStar(__webpack_require__(4));
var secp256k1_1 = __webpack_require__(39);
var address_1 = __webpack_require__(16);
var bignumber_1 = __webpack_require__(15);
var bytes_1 = __webpack_require__(5);
var keccak256_1 = __webpack_require__(19);
var properties_1 = __webpack_require__(7);
var RLP = __importStar(__webpack_require__(36));
var abstract_provider_1 = __webpack_require__(33);
///////////////////////////////
function handleAddress(value) {
    if (value === '0x') {
        return null;
    }
    return address_1.getAddress(value);
}
function handleNumber(value) {
    if (value === '0x') {
        return constants_1.Zero;
    }
    return bignumber_1.bigNumberify(value);
}
var transactionFields = [
    { name: 'nonce', maxLength: 32 },
    { name: 'gasPrice', maxLength: 32 },
    { name: 'gasLimit', maxLength: 32 },
    { name: 'to', length: 20 },
    { name: 'value', maxLength: 32 },
    { name: 'data' },
];
var allowedTransactionKeys = {
    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true
};
function serialize(transaction, signature) {
    properties_1.checkProperties(transaction, allowedTransactionKeys);
    var raw = [];
    transactionFields.forEach(function (fieldInfo) {
        var value = transaction[fieldInfo.name] || ([]);
        value = bytes_1.arrayify(bytes_1.hexlify(value));
        // Fixed-width field
        if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
            errors.throwError('invalid length for ' + fieldInfo.name, errors.INVALID_ARGUMENT, { arg: ('transaction' + fieldInfo.name), value: value });
        }
        // Variable-width (with a maximum)
        if (fieldInfo.maxLength) {
            value = bytes_1.stripZeros(value);
            if (value.length > fieldInfo.maxLength) {
                errors.throwError('invalid length for ' + fieldInfo.name, errors.INVALID_ARGUMENT, { arg: ('transaction' + fieldInfo.name), value: value });
            }
        }
        raw.push(bytes_1.hexlify(value));
    });
    if (transaction.chainId != null && transaction.chainId !== 0) {
        raw.push(bytes_1.hexlify(transaction.chainId));
        raw.push('0x');
        raw.push('0x');
    }
    var unsignedTransaction = RLP.encode(raw);
    // Requesting an unsigned transation
    if (!signature) {
        return unsignedTransaction;
    }
    // The splitSignature will ensure the transaction has a recoveryParam in the
    // case that the signTransaction function only adds a v.
    var sig = bytes_1.splitSignature(signature);
    // We pushed a chainId and null r, s on for hashing only; remove those
    var v = 27 + sig.recoveryParam;
    if (raw.length === 9) {
        raw.pop();
        raw.pop();
        raw.pop();
        v += transaction.chainId * 2 + 8;
    }
    raw.push(bytes_1.hexlify(v));
    raw.push(bytes_1.stripZeros(bytes_1.arrayify(sig.r)));
    raw.push(bytes_1.stripZeros(bytes_1.arrayify(sig.s)));
    return RLP.encode(raw);
}
exports.serialize = serialize;
function parse(rawTransaction) {
    var transaction = RLP.decode(rawTransaction);
    if (transaction.length !== 9 && transaction.length !== 6) {
        errors.throwError('invalid raw transaction', errors.INVALID_ARGUMENT, { arg: 'rawTransactin', value: rawTransaction });
    }
    var tx = {
        nonce: handleNumber(transaction[0]).toNumber(),
        gasPrice: handleNumber(transaction[1]),
        gasLimit: handleNumber(transaction[2]),
        to: handleAddress(transaction[3]),
        value: handleNumber(transaction[4]),
        data: transaction[5],
        chainId: 0
    };
    // Legacy unsigned transaction
    if (transaction.length === 6) {
        return tx;
    }
    try {
        tx.v = bignumber_1.bigNumberify(transaction[6]).toNumber();
    }
    catch (error) {
        errors.info(error);
        return tx;
    }
    tx.r = bytes_1.hexZeroPad(transaction[7], 32);
    tx.s = bytes_1.hexZeroPad(transaction[8], 32);
    if (bignumber_1.bigNumberify(tx.r).isZero() && bignumber_1.bigNumberify(tx.s).isZero()) {
        // EIP-155 unsigned transaction
        tx.chainId = tx.v;
        tx.v = 0;
    }
    else {
        // Signed Tranasaction
        tx.chainId = Math.floor((tx.v - 35) / 2);
        if (tx.chainId < 0) {
            tx.chainId = 0;
        }
        var recoveryParam = tx.v - 27;
        var raw = transaction.slice(0, 6);
        if (tx.chainId !== 0) {
            raw.push(bytes_1.hexlify(tx.chainId));
            raw.push('0x');
            raw.push('0x');
            recoveryParam -= tx.chainId * 2 + 8;
        }
        var digest = keccak256_1.keccak256(RLP.encode(raw));
        try {
            tx.from = secp256k1_1.recoverAddress(digest, { r: bytes_1.hexlify(tx.r), s: bytes_1.hexlify(tx.s), recoveryParam: recoveryParam });
        }
        catch (error) {
            errors.info(error);
        }
        tx.hash = keccak256_1.keccak256(rawTransaction);
    }
    return tx;
}
exports.parse = parse;
function populateTransaction(transaction, provider, from) {
    if (!abstract_provider_1.Provider.isProvider(provider)) {
        errors.throwError('missing provider', errors.INVALID_ARGUMENT, {
            argument: 'provider',
            value: provider
        });
    }
    properties_1.checkProperties(transaction, allowedTransactionKeys);
    var tx = properties_1.shallowCopy(transaction);
    if (tx.to != null) {
        tx.to = provider.resolveName(tx.to);
    }
    if (tx.gasPrice == null) {
        tx.gasPrice = provider.getGasPrice();
    }
    if (tx.nonce == null) {
        tx.nonce = provider.getTransactionCount(from);
    }
    if (tx.gasLimit == null) {
        var estimate = properties_1.shallowCopy(tx);
        estimate.from = from;
        tx.gasLimit = provider.estimateGas(estimate);
    }
    if (tx.chainId == null) {
        tx.chainId = provider.getNetwork().then(function (network) { return network.chainId; });
    }
    return properties_1.resolveProperties(tx);
}
exports.populateTransaction = populateTransaction;


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var address_1 = __webpack_require__(16);
var bignumber_1 = __webpack_require__(15);
var bytes_1 = __webpack_require__(5);
var hash_1 = __webpack_require__(28);
var networks_1 = __webpack_require__(44);
var properties_1 = __webpack_require__(7);
var rlp_1 = __webpack_require__(36);
var transaction_1 = __webpack_require__(42);
var utf8_1 = __webpack_require__(9);
var web_1 = __webpack_require__(45);
var errors = __importStar(__webpack_require__(4));
///////////////////////////////
// Imported Abstracts
var abstract_provider_1 = __webpack_require__(33);
//////////////////////////////
// Request and Response Checking
// @TODO: not any?
function check(format, object) {
    var result = {};
    for (var key in format) {
        try {
            var value = format[key](object[key]);
            if (value !== undefined) {
                result[key] = value;
            }
        }
        catch (error) {
            error.checkKey = key;
            error.checkValue = object[key];
            throw error;
        }
    }
    return result;
}
function allowNull(check, nullValue) {
    return (function (value) {
        if (value == null) {
            return nullValue;
        }
        return check(value);
    });
}
function allowFalsish(check, replaceValue) {
    return (function (value) {
        if (!value) {
            return replaceValue;
        }
        return check(value);
    });
}
function arrayOf(check) {
    return (function (array) {
        if (!Array.isArray(array)) {
            throw new Error('not an array');
        }
        var result = [];
        array.forEach(function (value) {
            result.push(check(value));
        });
        return result;
    });
}
function checkHash(hash, requirePrefix) {
    if (typeof (hash) === 'string') {
        // geth-etc does add a "0x" prefix on receipt.root
        if (!requirePrefix && hash.substring(0, 2) !== '0x') {
            hash = '0x' + hash;
        }
        if (bytes_1.hexDataLength(hash) === 32) {
            return hash.toLowerCase();
        }
    }
    errors.throwError('invalid hash', errors.INVALID_ARGUMENT, { arg: 'hash', value: hash });
    return null;
}
function checkNumber(number) {
    return bignumber_1.bigNumberify(number).toNumber();
}
// Returns the difficulty as a number, or if too large (i.e. PoA network) null
function checkDifficulty(value) {
    var v = bignumber_1.bigNumberify(value);
    try {
        return v.toNumber();
    }
    catch (error) { }
    return null;
}
function checkBoolean(value) {
    if (typeof (value) === 'boolean') {
        return value;
    }
    if (typeof (value) === 'string') {
        if (value === 'true') {
            return true;
        }
        if (value === 'false') {
            return false;
        }
    }
    throw new Error('invaid boolean - ' + value);
}
function checkUint256(uint256) {
    if (!bytes_1.isHexString(uint256)) {
        throw new Error('invalid uint256');
    }
    while (uint256.length < 66) {
        uint256 = '0x0' + uint256.substring(2);
    }
    return uint256;
}
/*
function checkString(string) {
    if (typeof(string) !== 'string') { throw new Error('invalid string'); }
    return string;
}
*/
function checkBlockTag(blockTag) {
    if (blockTag == null) {
        return 'latest';
    }
    if (blockTag === 'earliest') {
        return '0x0';
    }
    if (blockTag === 'latest' || blockTag === 'pending') {
        return blockTag;
    }
    if (typeof (blockTag) === 'number') {
        return bytes_1.hexStripZeros(bytes_1.hexlify(blockTag));
    }
    if (bytes_1.isHexString(blockTag)) {
        return bytes_1.hexStripZeros(blockTag);
    }
    throw new Error('invalid blockTag');
}
var formatTransaction = {
    hash: checkHash,
    blockHash: allowNull(checkHash, null),
    blockNumber: allowNull(checkNumber, null),
    transactionIndex: allowNull(checkNumber, null),
    confirmations: allowNull(checkNumber, null),
    from: address_1.getAddress,
    gasPrice: bignumber_1.bigNumberify,
    gasLimit: bignumber_1.bigNumberify,
    to: allowNull(address_1.getAddress, null),
    value: bignumber_1.bigNumberify,
    nonce: checkNumber,
    data: bytes_1.hexlify,
    r: allowNull(checkUint256),
    s: allowNull(checkUint256),
    v: allowNull(checkNumber),
    creates: allowNull(address_1.getAddress, null),
    raw: allowNull(bytes_1.hexlify),
};
function checkTransactionResponse(transaction) {
    // Rename gas to gasLimit
    if (transaction.gas != null && transaction.gasLimit == null) {
        transaction.gasLimit = transaction.gas;
    }
    // Some clients (TestRPC) do strange things like return 0x0 for the
    // 0 address; correct this to be a real address
    if (transaction.to && bignumber_1.bigNumberify(transaction.to).isZero()) {
        transaction.to = '0x0000000000000000000000000000000000000000';
    }
    // Rename input to data
    if (transaction.input != null && transaction.data == null) {
        transaction.data = transaction.input;
    }
    // If to and creates are empty, populate the creates from the transaction
    if (transaction.to == null && transaction.creates == null) {
        transaction.creates = address_1.getContractAddress(transaction);
    }
    // @TODO: use transaction.serialize? Have to add support for including v, r, and s...
    if (!transaction.raw) {
        // Very loose providers (e.g. TestRPC) don't provide a signature or raw
        if (transaction.v && transaction.r && transaction.s) {
            var raw = [
                bytes_1.stripZeros(bytes_1.hexlify(transaction.nonce)),
                bytes_1.stripZeros(bytes_1.hexlify(transaction.gasPrice)),
                bytes_1.stripZeros(bytes_1.hexlify(transaction.gasLimit)),
                (transaction.to || "0x"),
                bytes_1.stripZeros(bytes_1.hexlify(transaction.value || '0x')),
                bytes_1.hexlify(transaction.data || '0x'),
                bytes_1.stripZeros(bytes_1.hexlify(transaction.v || '0x')),
                bytes_1.stripZeros(bytes_1.hexlify(transaction.r)),
                bytes_1.stripZeros(bytes_1.hexlify(transaction.s)),
            ];
            transaction.raw = rlp_1.encode(raw);
        }
    }
    var result = check(formatTransaction, transaction);
    var networkId = transaction.networkId;
    // geth-etc returns chainId
    if (transaction.chainId != null && networkId == null && result.v == null) {
        networkId = transaction.chainId;
    }
    if (bytes_1.isHexString(networkId)) {
        networkId = bignumber_1.bigNumberify(networkId).toNumber();
    }
    if (typeof (networkId) !== 'number' && result.v != null) {
        networkId = (result.v - 35) / 2;
        if (networkId < 0) {
            networkId = 0;
        }
        networkId = parseInt(networkId);
    }
    if (typeof (networkId) !== 'number') {
        networkId = 0;
    }
    result.networkId = networkId;
    // 0x0000... should actually be null
    if (result.blockHash && result.blockHash.replace(/0/g, '') === 'x') {
        result.blockHash = null;
    }
    return result;
}
var formatBlock = {
    hash: checkHash,
    parentHash: checkHash,
    number: checkNumber,
    timestamp: checkNumber,
    nonce: allowNull(bytes_1.hexlify),
    difficulty: checkDifficulty,
    gasLimit: bignumber_1.bigNumberify,
    gasUsed: bignumber_1.bigNumberify,
    miner: address_1.getAddress,
    extraData: bytes_1.hexlify,
    transactions: allowNull(arrayOf(checkHash)),
};
var formatBlockWithTransactions = properties_1.shallowCopy(formatBlock);
formatBlockWithTransactions.transactions = allowNull(arrayOf(checkTransactionResponse));
function checkBlock(block, includeTransactions) {
    if (block.author != null && block.miner == null) {
        block.miner = block.author;
    }
    return check(includeTransactions ? formatBlockWithTransactions : formatBlock, block);
}
var formatTransactionRequest = {
    from: allowNull(address_1.getAddress),
    nonce: allowNull(checkNumber),
    gasLimit: allowNull(bignumber_1.bigNumberify),
    gasPrice: allowNull(bignumber_1.bigNumberify),
    to: allowNull(address_1.getAddress),
    value: allowNull(bignumber_1.bigNumberify),
    data: allowNull(bytes_1.hexlify),
};
function checkTransactionRequest(transaction) {
    return check(formatTransactionRequest, transaction);
}
var formatTransactionReceiptLog = {
    transactionLogIndex: allowNull(checkNumber),
    transactionIndex: checkNumber,
    blockNumber: checkNumber,
    transactionHash: checkHash,
    address: address_1.getAddress,
    topics: arrayOf(checkHash),
    data: bytes_1.hexlify,
    logIndex: checkNumber,
    blockHash: checkHash,
};
function checkTransactionReceiptLog(log) {
    return check(formatTransactionReceiptLog, log);
}
var formatTransactionReceipt = {
    to: allowNull(address_1.getAddress, null),
    from: allowNull(address_1.getAddress, null),
    contractAddress: allowNull(address_1.getAddress, null),
    transactionIndex: checkNumber,
    root: allowNull(checkHash),
    gasUsed: bignumber_1.bigNumberify,
    logsBloom: allowNull(bytes_1.hexlify),
    blockHash: checkHash,
    transactionHash: checkHash,
    logs: arrayOf(checkTransactionReceiptLog),
    blockNumber: checkNumber,
    confirmations: allowNull(checkNumber, null),
    cumulativeGasUsed: bignumber_1.bigNumberify,
    status: allowNull(checkNumber)
};
function checkTransactionReceipt(transactionReceipt) {
    //var status = transactionReceipt.status;
    //var root = transactionReceipt.root;
    var result = check(formatTransactionReceipt, transactionReceipt);
    result.logs.forEach(function (entry, index) {
        if (entry.transactionLogIndex == null) {
            entry.transactionLogIndex = index;
        }
    });
    if (transactionReceipt.status != null) {
        result.byzantium = true;
    }
    return result;
}
function checkTopics(topics) {
    if (Array.isArray(topics)) {
        topics.forEach(function (topic) {
            checkTopics(topic);
        });
    }
    else if (topics != null) {
        checkHash(topics);
    }
    return topics;
}
var formatFilter = {
    fromBlock: allowNull(checkBlockTag, undefined),
    toBlock: allowNull(checkBlockTag, undefined),
    address: allowNull(address_1.getAddress, undefined),
    topics: allowNull(checkTopics, undefined),
};
var formatFilterByBlock = {
    blockHash: allowNull(checkHash, undefined),
    address: allowNull(address_1.getAddress, undefined),
    topics: allowNull(checkTopics, undefined),
};
function checkFilter(filter) {
    if (filter && filter.blockHash) {
        return check(formatFilterByBlock, filter);
    }
    return check(formatFilter, filter);
}
var formatLog = {
    blockNumber: allowNull(checkNumber),
    blockHash: allowNull(checkHash),
    transactionIndex: checkNumber,
    removed: allowNull(checkBoolean),
    address: address_1.getAddress,
    data: allowFalsish(bytes_1.hexlify, '0x'),
    topics: arrayOf(checkHash),
    transactionHash: checkHash,
    logIndex: checkNumber,
};
function checkLog(log) {
    return check(formatLog, log);
}
//////////////////////////////
// Event Serializeing
function serializeTopics(topics) {
    return topics.map(function (topic) {
        if (typeof (topic) === 'string') {
            return topic;
        }
        else if (Array.isArray(topic)) {
            topic.forEach(function (topic) {
                if (topic !== null && bytes_1.hexDataLength(topic) !== 32) {
                    errors.throwError('invalid topic', errors.INVALID_ARGUMENT, { argument: 'topic', value: topic });
                }
            });
            return topic.join(',');
        }
        else if (topic === null) {
            return '';
        }
        return errors.throwError('invalid topic value', errors.INVALID_ARGUMENT, { argument: 'topic', value: topic });
    }).join('&');
}
function deserializeTopics(data) {
    return data.split(/&/g).map(function (topic) {
        var comps = topic.split(',');
        if (comps.length === 1) {
            if (comps[0] === '') {
                return null;
            }
            return topic;
        }
        return comps.map(function (topic) {
            if (topic === '') {
                return null;
            }
            return topic;
        });
    });
}
function getEventTag(eventName) {
    if (typeof (eventName) === 'string') {
        if (bytes_1.hexDataLength(eventName) === 20) {
            return 'address:' + address_1.getAddress(eventName);
        }
        eventName = eventName.toLowerCase();
        if (bytes_1.hexDataLength(eventName) === 32) {
            return 'tx:' + eventName;
        }
        if (eventName.indexOf(':') === -1) {
            return eventName;
        }
    }
    else if (Array.isArray(eventName)) {
        return 'filter::' + serializeTopics(eventName);
    }
    else if (eventName && typeof (eventName) === 'object') {
        return 'filter:' + (eventName.address || '') + ':' + serializeTopics(eventName.topics || []);
    }
    throw new Error('invalid event - ' + eventName);
}
//////////////////////////////
// Helper Object
function getTime() {
    return (new Date()).getTime();
}
var BaseProvider = /** @class */ (function (_super) {
    __extends(BaseProvider, _super);
    function BaseProvider(network) {
        var _this = _super.call(this) || this;
        errors.checkNew(_this, abstract_provider_1.Provider);
        if (network instanceof Promise) {
            properties_1.defineReadOnly(_this, 'ready', network.then(function (network) {
                properties_1.defineReadOnly(_this, '_network', network);
                return network;
            }));
            // Squash any "unhandled promise" errors; the don't need to be handled
            _this.ready.catch(function (error) { });
        }
        else {
            var knownNetwork = networks_1.getNetwork((network == null) ? 'homestead' : network);
            if (knownNetwork) {
                properties_1.defineReadOnly(_this, '_network', knownNetwork);
                properties_1.defineReadOnly(_this, 'ready', Promise.resolve(_this._network));
            }
            else {
                errors.throwError('invalid network', errors.INVALID_ARGUMENT, { arg: 'network', value: network });
            }
        }
        _this._lastBlockNumber = -2;
        // Balances being watched for changes
        _this._balances = {};
        // Events being listened to
        _this._events = [];
        _this._pollingInterval = 4000;
        _this._emitted = { block: -2 };
        _this._fastQueryDate = 0;
        return _this;
    }
    BaseProvider.prototype._doPoll = function () {
        var _this = this;
        this.getBlockNumber().then(function (blockNumber) {
            _this._setFastBlockNumber(blockNumber);
            // If the block hasn't changed, meh.
            if (blockNumber === _this._lastBlockNumber) {
                return;
            }
            // First polling cycle, trigger a "block" events
            if (_this._emitted.block === -2) {
                _this._emitted.block = blockNumber - 1;
            }
            // Notify all listener for each block that has passed
            for (var i = _this._emitted.block + 1; i <= blockNumber; i++) {
                _this.emit('block', i);
            }
            // The emitted block was updated, check for obsolete events
            if (_this._emitted.block !== blockNumber) {
                _this._emitted.block = blockNumber;
                Object.keys(_this._emitted).forEach(function (key) {
                    // The block event does not expire
                    if (key === 'block') {
                        return;
                    }
                    // The block we were at when we emitted this event
                    var eventBlockNumber = _this._emitted[key];
                    // We cannot garbage collect pending transactions or blocks here
                    // They should be garbage collected by the Provider when setting
                    // "pending" events
                    if (eventBlockNumber === 'pending') {
                        return;
                    }
                    // Evict any transaction hashes or block hashes over 12 blocks
                    // old, since they should not return null anyways
                    if (blockNumber - eventBlockNumber > 12) {
                        delete _this._emitted[key];
                    }
                });
            }
            // First polling cycle
            if (_this._lastBlockNumber === -2) {
                _this._lastBlockNumber = blockNumber - 1;
            }
            // Sweep balances and remove addresses we no longer have events for
            var newBalances = {};
            // Find all transaction hashes we are waiting on
            var uniqueEventTags = {};
            _this._events.forEach(function (event) {
                uniqueEventTags[event.tag] = true;
            });
            Object.keys(uniqueEventTags).forEach(function (tag) {
                var comps = tag.split(':');
                switch (comps[0]) {
                    case 'tx': {
                        var hash_2 = comps[1];
                        _this.getTransactionReceipt(hash_2).then(function (receipt) {
                            if (!receipt || receipt.blockNumber == null) {
                                return null;
                            }
                            _this._emitted['t:' + hash_2] = receipt.blockNumber;
                            _this.emit(hash_2, receipt);
                            return null;
                        }).catch(function (error) { _this.emit('error', error); });
                        break;
                    }
                    case 'address': {
                        var address_2 = comps[1];
                        if (_this._balances[address_2]) {
                            newBalances[address_2] = _this._balances[address_2];
                        }
                        _this.getBalance(address_2, 'latest').then(function (balance) {
                            var lastBalance = _this._balances[address_2];
                            if (lastBalance && balance.eq(lastBalance)) {
                                return;
                            }
                            _this._balances[address_2] = balance;
                            _this.emit(address_2, balance);
                            return null;
                        }).catch(function (error) { _this.emit('error', error); });
                        break;
                    }
                    case 'filter': {
                        var topics = deserializeTopics(comps[2]);
                        var filter_1 = {
                            address: comps[1],
                            fromBlock: _this._lastBlockNumber + 1,
                            toBlock: blockNumber,
                            topics: topics
                        };
                        if (!filter_1.address) {
                            delete filter_1.address;
                        }
                        _this.getLogs(filter_1).then(function (logs) {
                            if (logs.length === 0) {
                                return;
                            }
                            logs.forEach(function (log) {
                                _this._emitted['b:' + log.blockHash] = log.blockNumber;
                                _this._emitted['t:' + log.transactionHash] = log.blockNumber;
                                _this.emit(filter_1, log);
                            });
                            return null;
                        }).catch(function (error) { _this.emit('error', error); });
                        break;
                    }
                }
            });
            _this._lastBlockNumber = blockNumber;
            _this._balances = newBalances;
            return null;
        }).catch(function (error) { });
        this.doPoll();
    };
    BaseProvider.prototype.resetEventsBlock = function (blockNumber) {
        this._lastBlockNumber = blockNumber - 1;
        if (this.polling) {
            this._doPoll();
        }
    };
    Object.defineProperty(BaseProvider.prototype, "network", {
        get: function () {
            return this._network;
        },
        enumerable: true,
        configurable: true
    });
    BaseProvider.prototype.getNetwork = function () {
        return this.ready;
    };
    Object.defineProperty(BaseProvider.prototype, "blockNumber", {
        get: function () {
            return this._fastBlockNumber;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseProvider.prototype, "polling", {
        get: function () {
            return (this._poller != null);
        },
        set: function (value) {
            var _this = this;
            setTimeout(function () {
                if (value && !_this._poller) {
                    _this._poller = setInterval(_this._doPoll.bind(_this), _this.pollingInterval);
                }
                else if (!value && _this._poller) {
                    clearInterval(_this._poller);
                    _this._poller = null;
                }
            }, 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseProvider.prototype, "pollingInterval", {
        get: function () {
            return this._pollingInterval;
        },
        set: function (value) {
            var _this = this;
            if (typeof (value) !== 'number' || value <= 0 || parseInt(String(value)) != value) {
                throw new Error('invalid polling interval');
            }
            this._pollingInterval = value;
            if (this._poller) {
                clearInterval(this._poller);
                this._poller = setInterval(function () { _this._doPoll(); }, this._pollingInterval);
            }
        },
        enumerable: true,
        configurable: true
    });
    BaseProvider.prototype._getFastBlockNumber = function () {
        var _this = this;
        var now = getTime();
        // Stale block number, request a newer value
        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {
            this._fastQueryDate = now;
            this._fastBlockNumberPromise = this.getBlockNumber().then(function (blockNumber) {
                if (_this._fastBlockNumber == null || blockNumber > _this._fastBlockNumber) {
                    _this._fastBlockNumber = blockNumber;
                }
                return _this._fastBlockNumber;
            });
        }
        return this._fastBlockNumberPromise;
    };
    BaseProvider.prototype._setFastBlockNumber = function (blockNumber) {
        // Older block, maybe a stale request
        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
            return;
        }
        // Update the time we updated the blocknumber
        this._fastQueryDate = getTime();
        // Newer block number, use  it
        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
            this._fastBlockNumber = blockNumber;
            this._fastBlockNumberPromise = Promise.resolve(blockNumber);
        }
    };
    // @TODO: Add .poller which must be an event emitter with a 'start', 'stop' and 'block' event;
    //        this will be used once we move to the WebSocket or other alternatives to polling
    BaseProvider.prototype.waitForTransaction = function (transactionHash, confirmations) {
        var _this = this;
        if (confirmations == null) {
            confirmations = 1;
        }
        return this.getTransactionReceipt(transactionHash).then(function (receipt) {
            if (confirmations === 0 || (receipt && receipt.confirmations >= confirmations)) {
                return receipt;
            }
            return (new Promise(function (resolve) {
                var handler = function (receipt) {
                    if (receipt.confirmations < confirmations) {
                        return;
                    }
                    _this.removeListener(transactionHash, handler);
                    resolve(receipt);
                };
                _this.on(transactionHash, handler);
            }));
        });
    };
    BaseProvider.prototype.getBlockNumber = function () {
        var _this = this;
        return this.ready.then(function () {
            return _this.perform('getBlockNumber', {}).then(function (result) {
                var value = parseInt(result);
                if (value != result) {
                    throw new Error('invalid response - getBlockNumber');
                }
                _this._setFastBlockNumber(value);
                return value;
            });
        });
    };
    BaseProvider.prototype.getGasPrice = function () {
        var _this = this;
        return this.ready.then(function () {
            return _this.perform('getGasPrice', {}).then(function (result) {
                return bignumber_1.bigNumberify(result);
            });
        });
    };
    BaseProvider.prototype.getBalance = function (addressOrName, blockTag) {
        var _this = this;
        return this.ready.then(function () {
            return properties_1.resolveProperties({ addressOrName: addressOrName, blockTag: blockTag }).then(function (_a) {
                var addressOrName = _a.addressOrName, blockTag = _a.blockTag;
                return _this.resolveName(addressOrName).then(function (address) {
                    var params = { address: address, blockTag: checkBlockTag(blockTag) };
                    return _this.perform('getBalance', params).then(function (result) {
                        return bignumber_1.bigNumberify(result);
                    });
                });
            });
        });
    };
    BaseProvider.prototype.getTransactionCount = function (addressOrName, blockTag) {
        var _this = this;
        return this.ready.then(function () {
            return properties_1.resolveProperties({ addressOrName: addressOrName, blockTag: blockTag }).then(function (_a) {
                var addressOrName = _a.addressOrName, blockTag = _a.blockTag;
                return _this.resolveName(addressOrName).then(function (address) {
                    var params = { address: address, blockTag: checkBlockTag(blockTag) };
                    return _this.perform('getTransactionCount', params).then(function (result) {
                        return bignumber_1.bigNumberify(result).toNumber();
                    });
                });
            });
        });
    };
    BaseProvider.prototype.getCode = function (addressOrName, blockTag) {
        var _this = this;
        return this.ready.then(function () {
            return properties_1.resolveProperties({ addressOrName: addressOrName, blockTag: blockTag }).then(function (_a) {
                var addressOrName = _a.addressOrName, blockTag = _a.blockTag;
                return _this.resolveName(addressOrName).then(function (address) {
                    var params = { address: address, blockTag: checkBlockTag(blockTag) };
                    return _this.perform('getCode', params).then(function (result) {
                        return bytes_1.hexlify(result);
                    });
                });
            });
        });
    };
    BaseProvider.prototype.getStorageAt = function (addressOrName, position, blockTag) {
        var _this = this;
        return this.ready.then(function () {
            return properties_1.resolveProperties({ addressOrName: addressOrName, position: position, blockTag: blockTag }).then(function (_a) {
                var addressOrName = _a.addressOrName, position = _a.position, blockTag = _a.blockTag;
                return _this.resolveName(addressOrName).then(function (address) {
                    var params = {
                        address: address,
                        blockTag: checkBlockTag(blockTag),
                        position: bytes_1.hexStripZeros(bytes_1.hexlify(position)),
                    };
                    return _this.perform('getStorageAt', params).then(function (result) {
                        return bytes_1.hexlify(result);
                    });
                });
            });
        });
    };
    BaseProvider.prototype.sendTransaction = function (signedTransaction) {
        var _this = this;
        return this.ready.then(function () {
            return properties_1.resolveProperties({ signedTransaction: signedTransaction }).then(function (_a) {
                var signedTransaction = _a.signedTransaction;
                var params = { signedTransaction: bytes_1.hexlify(signedTransaction) };
                return _this.perform('sendTransaction', params).then(function (hash) {
                    return _this._wrapTransaction(transaction_1.parse(signedTransaction), hash);
                }, function (error) {
                    error.transaction = transaction_1.parse(signedTransaction);
                    if (error.transaction.hash) {
                        error.transactionHash = error.transaction.hash;
                    }
                    throw error;
                });
            });
        });
    };
    // This should be called by any subclass wrapping a TransactionResponse
    BaseProvider.prototype._wrapTransaction = function (tx, hash) {
        var _this = this;
        if (hash != null && bytes_1.hexDataLength(hash) !== 32) {
            throw new Error('invalid response - sendTransaction');
        }
        var result = tx;
        // Check the hash we expect is the same as the hash the server reported
        if (hash != null && tx.hash !== hash) {
            errors.throwError('Transaction hash mismatch from Provider.sendTransaction.', errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });
        }
        // @TODO: (confirmations? number, timeout? number)
        result.wait = function (confirmations) {
            // We know this transaction *must* exist (whether it gets mined is
            // another story), so setting an emitted value forces us to
            // wait even if the node returns null for the receipt
            if (confirmations !== 0) {
                _this._emitted['t:' + tx.hash] = 'pending';
            }
            return _this.waitForTransaction(tx.hash, confirmations).then(function (receipt) {
                if (receipt == null && confirmations === 0) {
                    return null;
                }
                // No longer pending, allow the polling loop to garbage collect this
                _this._emitted['t:' + tx.hash] = receipt.blockNumber;
                if (receipt.status === 0) {
                    errors.throwError('transaction failed', errors.CALL_EXCEPTION, {
                        transactionHash: tx.hash,
                        transaction: tx
                    });
                }
                return receipt;
            });
        };
        return result;
    };
    BaseProvider.prototype.call = function (transaction, blockTag) {
        var _this = this;
        var tx = properties_1.shallowCopy(transaction);
        return this.ready.then(function () {
            return properties_1.resolveProperties({ blockTag: blockTag, tx: tx }).then(function (_a) {
                var blockTag = _a.blockTag, tx = _a.tx;
                return _this._resolveNames(tx, ['to', 'from']).then(function (tx) {
                    var params = { blockTag: checkBlockTag(blockTag), transaction: checkTransactionRequest(tx) };
                    return _this.perform('call', params).then(function (result) {
                        return bytes_1.hexlify(result);
                    });
                });
            });
        });
    };
    BaseProvider.prototype.estimateGas = function (transaction) {
        var _this = this;
        var tx = {
            to: transaction.to,
            from: transaction.from,
            data: transaction.data,
            gasPrice: transaction.gasPrice,
            value: transaction.value
        };
        return this.ready.then(function () {
            return properties_1.resolveProperties(tx).then(function (tx) {
                return _this._resolveNames(tx, ['to', 'from']).then(function (tx) {
                    var params = { transaction: checkTransactionRequest(tx) };
                    return _this.perform('estimateGas', params).then(function (result) {
                        return bignumber_1.bigNumberify(result);
                    });
                });
            });
        });
    };
    BaseProvider.prototype.getBlock = function (blockHashOrBlockTag, includeTransactions) {
        var _this = this;
        return this.ready.then(function () {
            return properties_1.resolveProperties({ blockHashOrBlockTag: blockHashOrBlockTag }).then(function (_a) {
                var blockHashOrBlockTag = _a.blockHashOrBlockTag;
                try {
                    var blockHash_1 = bytes_1.hexlify(blockHashOrBlockTag);
                    if (bytes_1.hexDataLength(blockHash_1) === 32) {
                        return web_1.poll(function () {
                            return _this.perform('getBlock', { blockHash: blockHash_1, includeTransactions: !!includeTransactions }).then(function (block) {
                                if (block == null) {
                                    if (_this._emitted['b:' + blockHash_1] == null) {
                                        return null;
                                    }
                                    return undefined;
                                }
                                return checkBlock(block, includeTransactions);
                            });
                        }, { onceBlock: _this });
                    }
                }
                catch (error) { }
                try {
                    var blockNumber_1 = -128;
                    var blockTag_1 = checkBlockTag(blockHashOrBlockTag);
                    if (bytes_1.isHexString(blockTag_1)) {
                        blockNumber_1 = parseInt(blockTag_1.substring(2), 16);
                    }
                    return web_1.poll(function () {
                        return _this.perform('getBlock', { blockTag: blockTag_1, includeTransactions: !!includeTransactions }).then(function (block) {
                            if (block == null) {
                                if (blockNumber_1 <= _this._emitted.block) {
                                    return undefined;
                                }
                                return null;
                            }
                            return checkBlock(block, includeTransactions);
                        });
                    }, { onceBlock: _this });
                }
                catch (error) { }
                throw new Error('invalid block hash or block tag');
            });
        });
    };
    BaseProvider.prototype.getTransaction = function (transactionHash) {
        var _this = this;
        return this.ready.then(function () {
            return properties_1.resolveProperties({ transactionHash: transactionHash }).then(function (_a) {
                var transactionHash = _a.transactionHash;
                var params = { transactionHash: checkHash(transactionHash, true) };
                return web_1.poll(function () {
                    return _this.perform('getTransaction', params).then(function (result) {
                        if (result == null) {
                            if (_this._emitted['t:' + transactionHash] == null) {
                                return null;
                            }
                            return undefined;
                        }
                        var tx = BaseProvider.checkTransactionResponse(result);
                        if (tx.blockNumber == null) {
                            tx.confirmations = 0;
                        }
                        else if (tx.confirmations == null) {
                            return _this._getFastBlockNumber().then(function (blockNumber) {
                                // Add the confirmations using the fast block number (pessimistic)
                                var confirmations = (blockNumber - tx.blockNumber) + 1;
                                if (confirmations <= 0) {
                                    confirmations = 1;
                                }
                                tx.confirmations = confirmations;
                                return _this._wrapTransaction(tx);
                            });
                        }
                        return _this._wrapTransaction(tx);
                    });
                }, { onceBlock: _this });
            });
        });
    };
    BaseProvider.prototype.getTransactionReceipt = function (transactionHash) {
        var _this = this;
        return this.ready.then(function () {
            return properties_1.resolveProperties({ transactionHash: transactionHash }).then(function (_a) {
                var transactionHash = _a.transactionHash;
                var params = { transactionHash: checkHash(transactionHash, true) };
                return web_1.poll(function () {
                    return _this.perform('getTransactionReceipt', params).then(function (result) {
                        if (result == null) {
                            if (_this._emitted['t:' + transactionHash] == null) {
                                return null;
                            }
                            return undefined;
                        }
                        // "geth-etc" returns receipts before they are ready
                        if (result.blockHash == null) {
                            return undefined;
                        }
                        var receipt = checkTransactionReceipt(result);
                        if (receipt.blockNumber == null) {
                            receipt.confirmations = 0;
                        }
                        else if (receipt.confirmations == null) {
                            return _this._getFastBlockNumber().then(function (blockNumber) {
                                // Add the confirmations using the fast block number (pessimistic)
                                var confirmations = (blockNumber - receipt.blockNumber) + 1;
                                if (confirmations <= 0) {
                                    confirmations = 1;
                                }
                                receipt.confirmations = confirmations;
                                return receipt;
                            });
                        }
                        return receipt;
                    });
                }, { onceBlock: _this });
            });
        });
    };
    BaseProvider.prototype.getLogs = function (filter) {
        var _this = this;
        return this.ready.then(function () {
            return properties_1.resolveProperties(filter).then(function (filter) {
                return _this._resolveNames(filter, ['address']).then(function (filter) {
                    var params = { filter: checkFilter(filter) };
                    return _this.perform('getLogs', params).then(function (result) {
                        return arrayOf(checkLog)(result);
                    });
                });
            });
        });
    };
    BaseProvider.prototype.getEtherPrice = function () {
        var _this = this;
        return this.ready.then(function () {
            return _this.perform('getEtherPrice', {}).then(function (result) {
                // @TODO: Check valid float
                return result;
            });
        });
    };
    // @TODO: Could probably use resolveProperties instead?
    BaseProvider.prototype._resolveNames = function (object, keys) {
        var promises = [];
        var result = properties_1.shallowCopy(object);
        keys.forEach(function (key) {
            if (result[key] == null) {
                return;
            }
            promises.push(this.resolveName(result[key]).then(function (address) {
                result[key] = address;
                return;
            }));
        }, this);
        return Promise.all(promises).then(function () { return result; });
    };
    BaseProvider.prototype._getResolver = function (name) {
        var _this = this;
        // Get the resolver from the blockchain
        return this.getNetwork().then(function (network) {
            // No ENS...
            if (!network.ensAddress) {
                errors.throwError('network does support ENS', errors.UNSUPPORTED_OPERATION, { operation: 'ENS', network: network.name });
            }
            // keccak256('resolver(bytes32)')
            var data = '0x0178b8bf' + hash_1.namehash(name).substring(2);
            var transaction = { to: network.ensAddress, data: data };
            return _this.call(transaction).then(function (data) {
                // extract the address from the data
                if (bytes_1.hexDataLength(data) !== 32) {
                    return null;
                }
                return address_1.getAddress(bytes_1.hexDataSlice(data, 12));
            });
        });
    };
    BaseProvider.prototype.resolveName = function (name) {
        var _this = this;
        // If it is a promise, resolve it then recurse
        if (name instanceof Promise) {
            return name.then(function (addressOrName) {
                return _this.resolveName(addressOrName);
            });
        }
        // If it is already an address, nothing to resolve
        try {
            return Promise.resolve(address_1.getAddress(name));
        }
        catch (error) { }
        var self = this;
        var nodeHash = hash_1.namehash(name);
        // Get the addr from the resovler
        return this._getResolver(name).then(function (resolverAddress) {
            // keccak256('addr(bytes32)')
            var data = '0x3b3b57de' + nodeHash.substring(2);
            var transaction = { to: resolverAddress, data: data };
            return self.call(transaction);
            // extract the address from the data
        }).then(function (data) {
            if (bytes_1.hexDataLength(data) !== 32) {
                return null;
            }
            var address = address_1.getAddress(bytes_1.hexDataSlice(data, 12));
            if (address === '0x0000000000000000000000000000000000000000') {
                return null;
            }
            return address;
        });
    };
    BaseProvider.prototype.lookupAddress = function (address) {
        var _this = this;
        if (address instanceof Promise) {
            return address.then(function (address) {
                return _this.lookupAddress(address);
            });
        }
        address = address_1.getAddress(address);
        var name = address.substring(2) + '.addr.reverse';
        var nodehash = hash_1.namehash(name);
        var self = this;
        return this._getResolver(name).then(function (resolverAddress) {
            if (!resolverAddress) {
                return null;
            }
            // keccak('name(bytes32)')
            var data = '0x691f3431' + nodehash.substring(2);
            var transaction = { to: resolverAddress, data: data };
            return self.call(transaction);
        }).then(function (data) {
            // Strip off the "0x"
            data = data.substring(2);
            // Strip off the dynamic string pointer (0x20)
            if (data.length < 64) {
                return null;
            }
            data = data.substring(64);
            if (data.length < 64) {
                return null;
            }
            var length = bignumber_1.bigNumberify('0x' + data.substring(0, 64)).toNumber();
            data = data.substring(64);
            if (2 * length > data.length) {
                return null;
            }
            var name = utf8_1.toUtf8String('0x' + data.substring(0, 2 * length));
            // Make sure the reverse record matches the foward record
            return self.resolveName(name).then(function (addr) {
                if (addr != address) {
                    return null;
                }
                return name;
            });
        });
    };
    BaseProvider.checkTransactionResponse = function (transaction) {
        return checkTransactionResponse(transaction);
    };
    BaseProvider.prototype.doPoll = function () {
    };
    BaseProvider.prototype.perform = function (method, params) {
        errors.throwError(method + ' not implemented', errors.NOT_IMPLEMENTED, { operation: method });
        return null;
    };
    BaseProvider.prototype._startPending = function () {
        errors.warn('WARNING: this provider does not support pending events');
    };
    BaseProvider.prototype._stopPending = function () {
    };
    BaseProvider.prototype._addEventListener = function (eventName, listener, once) {
        this._events.push({
            tag: getEventTag(eventName),
            listener: listener,
            once: once,
        });
        if (eventName === 'pending') {
            this._startPending();
        }
        this.polling = true;
    };
    BaseProvider.prototype.on = function (eventName, listener) {
        this._addEventListener(eventName, listener, false);
        return this;
    };
    BaseProvider.prototype.once = function (eventName, listener) {
        this._addEventListener(eventName, listener, true);
        return this;
    };
    BaseProvider.prototype.addEventListener = function (eventName, listener) {
        return this.on(eventName, listener);
    };
    BaseProvider.prototype.emit = function (eventName) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var result = false;
        var eventTag = getEventTag(eventName);
        this._events = this._events.filter(function (event) {
            if (event.tag !== eventTag) {
                return true;
            }
            setTimeout(function () {
                event.listener.apply(_this, args);
            }, 0);
            result = true;
            return !(event.once);
        });
        if (this.listenerCount() === 0) {
            this.polling = false;
        }
        return result;
    };
    BaseProvider.prototype.listenerCount = function (eventName) {
        if (!eventName) {
            return this._events.length;
        }
        var eventTag = getEventTag(eventName);
        return this._events.filter(function (event) {
            return (event.tag === eventTag);
        }).length;
    };
    BaseProvider.prototype.listeners = function (eventName) {
        var eventTag = getEventTag(eventName);
        return this._events.filter(function (event) {
            return (event.tag === eventTag);
        }).map(function (event) {
            return event.listener;
        });
    };
    BaseProvider.prototype.removeAllListeners = function (eventName) {
        if (eventName == null) {
            this._events = [];
            this._stopPending();
        }
        else {
            var eventTag_1 = getEventTag(eventName);
            this._events = this._events.filter(function (event) {
                return (event.tag !== eventTag_1);
            });
            if (eventName === 'pending') {
                this._stopPending();
            }
        }
        if (this._events.length === 0) {
            this.polling = false;
        }
        return this;
    };
    BaseProvider.prototype.removeListener = function (eventName, listener) {
        var found = false;
        var eventTag = getEventTag(eventName);
        this._events = this._events.filter(function (event) {
            if (event.tag !== eventTag || event.listener != listener) {
                return true;
            }
            if (found) {
                return true;
            }
            found = true;
            return false;
        });
        if (eventName === 'pending' && this.listenerCount('pending') === 0) {
            this._stopPending();
        }
        if (this.listenerCount() === 0) {
            this.polling = false;
        }
        return this;
    };
    return BaseProvider;
}(abstract_provider_1.Provider));
exports.BaseProvider = BaseProvider;
properties_1.defineReadOnly(abstract_provider_1.Provider, 'inherits', properties_1.inheritable(abstract_provider_1.Provider));


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var errors = __importStar(__webpack_require__(4));
function ethDefaultProvider(network) {
    return function (providers) {
        var providerList = [];
        if (providers.InfuraProvider) {
            providerList.push(new providers.InfuraProvider(network));
        }
        if (providers.EtherscanProvider) {
            providerList.push(new providers.EtherscanProvider(network));
        }
        if (providerList.length === 0) {
            return null;
        }
        if (providers.FallbackProvider) {
            return new providers.FallbackProvider(providerList);
            ;
        }
        return providerList[0];
    };
}
function etcDefaultProvider(url, network) {
    return function (providers) {
        if (providers.JsonRpcProvider) {
            return new providers.JsonRpcProvider(url, network);
        }
        return null;
    };
}
var homestead = {
    chainId: 1,
    ensAddress: "0x314159265dd8dbb310642f98f50c066173c1259b",
    name: "homestead",
    _defaultProvider: ethDefaultProvider('homestead')
};
var ropsten = {
    chainId: 3,
    ensAddress: "0x112234455c3a32fd11230c42e7bccd4a84e02010",
    name: "ropsten",
    _defaultProvider: ethDefaultProvider('ropsten')
};
var networks = {
    unspecified: {
        chainId: 0,
        name: 'unspecified'
    },
    homestead: homestead,
    mainnet: homestead,
    morden: {
        chainId: 2,
        name: 'morden'
    },
    ropsten: ropsten,
    testnet: ropsten,
    rinkeby: {
        chainId: 4,
        ensAddress: "0xe7410170f87102DF0055eB195163A03B7F2Bff4A",
        name: 'rinkeby',
        _defaultProvider: ethDefaultProvider('rinkeby')
    },
    goerli: {
        chainId: 5,
        ensAddress: "0x112234455c3a32fd11230c42e7bccd4a84e02010",
        name: "goerli",
        _defaultProvider: ethDefaultProvider('goerli')
    },
    kovan: {
        chainId: 42,
        name: 'kovan',
        _defaultProvider: ethDefaultProvider('kovan')
    },
    classic: {
        chainId: 61,
        name: 'classic',
        _defaultProvider: etcDefaultProvider('https://web3.gastracker.io', 'classic')
    },
    classicTestnet: {
        chainId: 62,
        name: 'classicTestnet',
        _defaultProvider: etcDefaultProvider('https://web3.gastracker.io/morden', 'classicTestnet')
    }
};
/**
 *  getNetwork
 *
 *  Converts a named common networks or chain ID (network ID) to a Network
 *  and verifies a network is a valid Network..
 */
function getNetwork(network) {
    // No network (null)
    if (network == null) {
        return null;
    }
    if (typeof (network) === 'number') {
        for (var name_1 in networks) {
            var n_1 = networks[name_1];
            if (n_1.chainId === network) {
                return {
                    name: n_1.name,
                    chainId: n_1.chainId,
                    ensAddress: (n_1.ensAddress || null),
                    _defaultProvider: (n_1._defaultProvider || null)
                };
            }
        }
        return {
            chainId: network,
            name: 'unknown'
        };
    }
    if (typeof (network) === 'string') {
        var n_2 = networks[network];
        if (n_2 == null) {
            return null;
        }
        return {
            name: n_2.name,
            chainId: n_2.chainId,
            ensAddress: n_2.ensAddress,
            _defaultProvider: (n_2._defaultProvider || null)
        };
    }
    var n = networks[network.name];
    // Not a standard network; check that it is a valid network in general
    if (!n) {
        if (typeof (network.chainId) !== 'number') {
            errors.throwError('invalid network chainId', errors.INVALID_ARGUMENT, { arg: 'network', value: network });
        }
        return network;
    }
    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)
    if (network.chainId !== 0 && network.chainId !== n.chainId) {
        errors.throwError('network chainId mismatch', errors.INVALID_ARGUMENT, { arg: 'network', value: network });
    }
    // Standard Network (allow overriding the ENS address)
    return {
        name: network.name,
        chainId: n.chainId,
        ensAddress: (network.ensAddress || n.ensAddress || null),
        _defaultProvider: (network._defaultProvider || n._defaultProvider || null)
    };
}
exports.getNetwork = getNetwork;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var xmlhttprequest_1 = __webpack_require__(142);
var base64_1 = __webpack_require__(81);
var properties_1 = __webpack_require__(7);
var utf8_1 = __webpack_require__(9);
var errors = __importStar(__webpack_require__(4));
function fetchJson(connection, json, processFunc) {
    var headers = {};
    var url = null;
    var timeout = 2 * 60 * 1000;
    if (typeof (connection) === 'string') {
        url = connection;
    }
    else if (typeof (connection) === 'object') {
        if (connection.url == null) {
            errors.throwError('missing URL', errors.MISSING_ARGUMENT, { arg: 'url' });
        }
        url = connection.url;
        if (typeof (connection.timeout) === 'number' && connection.timeout > 0) {
            timeout = connection.timeout;
        }
        if (connection.headers) {
            for (var key in connection.headers) {
                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };
            }
        }
        if (connection.user != null && connection.password != null) {
            if (url.substring(0, 6) !== 'https:' && connection.allowInsecure !== true) {
                errors.throwError('basic authentication requires a secure https url', errors.INVALID_ARGUMENT, { arg: 'url', url: url, user: connection.user, password: '[REDACTED]' });
            }
            var authorization = connection.user + ':' + connection.password;
            headers['authorization'] = {
                key: 'Authorization',
                value: 'Basic ' + base64_1.encode(utf8_1.toUtf8Bytes(authorization))
            };
        }
    }
    return new Promise(function (resolve, reject) {
        var request = new xmlhttprequest_1.XMLHttpRequest();
        var timer = null;
        timer = setTimeout(function () {
            if (timer == null) {
                return;
            }
            timer = null;
            reject(new Error('timeout'));
            setTimeout(function () {
                request.abort();
            }, 0);
        }, timeout);
        var cancelTimeout = function () {
            if (timer == null) {
                return;
            }
            clearTimeout(timer);
            timer = null;
        };
        if (json) {
            request.open('POST', url, true);
            headers['content-type'] = { key: 'Content-Type', value: 'application/json' };
        }
        else {
            request.open('GET', url, true);
        }
        Object.keys(headers).forEach(function (key) {
            var header = headers[key];
            request.setRequestHeader(header.key, header.value);
        });
        request.onreadystatechange = function () {
            if (request.readyState !== 4) {
                return;
            }
            if (request.status != 200) {
                cancelTimeout();
                // @TODO: not any!
                var error = new Error('invalid response - ' + request.status);
                error.statusCode = request.status;
                if (request.responseText) {
                    error.responseText = request.responseText;
                }
                reject(error);
                return;
            }
            var result = null;
            try {
                result = JSON.parse(request.responseText);
            }
            catch (error) {
                cancelTimeout();
                // @TODO: not any!
                var jsonError = new Error('invalid json response');
                jsonError.orginialError = error;
                jsonError.responseText = request.responseText;
                if (json != null) {
                    jsonError.requestBody = json;
                }
                jsonError.url = url;
                reject(jsonError);
                return;
            }
            if (processFunc) {
                try {
                    result = processFunc(result);
                }
                catch (error) {
                    cancelTimeout();
                    error.url = url;
                    error.body = json;
                    error.responseText = request.responseText;
                    reject(error);
                    return;
                }
            }
            cancelTimeout();
            resolve(result);
        };
        request.onerror = function (error) {
            cancelTimeout();
            reject(error);
        };
        try {
            if (json != null) {
                request.send(json);
            }
            else {
                request.send();
            }
        }
        catch (error) {
            cancelTimeout();
            // @TODO: not any!
            var connectionError = new Error('connection error');
            connectionError.error = error;
            reject(connectionError);
        }
    });
}
exports.fetchJson = fetchJson;
function poll(func, options) {
    if (!options) {
        options = {};
    }
    options = properties_1.shallowCopy(options);
    if (options.floor == null) {
        options.floor = 0;
    }
    if (options.ceiling == null) {
        options.ceiling = 10000;
    }
    if (options.interval == null) {
        options.interval = 250;
    }
    return new Promise(function (resolve, reject) {
        var timer = null;
        var done = false;
        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.
        var cancel = function () {
            if (done) {
                return false;
            }
            done = true;
            if (timer) {
                clearTimeout(timer);
            }
            return true;
        };
        if (options.timeout) {
            timer = setTimeout(function () {
                if (cancel()) {
                    reject(new Error('timeout'));
                }
            }, options.timeout);
        }
        var fastTimeout = options.fastRetry || null;
        var attempt = 0;
        function check() {
            return func().then(function (result) {
                // If we have a result, or are allowed null then we're done
                if (result !== undefined) {
                    if (cancel()) {
                        resolve(result);
                    }
                }
                else if (options.onceBlock) {
                    options.onceBlock.once('block', check);
                    // Otherwise, exponential back-off (up to 10s) our next request
                }
                else if (!done) {
                    attempt++;
                    var timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                    if (timeout < options.floor) {
                        timeout = options.floor;
                    }
                    if (timeout > options.ceiling) {
                        timeout = options.ceiling;
                    }
                    // Fast Timeout, means we quickly try again the first time
                    if (fastTimeout) {
                        attempt--;
                        timeout = fastTimeout;
                        fastTimeout = null;
                    }
                    setTimeout(check, timeout);
                }
                return null;
            }, function (error) {
                if (cancel()) {
                    reject(error);
                }
            });
        }
        check();
    });
}
exports.poll = poll;


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// See: https://github.com/ethereum/wiki/wiki/JSON-RPC
var base_provider_1 = __webpack_require__(43);
var abstract_signer_1 = __webpack_require__(37);
var errors = __importStar(__webpack_require__(4));
var address_1 = __webpack_require__(16);
var bytes_1 = __webpack_require__(5);
var networks_1 = __webpack_require__(44);
var properties_1 = __webpack_require__(7);
var utf8_1 = __webpack_require__(9);
var web_1 = __webpack_require__(45);
function timer(timeout) {
    return new Promise(function (resolve) {
        setTimeout(function () {
            resolve();
        }, timeout);
    });
}
function getResult(payload) {
    if (payload.error) {
        // @TODO: not any
        var error = new Error(payload.error.message);
        error.code = payload.error.code;
        error.data = payload.error.data;
        throw error;
    }
    return payload.result;
}
function getLowerCase(value) {
    if (value) {
        return value.toLowerCase();
    }
    return value;
}
var _constructorGuard = {};
var JsonRpcSigner = /** @class */ (function (_super) {
    __extends(JsonRpcSigner, _super);
    function JsonRpcSigner(constructorGuard, provider, addressOrIndex) {
        var _this = _super.call(this) || this;
        errors.checkNew(_this, JsonRpcSigner);
        if (constructorGuard !== _constructorGuard) {
            throw new Error('do not call the JsonRpcSigner constructor directly; use provider.getSigner');
        }
        properties_1.defineReadOnly(_this, 'provider', provider);
        // Statically attach to a given address
        if (addressOrIndex) {
            if (typeof (addressOrIndex) === 'string') {
                properties_1.defineReadOnly(_this, '_address', address_1.getAddress(addressOrIndex));
            }
            else if (typeof (addressOrIndex) === 'number') {
                properties_1.defineReadOnly(_this, '_index', addressOrIndex);
            }
            else {
                errors.throwError('invalid address or index', errors.INVALID_ARGUMENT, { argument: 'addressOrIndex', value: addressOrIndex });
            }
        }
        else {
            properties_1.defineReadOnly(_this, '_index', 0);
        }
        return _this;
    }
    JsonRpcSigner.prototype.getAddress = function () {
        var _this = this;
        if (this._address) {
            return Promise.resolve(this._address);
        }
        return this.provider.send('eth_accounts', []).then(function (accounts) {
            if (accounts.length <= _this._index) {
                errors.throwError('unknown account #' + _this._index, errors.UNSUPPORTED_OPERATION, { operation: 'getAddress' });
            }
            _this._address = address_1.getAddress(accounts[_this._index]);
            return _this._address;
        });
    };
    JsonRpcSigner.prototype.getBalance = function (blockTag) {
        return this.provider.getBalance(this.getAddress(), blockTag);
    };
    JsonRpcSigner.prototype.getTransactionCount = function (blockTag) {
        return this.provider.getTransactionCount(this.getAddress(), blockTag);
    };
    JsonRpcSigner.prototype.sendUncheckedTransaction = function (transaction) {
        var _this = this;
        transaction = properties_1.shallowCopy(transaction);
        var fromAddress = this.getAddress().then(function (address) {
            if (address) {
                address = address.toLowerCase();
            }
            return address;
        });
        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user
        // wishes to use this, it is easy to specify explicitly, otherwise
        // we look it up for them.
        if (transaction.gasLimit == null) {
            var estimate = properties_1.shallowCopy(transaction);
            estimate.from = fromAddress;
            transaction.gasLimit = this.provider.estimateGas(estimate);
        }
        return Promise.all([
            properties_1.resolveProperties(transaction),
            fromAddress
        ]).then(function (results) {
            var tx = results[0];
            var hexTx = JsonRpcProvider.hexlifyTransaction(tx);
            hexTx.from = results[1];
            return _this.provider.send('eth_sendTransaction', [hexTx]).then(function (hash) {
                return hash;
            }, function (error) {
                if (error.responseText) {
                    // See: JsonRpcProvider.sendTransaction (@TODO: Expose a ._throwError??)
                    if (error.responseText.indexOf('insufficient funds') >= 0) {
                        errors.throwError('insufficient funds', errors.INSUFFICIENT_FUNDS, {
                            transaction: tx
                        });
                    }
                    if (error.responseText.indexOf('nonce too low') >= 0) {
                        errors.throwError('nonce has already been used', errors.NONCE_EXPIRED, {
                            transaction: tx
                        });
                    }
                    if (error.responseText.indexOf('replacement transaction underpriced') >= 0) {
                        errors.throwError('replacement fee too low', errors.REPLACEMENT_UNDERPRICED, {
                            transaction: tx
                        });
                    }
                }
                throw error;
            });
        });
    };
    JsonRpcSigner.prototype.sendTransaction = function (transaction) {
        var _this = this;
        return this.sendUncheckedTransaction(transaction).then(function (hash) {
            return web_1.poll(function () {
                return _this.provider.getTransaction(hash).then(function (tx) {
                    if (tx === null) {
                        return undefined;
                    }
                    return _this.provider._wrapTransaction(tx, hash);
                });
            }, { fastRetry: 250, onceBlock: _this.provider }).catch(function (error) {
                error.transactionHash = hash;
                throw error;
            });
        });
    };
    JsonRpcSigner.prototype.signMessage = function (message) {
        var _this = this;
        var data = ((typeof (message) === 'string') ? utf8_1.toUtf8Bytes(message) : message);
        return this.getAddress().then(function (address) {
            // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
            return _this.provider.send('eth_sign', [address.toLowerCase(), bytes_1.hexlify(data)]);
        });
    };
    JsonRpcSigner.prototype.unlock = function (password) {
        var provider = this.provider;
        return this.getAddress().then(function (address) {
            return provider.send('personal_unlockAccount', [address.toLowerCase(), password, null]);
        });
    };
    return JsonRpcSigner;
}(abstract_signer_1.Signer));
exports.JsonRpcSigner = JsonRpcSigner;
var allowedTransactionKeys = {
    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true
};
var JsonRpcProvider = /** @class */ (function (_super) {
    __extends(JsonRpcProvider, _super);
    function JsonRpcProvider(url, network) {
        var _this = this;
        // One parameter, but it is a network name, so swap it with the URL
        if (typeof (url) === 'string') {
            if (network === null && networks_1.getNetwork(url)) {
                network = url;
                url = null;
            }
        }
        if (network) {
            // The network has been specified explicitly, we can use it
            _this = _super.call(this, network) || this;
        }
        else {
            // The network is unknown, query the JSON-RPC for it
            var ready = new Promise(function (resolve, reject) {
                setTimeout(function () {
                    _this.send('net_version', []).then(function (result) {
                        return resolve(networks_1.getNetwork(parseInt(result)));
                    }).catch(function (error) {
                        reject(error);
                    });
                });
            });
            _this = _super.call(this, ready) || this;
        }
        errors.checkNew(_this, JsonRpcProvider);
        // Default URL
        if (!url) {
            url = 'http://localhost:8545';
        }
        if (typeof (url) === 'string') {
            _this.connection = {
                url: url
            };
        }
        else {
            _this.connection = url;
        }
        return _this;
    }
    JsonRpcProvider.prototype.getSigner = function (addressOrIndex) {
        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);
    };
    JsonRpcProvider.prototype.listAccounts = function () {
        return this.send('eth_accounts', []).then(function (accounts) {
            return accounts.map(function (a) { return address_1.getAddress(a); });
        });
    };
    JsonRpcProvider.prototype.send = function (method, params) {
        var _this = this;
        var request = {
            method: method,
            params: params,
            id: 42,
            jsonrpc: "2.0"
        };
        return web_1.fetchJson(this.connection, JSON.stringify(request), getResult).then(function (result) {
            _this.emit('debug', {
                action: 'send',
                request: request,
                response: result,
                provider: _this
            });
            return result;
        });
    };
    JsonRpcProvider.prototype.perform = function (method, params) {
        switch (method) {
            case 'getBlockNumber':
                return this.send('eth_blockNumber', []);
            case 'getGasPrice':
                return this.send('eth_gasPrice', []);
            case 'getBalance':
                return this.send('eth_getBalance', [getLowerCase(params.address), params.blockTag]);
            case 'getTransactionCount':
                return this.send('eth_getTransactionCount', [getLowerCase(params.address), params.blockTag]);
            case 'getCode':
                return this.send('eth_getCode', [getLowerCase(params.address), params.blockTag]);
            case 'getStorageAt':
                return this.send('eth_getStorageAt', [getLowerCase(params.address), params.position, params.blockTag]);
            case 'sendTransaction':
                return this.send('eth_sendRawTransaction', [params.signedTransaction]).catch(function (error) {
                    if (error.responseText) {
                        // "insufficient funds for gas * price + value"
                        if (error.responseText.indexOf('insufficient funds') > 0) {
                            errors.throwError('insufficient funds', errors.INSUFFICIENT_FUNDS, {});
                        }
                        // "nonce too low"
                        if (error.responseText.indexOf('nonce too low') > 0) {
                            errors.throwError('nonce has already been used', errors.NONCE_EXPIRED, {});
                        }
                        // "replacement transaction underpriced"
                        if (error.responseText.indexOf('replacement transaction underpriced') > 0) {
                            errors.throwError('replacement fee too low', errors.REPLACEMENT_UNDERPRICED, {});
                        }
                    }
                    throw error;
                });
            case 'getBlock':
                if (params.blockTag) {
                    return this.send('eth_getBlockByNumber', [params.blockTag, !!params.includeTransactions]);
                }
                else if (params.blockHash) {
                    return this.send('eth_getBlockByHash', [params.blockHash, !!params.includeTransactions]);
                }
                return Promise.reject(new Error('invalid block tag or block hash'));
            case 'getTransaction':
                return this.send('eth_getTransactionByHash', [params.transactionHash]);
            case 'getTransactionReceipt':
                return this.send('eth_getTransactionReceipt', [params.transactionHash]);
            case 'call':
                return this.send('eth_call', [JsonRpcProvider.hexlifyTransaction(params.transaction, { from: true }), params.blockTag]);
            case 'estimateGas':
                return this.send('eth_estimateGas', [JsonRpcProvider.hexlifyTransaction(params.transaction, { from: true })]);
            case 'getLogs':
                if (params.filter && params.filter.address != null) {
                    params.filter.address = getLowerCase(params.filter.address);
                }
                return this.send('eth_getLogs', [params.filter]);
            default:
                break;
        }
        errors.throwError(method + ' not implemented', errors.NOT_IMPLEMENTED, { operation: method });
        return null;
    };
    JsonRpcProvider.prototype._startPending = function () {
        if (this._pendingFilter != null) {
            return;
        }
        var self = this;
        var pendingFilter = this.send('eth_newPendingTransactionFilter', []);
        this._pendingFilter = pendingFilter;
        pendingFilter.then(function (filterId) {
            function poll() {
                self.send('eth_getFilterChanges', [filterId]).then(function (hashes) {
                    if (self._pendingFilter != pendingFilter) {
                        return null;
                    }
                    var seq = Promise.resolve();
                    hashes.forEach(function (hash) {
                        // @TODO: This should be garbage collected at some point... How? When?
                        self._emitted['t:' + hash.toLowerCase()] = 'pending';
                        seq = seq.then(function () {
                            return self.getTransaction(hash).then(function (tx) {
                                self.emit('pending', tx);
                                return null;
                            });
                        });
                    });
                    return seq.then(function () {
                        return timer(1000);
                    });
                }).then(function () {
                    if (self._pendingFilter != pendingFilter) {
                        self.send('eth_uninstallFilter', [filterId]);
                        return;
                    }
                    setTimeout(function () { poll(); }, 0);
                    return null;
                }).catch(function (error) { });
            }
            poll();
            return filterId;
        }).catch(function (error) { });
    };
    JsonRpcProvider.prototype._stopPending = function () {
        this._pendingFilter = null;
    };
    // Convert an ethers.js transaction into a JSON-RPC transaction
    //  - gasLimit => gas
    //  - All values hexlified
    //  - All numeric values zero-striped
    // NOTE: This allows a TransactionRequest, but all values should be resolved
    //       before this is called
    JsonRpcProvider.hexlifyTransaction = function (transaction, allowExtra) {
        // Check only allowed properties are given
        var allowed = properties_1.shallowCopy(allowedTransactionKeys);
        if (allowExtra) {
            for (var key in allowExtra) {
                if (allowExtra[key]) {
                    allowed[key] = true;
                }
            }
        }
        properties_1.checkProperties(transaction, allowed);
        var result = {};
        // Some nodes (INFURA ropsten; INFURA mainnet is fine) don't like leading zeros.
        ['gasLimit', 'gasPrice', 'nonce', 'value'].forEach(function (key) {
            if (transaction[key] == null) {
                return;
            }
            var value = bytes_1.hexStripZeros(bytes_1.hexlify(transaction[key]));
            if (key === 'gasLimit') {
                key = 'gas';
            }
            result[key] = value;
        });
        ['from', 'to', 'data'].forEach(function (key) {
            if (transaction[key] == null) {
                return;
            }
            result[key] = bytes_1.hexlify(transaction[key]);
        });
        return result;
    };
    return JsonRpcProvider;
}(base_provider_1.BaseProvider));
exports.JsonRpcProvider = JsonRpcProvider;


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(8);
var utils = __webpack_require__(14);
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len,
                                                       jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
                          bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isIP;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ipv4Maybe = /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/;
var ipv6Block = /^[0-9A-F]{1,4}$/i;

function isIP(str) {
  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  (0, _assertString.default)(str);
  version = String(version);

  if (!version) {
    return isIP(str, 4) || isIP(str, 6);
  } else if (version === '4') {
    if (!ipv4Maybe.test(str)) {
      return false;
    }

    var parts = str.split('.').sort(function (a, b) {
      return a - b;
    });
    return parts[3] <= 255;
  } else if (version === '6') {
    var blocks = str.split(':');
    var foundOmissionBlock = false; // marker to indicate ::
    // At least some OS accept the last 32 bits of an IPv6 address
    // (i.e. 2 of the blocks) in IPv4 notation, and RFC 3493 says
    // that '::ffff:a.b.c.d' is valid for IPv4-mapped IPv6 addresses,
    // and '::a.b.c.d' is deprecated, but also valid.

    var foundIPv4TransitionBlock = isIP(blocks[blocks.length - 1], 4);
    var expectedNumberOfBlocks = foundIPv4TransitionBlock ? 7 : 8;

    if (blocks.length > expectedNumberOfBlocks) {
      return false;
    } // initial or final ::


    if (str === '::') {
      return true;
    } else if (str.substr(0, 2) === '::') {
      blocks.shift();
      blocks.shift();
      foundOmissionBlock = true;
    } else if (str.substr(str.length - 2) === '::') {
      blocks.pop();
      blocks.pop();
      foundOmissionBlock = true;
    }

    for (var i = 0; i < blocks.length; ++i) {
      // test for a :: which can not be at the string start/end
      // since those cases have been handled above
      if (blocks[i] === '' && i > 0 && i < blocks.length - 1) {
        if (foundOmissionBlock) {
          return false; // multiple :: in address
        }

        foundOmissionBlock = true;
      } else if (foundIPv4TransitionBlock && i === blocks.length - 1) {// it has been checked before that the last
        // block is a valid IPv4 address
      } else if (!ipv6Block.test(blocks[i])) {
        return false;
      }
    }

    if (foundOmissionBlock) {
      return blocks.length >= 1;
    }

    return blocks.length === expectedNumberOfBlocks;
  }

  return false;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.commaDecimal = exports.dotDecimal = exports.arabicLocales = exports.englishLocales = exports.decimal = exports.alphanumeric = exports.alpha = void 0;
var alpha = {
  'en-US': /^[A-Z]+$/i,
  'bg-BG': /^[А-Я]+$/i,
  'cs-CZ': /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,
  'da-DK': /^[A-ZÆØÅ]+$/i,
  'de-DE': /^[A-ZÄÖÜß]+$/i,
  'el-GR': /^[Α-ω]+$/i,
  'es-ES': /^[A-ZÁÉÍÑÓÚÜ]+$/i,
  'fr-FR': /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,
  'it-IT': /^[A-ZÀÉÈÌÎÓÒÙ]+$/i,
  'nb-NO': /^[A-ZÆØÅ]+$/i,
  'nl-NL': /^[A-ZÁÉËÏÓÖÜÚ]+$/i,
  'nn-NO': /^[A-ZÆØÅ]+$/i,
  'hu-HU': /^[A-ZÁÉÍÓÖŐÚÜŰ]+$/i,
  'pl-PL': /^[A-ZĄĆĘŚŁŃÓŻŹ]+$/i,
  'pt-PT': /^[A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]+$/i,
  'ru-RU': /^[А-ЯЁ]+$/i,
  'sl-SI': /^[A-ZČĆĐŠŽ]+$/i,
  'sk-SK': /^[A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,
  'sr-RS@latin': /^[A-ZČĆŽŠĐ]+$/i,
  'sr-RS': /^[А-ЯЂЈЉЊЋЏ]+$/i,
  'sv-SE': /^[A-ZÅÄÖ]+$/i,
  'tr-TR': /^[A-ZÇĞİıÖŞÜ]+$/i,
  'uk-UA': /^[А-ЩЬЮЯЄIЇҐі]+$/i,
  'ku-IQ': /^[ئابپتجچحخدرڕزژسشعغفڤقکگلڵمنوۆھەیێيطؤثآإأكضصةظذ]+$/i,
  ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/
};
exports.alpha = alpha;
var alphanumeric = {
  'en-US': /^[0-9A-Z]+$/i,
  'bg-BG': /^[0-9А-Я]+$/i,
  'cs-CZ': /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,
  'da-DK': /^[0-9A-ZÆØÅ]+$/i,
  'de-DE': /^[0-9A-ZÄÖÜß]+$/i,
  'el-GR': /^[0-9Α-ω]+$/i,
  'es-ES': /^[0-9A-ZÁÉÍÑÓÚÜ]+$/i,
  'fr-FR': /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,
  'it-IT': /^[0-9A-ZÀÉÈÌÎÓÒÙ]+$/i,
  'hu-HU': /^[0-9A-ZÁÉÍÓÖŐÚÜŰ]+$/i,
  'nb-NO': /^[0-9A-ZÆØÅ]+$/i,
  'nl-NL': /^[0-9A-ZÁÉËÏÓÖÜÚ]+$/i,
  'nn-NO': /^[0-9A-ZÆØÅ]+$/i,
  'pl-PL': /^[0-9A-ZĄĆĘŚŁŃÓŻŹ]+$/i,
  'pt-PT': /^[0-9A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]+$/i,
  'ru-RU': /^[0-9А-ЯЁ]+$/i,
  'sl-SI': /^[0-9A-ZČĆĐŠŽ]+$/i,
  'sk-SK': /^[0-9A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,
  'sr-RS@latin': /^[0-9A-ZČĆŽŠĐ]+$/i,
  'sr-RS': /^[0-9А-ЯЂЈЉЊЋЏ]+$/i,
  'sv-SE': /^[0-9A-ZÅÄÖ]+$/i,
  'tr-TR': /^[0-9A-ZÇĞİıÖŞÜ]+$/i,
  'uk-UA': /^[0-9А-ЩЬЮЯЄIЇҐі]+$/i,
  'ku-IQ': /^[٠١٢٣٤٥٦٧٨٩0-9ئابپتجچحخدرڕزژسشعغفڤقکگلڵمنوۆھەیێيطؤثآإأكضصةظذ]+$/i,
  ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/
};
exports.alphanumeric = alphanumeric;
var decimal = {
  'en-US': '.',
  ar: '٫'
};
exports.decimal = decimal;
var englishLocales = ['AU', 'GB', 'HK', 'IN', 'NZ', 'ZA', 'ZM'];
exports.englishLocales = englishLocales;

for (var locale, i = 0; i < englishLocales.length; i++) {
  locale = "en-".concat(englishLocales[i]);
  alpha[locale] = alpha['en-US'];
  alphanumeric[locale] = alphanumeric['en-US'];
  decimal[locale] = decimal['en-US'];
} // Source: http://www.localeplanet.com/java/


var arabicLocales = ['AE', 'BH', 'DZ', 'EG', 'IQ', 'JO', 'KW', 'LB', 'LY', 'MA', 'QM', 'QA', 'SA', 'SD', 'SY', 'TN', 'YE'];
exports.arabicLocales = arabicLocales;

for (var _locale, _i = 0; _i < arabicLocales.length; _i++) {
  _locale = "ar-".concat(arabicLocales[_i]);
  alpha[_locale] = alpha.ar;
  alphanumeric[_locale] = alphanumeric.ar;
  decimal[_locale] = decimal.ar;
} // Source: https://en.wikipedia.org/wiki/Decimal_mark


var dotDecimal = [];
exports.dotDecimal = dotDecimal;
var commaDecimal = ['bg-BG', 'cs-CZ', 'da-DK', 'de-DE', 'el-GR', 'es-ES', 'fr-FR', 'it-IT', 'ku-IQ', 'hu-HU', 'nb-NO', 'nn-NO', 'nl-NL', 'pl-PL', 'pt-PT', 'ru-RU', 'sl-SI', 'sr-RS@latin', 'sr-RS', 'sv-SE', 'tr-TR', 'uk-UA'];
exports.commaDecimal = commaDecimal;

for (var _i2 = 0; _i2 < dotDecimal.length; _i2++) {
  decimal[dotDecimal[_i2]] = decimal['en-US'];
}

for (var _i3 = 0; _i3 < commaDecimal.length; _i3++) {
  decimal[commaDecimal[_i3]] = ',';
}

alpha['pt-BR'] = alpha['pt-PT'];
alphanumeric['pt-BR'] = alphanumeric['pt-PT'];
decimal['pt-BR'] = decimal['pt-PT']; // see #862

alpha['pl-Pl'] = alpha['pl-PL'];
alphanumeric['pl-Pl'] = alphanumeric['pl-PL'];
decimal['pl-Pl'] = decimal['pl-PL'];

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithHoles = __webpack_require__(169);

var iterableToArrayLimit = __webpack_require__(170);

var nonIterableRest = __webpack_require__(171);

function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();
}

module.exports = _slicedToArray;

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI
var constants_1 = __webpack_require__(27);
var errors = __importStar(__webpack_require__(4));
var address_1 = __webpack_require__(16);
var bignumber_1 = __webpack_require__(15);
var bytes_1 = __webpack_require__(5);
var utf8_1 = __webpack_require__(9);
var properties_1 = __webpack_require__(7);
///////////////////////////////
var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
var paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
exports.defaultCoerceFunc = function (type, value) {
    var match = type.match(paramTypeNumber);
    if (match && parseInt(match[2]) <= 48) {
        return value.toNumber();
    }
    return value;
};
///////////////////////////////////
// Parsing for Solidity Signatures
var regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
var regexIdentifier = new RegExp("^[A-Za-z_][A-Za-z0-9_]*$");
function verifyType(type) {
    // These need to be transformed to their full description
    if (type.match(/^uint($|[^1-9])/)) {
        type = 'uint256' + type.substring(4);
    }
    else if (type.match(/^int($|[^1-9])/)) {
        type = 'int256' + type.substring(3);
    }
    return type;
}
function parseParam(param, allowIndexed) {
    var originalParam = param;
    function throwError(i) {
        throw new Error('unexpected character "' + originalParam[i] + '" at position ' + i + ' in "' + originalParam + '"');
    }
    param = param.replace(/\s/g, ' ');
    var parent = { type: '', name: '', state: { allowType: true } };
    var node = parent;
    for (var i = 0; i < param.length; i++) {
        var c = param[i];
        switch (c) {
            case '(':
                if (!node.state.allowParams) {
                    throwError(i);
                }
                node.state.allowType = false;
                node.type = verifyType(node.type);
                node.components = [{ type: '', name: '', parent: node, state: { allowType: true } }];
                node = node.components[0];
                break;
            case ')':
                delete node.state;
                if (allowIndexed && node.name === 'indexed') {
                    node.indexed = true;
                    node.name = '';
                }
                node.type = verifyType(node.type);
                var child = node;
                node = node.parent;
                if (!node) {
                    throwError(i);
                }
                delete child.parent;
                node.state.allowParams = false;
                node.state.allowName = true;
                node.state.allowArray = true;
                break;
            case ',':
                delete node.state;
                if (allowIndexed && node.name === 'indexed') {
                    node.indexed = true;
                    node.name = '';
                }
                node.type = verifyType(node.type);
                var sibling = { type: '', name: '', parent: node.parent, state: { allowType: true } };
                node.parent.components.push(sibling);
                delete node.parent;
                node = sibling;
                break;
            // Hit a space...
            case ' ':
                // If reading type, the type is done and may read a param or name
                if (node.state.allowType) {
                    if (node.type !== '') {
                        node.type = verifyType(node.type);
                        delete node.state.allowType;
                        node.state.allowName = true;
                        node.state.allowParams = true;
                    }
                }
                // If reading name, the name is done
                if (node.state.allowName) {
                    if (node.name !== '') {
                        if (allowIndexed && node.name === 'indexed') {
                            node.indexed = true;
                            node.name = '';
                        }
                        else {
                            node.state.allowName = false;
                        }
                    }
                }
                break;
            case '[':
                if (!node.state.allowArray) {
                    throwError(i);
                }
                node.type += c;
                node.state.allowArray = false;
                node.state.allowName = false;
                node.state.readArray = true;
                break;
            case ']':
                if (!node.state.readArray) {
                    throwError(i);
                }
                node.type += c;
                node.state.readArray = false;
                node.state.allowArray = true;
                node.state.allowName = true;
                break;
            default:
                if (node.state.allowType) {
                    node.type += c;
                    node.state.allowParams = true;
                    node.state.allowArray = true;
                }
                else if (node.state.allowName) {
                    node.name += c;
                    delete node.state.allowArray;
                }
                else if (node.state.readArray) {
                    node.type += c;
                }
                else {
                    throwError(i);
                }
        }
    }
    if (node.parent) {
        throw new Error("unexpected eof");
    }
    delete parent.state;
    if (allowIndexed && node.name === 'indexed') {
        node.indexed = true;
        node.name = '';
    }
    parent.type = verifyType(parent.type);
    return parent;
}
// @TODO: Better return type
function parseSignatureEvent(fragment) {
    var abi = {
        anonymous: false,
        inputs: [],
        name: '',
        type: 'event'
    };
    var match = fragment.match(regexParen);
    if (!match) {
        throw new Error('invalid event: ' + fragment);
    }
    abi.name = match[1].trim();
    splitNesting(match[2]).forEach(function (param) {
        param = parseParam(param, true);
        param.indexed = !!param.indexed;
        abi.inputs.push(param);
    });
    match[3].split(' ').forEach(function (modifier) {
        switch (modifier) {
            case 'anonymous':
                abi.anonymous = true;
                break;
            case '':
                break;
            default:
                errors.info('unknown modifier: ' + modifier);
        }
    });
    if (abi.name && !abi.name.match(regexIdentifier)) {
        throw new Error('invalid identifier: "' + abi.name + '"');
    }
    return abi;
}
function parseSignatureFunction(fragment) {
    var abi = {
        constant: false,
        gas: null,
        inputs: [],
        name: '',
        outputs: [],
        payable: false,
        stateMutability: null,
        type: 'function'
    };
    var comps = fragment.split('@');
    if (comps.length !== 1) {
        if (comps.length > 2) {
            throw new Error('invalid signature');
        }
        if (!comps[1].match(/^[0-9]+$/)) {
            throw new Error('invalid signature gas');
        }
        abi.gas = bignumber_1.bigNumberify(comps[1]);
        fragment = comps[0];
    }
    comps = fragment.split(' returns ');
    var left = comps[0].match(regexParen);
    if (!left) {
        throw new Error('invalid signature');
    }
    abi.name = left[1].trim();
    if (!abi.name.match(regexIdentifier)) {
        throw new Error('invalid identifier: "' + left[1] + '"');
    }
    splitNesting(left[2]).forEach(function (param) {
        abi.inputs.push(parseParam(param));
    });
    left[3].split(' ').forEach(function (modifier) {
        switch (modifier) {
            case 'constant':
                abi.constant = true;
                break;
            case 'payable':
                abi.payable = true;
                abi.stateMutability = 'payable';
                break;
            case 'pure':
                abi.constant = true;
                abi.stateMutability = 'pure';
                break;
            case 'view':
                abi.constant = true;
                abi.stateMutability = 'view';
                break;
            case 'external':
            case 'public':
            case '':
                break;
            default:
                errors.info('unknown modifier: ' + modifier);
        }
    });
    // We have outputs
    if (comps.length > 1) {
        var right = comps[1].match(regexParen);
        if (right[1].trim() != '' || right[3].trim() != '') {
            throw new Error('unexpected tokens');
        }
        splitNesting(right[2]).forEach(function (param) {
            abi.outputs.push(parseParam(param));
        });
    }
    if (abi.name === 'constructor') {
        abi.type = "constructor";
        if (abi.outputs.length) {
            throw new Error('constructor may not have outputs');
        }
        delete abi.name;
        delete abi.outputs;
    }
    return abi;
}
function parseParamType(type) {
    return parseParam(type, true);
}
exports.parseParamType = parseParamType;
// @TODO: Allow a second boolean to expose names
function formatParamType(paramType) {
    return getParamCoder(exports.defaultCoerceFunc, paramType).type;
}
exports.formatParamType = formatParamType;
// @TODO: Allow a second boolean to expose names and modifiers
function formatSignature(fragment) {
    return fragment.name + '(' + fragment.inputs.map(function (i) { return formatParamType(i); }).join(',') + ')';
}
exports.formatSignature = formatSignature;
function parseSignature(fragment) {
    if (typeof (fragment) === 'string') {
        // Make sure the "returns" is surrounded by a space and all whitespace is exactly one space
        fragment = fragment.replace(/\s/g, ' ');
        fragment = fragment.replace(/\(/g, ' (').replace(/\)/g, ') ').replace(/\s+/g, ' ');
        fragment = fragment.trim();
        if (fragment.substring(0, 6) === 'event ') {
            return parseSignatureEvent(fragment.substring(6).trim());
        }
        else {
            if (fragment.substring(0, 9) === 'function ') {
                fragment = fragment.substring(9);
            }
            return parseSignatureFunction(fragment.trim());
        }
    }
    throw new Error('unknown signature');
}
exports.parseSignature = parseSignature;
var Coder = /** @class */ (function () {
    function Coder(coerceFunc, name, type, localName, dynamic) {
        this.coerceFunc = coerceFunc;
        this.name = name;
        this.type = type;
        this.localName = localName;
        this.dynamic = dynamic;
    }
    return Coder;
}());
// Clones the functionality of an existing Coder, but without a localName
var CoderAnonymous = /** @class */ (function (_super) {
    __extends(CoderAnonymous, _super);
    function CoderAnonymous(coder) {
        var _this = _super.call(this, coder.coerceFunc, coder.name, coder.type, undefined, coder.dynamic) || this;
        properties_1.defineReadOnly(_this, 'coder', coder);
        return _this;
    }
    CoderAnonymous.prototype.encode = function (value) { return this.coder.encode(value); };
    CoderAnonymous.prototype.decode = function (data, offset) { return this.coder.decode(data, offset); };
    return CoderAnonymous;
}(Coder));
var CoderNull = /** @class */ (function (_super) {
    __extends(CoderNull, _super);
    function CoderNull(coerceFunc, localName) {
        return _super.call(this, coerceFunc, 'null', '', localName, false) || this;
    }
    CoderNull.prototype.encode = function (value) {
        return bytes_1.arrayify([]);
    };
    CoderNull.prototype.decode = function (data, offset) {
        if (offset > data.length) {
            throw new Error('invalid null');
        }
        return {
            consumed: 0,
            value: this.coerceFunc('null', undefined)
        };
    };
    return CoderNull;
}(Coder));
var CoderNumber = /** @class */ (function (_super) {
    __extends(CoderNumber, _super);
    function CoderNumber(coerceFunc, size, signed, localName) {
        var _this = this;
        var name = ((signed ? 'int' : 'uint') + (size * 8));
        _this = _super.call(this, coerceFunc, name, name, localName, false) || this;
        _this.size = size;
        _this.signed = signed;
        return _this;
    }
    CoderNumber.prototype.encode = function (value) {
        try {
            var v = bignumber_1.bigNumberify(value);
            if (this.signed) {
                var bounds = constants_1.MaxUint256.maskn(this.size * 8 - 1);
                if (v.gt(bounds)) {
                    throw new Error('out-of-bounds');
                }
                bounds = bounds.add(constants_1.One).mul(constants_1.NegativeOne);
                if (v.lt(bounds)) {
                    throw new Error('out-of-bounds');
                }
            }
            else if (v.lt(constants_1.Zero) || v.gt(constants_1.MaxUint256.maskn(this.size * 8))) {
                throw new Error('out-of-bounds');
            }
            v = v.toTwos(this.size * 8).maskn(this.size * 8);
            if (this.signed) {
                v = v.fromTwos(this.size * 8).toTwos(256);
            }
            return bytes_1.padZeros(bytes_1.arrayify(v), 32);
        }
        catch (error) {
            errors.throwError('invalid number value', errors.INVALID_ARGUMENT, {
                arg: this.localName,
                coderType: this.name,
                value: value
            });
        }
        return null;
    };
    CoderNumber.prototype.decode = function (data, offset) {
        if (data.length < offset + 32) {
            errors.throwError('insufficient data for ' + this.name + ' type', errors.INVALID_ARGUMENT, {
                arg: this.localName,
                coderType: this.name,
                value: bytes_1.hexlify(data.slice(offset, offset + 32))
            });
        }
        var junkLength = 32 - this.size;
        var value = bignumber_1.bigNumberify(data.slice(offset + junkLength, offset + 32));
        if (this.signed) {
            value = value.fromTwos(this.size * 8);
        }
        else {
            value = value.maskn(this.size * 8);
        }
        return {
            consumed: 32,
            value: this.coerceFunc(this.name, value),
        };
    };
    return CoderNumber;
}(Coder));
var uint256Coder = new CoderNumber(function (type, value) { return value; }, 32, false, 'none');
var CoderBoolean = /** @class */ (function (_super) {
    __extends(CoderBoolean, _super);
    function CoderBoolean(coerceFunc, localName) {
        return _super.call(this, coerceFunc, 'bool', 'bool', localName, false) || this;
    }
    CoderBoolean.prototype.encode = function (value) {
        return uint256Coder.encode(!!value ? 1 : 0);
    };
    CoderBoolean.prototype.decode = function (data, offset) {
        try {
            var result = uint256Coder.decode(data, offset);
        }
        catch (error) {
            if (error.reason === 'insufficient data for uint256 type') {
                errors.throwError('insufficient data for boolean type', errors.INVALID_ARGUMENT, {
                    arg: this.localName,
                    coderType: 'boolean',
                    value: error.value
                });
            }
            throw error;
        }
        return {
            consumed: result.consumed,
            value: this.coerceFunc('bool', !result.value.isZero())
        };
    };
    return CoderBoolean;
}(Coder));
var CoderFixedBytes = /** @class */ (function (_super) {
    __extends(CoderFixedBytes, _super);
    function CoderFixedBytes(coerceFunc, length, localName) {
        var _this = this;
        var name = ('bytes' + length);
        _this = _super.call(this, coerceFunc, name, name, localName, false) || this;
        _this.length = length;
        return _this;
    }
    CoderFixedBytes.prototype.encode = function (value) {
        var result = new Uint8Array(32);
        try {
            var data = bytes_1.arrayify(value);
            if (data.length !== this.length) {
                throw new Error('incorrect data length');
            }
            result.set(data);
        }
        catch (error) {
            errors.throwError('invalid ' + this.name + ' value', errors.INVALID_ARGUMENT, {
                arg: this.localName,
                coderType: this.name,
                value: (error.value || value)
            });
        }
        return result;
    };
    CoderFixedBytes.prototype.decode = function (data, offset) {
        if (data.length < offset + 32) {
            errors.throwError('insufficient data for ' + name + ' type', errors.INVALID_ARGUMENT, {
                arg: this.localName,
                coderType: this.name,
                value: bytes_1.hexlify(data.slice(offset, offset + 32))
            });
        }
        return {
            consumed: 32,
            value: this.coerceFunc(this.name, bytes_1.hexlify(data.slice(offset, offset + this.length)))
        };
    };
    return CoderFixedBytes;
}(Coder));
var CoderAddress = /** @class */ (function (_super) {
    __extends(CoderAddress, _super);
    function CoderAddress(coerceFunc, localName) {
        return _super.call(this, coerceFunc, 'address', 'address', localName, false) || this;
    }
    CoderAddress.prototype.encode = function (value) {
        var result = new Uint8Array(32);
        try {
            result.set(bytes_1.arrayify(address_1.getAddress(value)), 12);
        }
        catch (error) {
            errors.throwError('invalid address', errors.INVALID_ARGUMENT, {
                arg: this.localName,
                coderType: 'address',
                value: value
            });
        }
        return result;
    };
    CoderAddress.prototype.decode = function (data, offset) {
        if (data.length < offset + 32) {
            errors.throwError('insufficuent data for address type', errors.INVALID_ARGUMENT, {
                arg: this.localName,
                coderType: 'address',
                value: bytes_1.hexlify(data.slice(offset, offset + 32))
            });
        }
        return {
            consumed: 32,
            value: this.coerceFunc('address', address_1.getAddress(bytes_1.hexlify(data.slice(offset + 12, offset + 32))))
        };
    };
    return CoderAddress;
}(Coder));
function _encodeDynamicBytes(value) {
    var dataLength = 32 * Math.ceil(value.length / 32);
    var padding = new Uint8Array(dataLength - value.length);
    return bytes_1.concat([
        uint256Coder.encode(value.length),
        value,
        padding
    ]);
}
function _decodeDynamicBytes(data, offset, localName) {
    if (data.length < offset + 32) {
        errors.throwError('insufficient data for dynamicBytes length', errors.INVALID_ARGUMENT, {
            arg: localName,
            coderType: 'dynamicBytes',
            value: bytes_1.hexlify(data.slice(offset, offset + 32))
        });
    }
    var length = uint256Coder.decode(data, offset).value;
    try {
        length = length.toNumber();
    }
    catch (error) {
        errors.throwError('dynamic bytes count too large', errors.INVALID_ARGUMENT, {
            arg: localName,
            coderType: 'dynamicBytes',
            value: length.toString()
        });
    }
    if (data.length < offset + 32 + length) {
        errors.throwError('insufficient data for dynamicBytes type', errors.INVALID_ARGUMENT, {
            arg: localName,
            coderType: 'dynamicBytes',
            value: bytes_1.hexlify(data.slice(offset, offset + 32 + length))
        });
    }
    return {
        consumed: 32 + 32 * Math.ceil(length / 32),
        value: data.slice(offset + 32, offset + 32 + length),
    };
}
var CoderDynamicBytes = /** @class */ (function (_super) {
    __extends(CoderDynamicBytes, _super);
    function CoderDynamicBytes(coerceFunc, localName) {
        return _super.call(this, coerceFunc, 'bytes', 'bytes', localName, true) || this;
    }
    CoderDynamicBytes.prototype.encode = function (value) {
        try {
            return _encodeDynamicBytes(bytes_1.arrayify(value));
        }
        catch (error) {
            errors.throwError('invalid bytes value', errors.INVALID_ARGUMENT, {
                arg: this.localName,
                coderType: 'bytes',
                value: error.value
            });
        }
        return null;
    };
    CoderDynamicBytes.prototype.decode = function (data, offset) {
        var result = _decodeDynamicBytes(data, offset, this.localName);
        result.value = this.coerceFunc('bytes', bytes_1.hexlify(result.value));
        return result;
    };
    return CoderDynamicBytes;
}(Coder));
var CoderString = /** @class */ (function (_super) {
    __extends(CoderString, _super);
    function CoderString(coerceFunc, localName) {
        return _super.call(this, coerceFunc, 'string', 'string', localName, true) || this;
    }
    CoderString.prototype.encode = function (value) {
        if (typeof (value) !== 'string') {
            errors.throwError('invalid string value', errors.INVALID_ARGUMENT, {
                arg: this.localName,
                coderType: 'string',
                value: value
            });
        }
        return _encodeDynamicBytes(utf8_1.toUtf8Bytes(value));
    };
    CoderString.prototype.decode = function (data, offset) {
        var result = _decodeDynamicBytes(data, offset, this.localName);
        result.value = this.coerceFunc('string', utf8_1.toUtf8String(result.value));
        return result;
    };
    return CoderString;
}(Coder));
function alignSize(size) {
    return 32 * Math.ceil(size / 32);
}
function pack(coders, values) {
    if (Array.isArray(values)) {
        // do nothing
    }
    else if (values && typeof (values) === 'object') {
        var arrayValues = [];
        coders.forEach(function (coder) {
            arrayValues.push(values[coder.localName]);
        });
        values = arrayValues;
    }
    else {
        errors.throwError('invalid tuple value', errors.INVALID_ARGUMENT, {
            coderType: 'tuple',
            value: values
        });
    }
    if (coders.length !== values.length) {
        errors.throwError('types/value length mismatch', errors.INVALID_ARGUMENT, {
            coderType: 'tuple',
            value: values
        });
    }
    var parts = [];
    coders.forEach(function (coder, index) {
        parts.push({ dynamic: coder.dynamic, value: coder.encode(values[index]) });
    });
    var staticSize = 0, dynamicSize = 0;
    parts.forEach(function (part) {
        if (part.dynamic) {
            staticSize += 32;
            dynamicSize += alignSize(part.value.length);
        }
        else {
            staticSize += alignSize(part.value.length);
        }
    });
    var offset = 0, dynamicOffset = staticSize;
    var data = new Uint8Array(staticSize + dynamicSize);
    parts.forEach(function (part) {
        if (part.dynamic) {
            //uint256Coder.encode(dynamicOffset).copy(data, offset);
            data.set(uint256Coder.encode(dynamicOffset), offset);
            offset += 32;
            //part.value.copy(data, dynamicOffset);  @TODO
            data.set(part.value, dynamicOffset);
            dynamicOffset += alignSize(part.value.length);
        }
        else {
            //part.value.copy(data, offset);  @TODO
            data.set(part.value, offset);
            offset += alignSize(part.value.length);
        }
    });
    return data;
}
function unpack(coders, data, offset) {
    var baseOffset = offset;
    var consumed = 0;
    var value = [];
    coders.forEach(function (coder) {
        if (coder.dynamic) {
            var dynamicOffset = uint256Coder.decode(data, offset);
            var result = coder.decode(data, baseOffset + dynamicOffset.value.toNumber());
            // The dynamic part is leap-frogged somewhere else; doesn't count towards size
            result.consumed = dynamicOffset.consumed;
        }
        else {
            var result = coder.decode(data, offset);
        }
        if (result.value != undefined) {
            value.push(result.value);
        }
        offset += result.consumed;
        consumed += result.consumed;
    });
    coders.forEach(function (coder, index) {
        var name = coder.localName;
        if (!name) {
            return;
        }
        if (name === 'length') {
            name = '_length';
        }
        if (value[name] != null) {
            return;
        }
        value[name] = value[index];
    });
    return {
        value: value,
        consumed: consumed
    };
}
var CoderArray = /** @class */ (function (_super) {
    __extends(CoderArray, _super);
    function CoderArray(coerceFunc, coder, length, localName) {
        var _this = this;
        var type = (coder.type + '[' + (length >= 0 ? length : '') + ']');
        var dynamic = (length === -1 || coder.dynamic);
        _this = _super.call(this, coerceFunc, 'array', type, localName, dynamic) || this;
        _this.coder = coder;
        _this.length = length;
        return _this;
    }
    CoderArray.prototype.encode = function (value) {
        if (!Array.isArray(value)) {
            errors.throwError('expected array value', errors.INVALID_ARGUMENT, {
                arg: this.localName,
                coderType: 'array',
                value: value
            });
        }
        var count = this.length;
        var result = new Uint8Array(0);
        if (count === -1) {
            count = value.length;
            result = uint256Coder.encode(count);
        }
        errors.checkArgumentCount(count, value.length, ' in coder array' + (this.localName ? (" " + this.localName) : ""));
        var coders = [];
        for (var i = 0; i < value.length; i++) {
            coders.push(this.coder);
        }
        return bytes_1.concat([result, pack(coders, value)]);
    };
    CoderArray.prototype.decode = function (data, offset) {
        // @TODO:
        //if (data.length < offset + length * 32) { throw new Error('invalid array'); }
        var consumed = 0;
        var count = this.length;
        if (count === -1) {
            try {
                var decodedLength = uint256Coder.decode(data, offset);
            }
            catch (error) {
                errors.throwError('insufficient data for dynamic array length', errors.INVALID_ARGUMENT, {
                    arg: this.localName,
                    coderType: 'array',
                    value: error.value
                });
            }
            try {
                count = decodedLength.value.toNumber();
            }
            catch (error) {
                errors.throwError('array count too large', errors.INVALID_ARGUMENT, {
                    arg: this.localName,
                    coderType: 'array',
                    value: decodedLength.value.toString()
                });
            }
            consumed += decodedLength.consumed;
            offset += decodedLength.consumed;
        }
        var coders = [];
        for (var i = 0; i < count; i++) {
            coders.push(new CoderAnonymous(this.coder));
        }
        var result = unpack(coders, data, offset);
        result.consumed += consumed;
        result.value = this.coerceFunc(this.type, result.value);
        return result;
    };
    return CoderArray;
}(Coder));
var CoderTuple = /** @class */ (function (_super) {
    __extends(CoderTuple, _super);
    function CoderTuple(coerceFunc, coders, localName) {
        var _this = this;
        var dynamic = false;
        var types = [];
        coders.forEach(function (coder) {
            if (coder.dynamic) {
                dynamic = true;
            }
            types.push(coder.type);
        });
        var type = ('tuple(' + types.join(',') + ')');
        _this = _super.call(this, coerceFunc, 'tuple', type, localName, dynamic) || this;
        _this.coders = coders;
        return _this;
    }
    CoderTuple.prototype.encode = function (value) {
        return pack(this.coders, value);
    };
    CoderTuple.prototype.decode = function (data, offset) {
        var result = unpack(this.coders, data, offset);
        result.value = this.coerceFunc(this.type, result.value);
        return result;
    };
    return CoderTuple;
}(Coder));
/*
function getTypes(coders) {
    var type = coderTuple(coders).type;
    return type.substring(6, type.length - 1);
}
*/
function splitNesting(value) {
    value = value.trim();
    var result = [];
    var accum = '';
    var depth = 0;
    for (var offset = 0; offset < value.length; offset++) {
        var c = value[offset];
        if (c === ',' && depth === 0) {
            result.push(accum);
            accum = '';
        }
        else {
            accum += c;
            if (c === '(') {
                depth++;
            }
            else if (c === ')') {
                depth--;
                if (depth === -1) {
                    throw new Error('unbalanced parenthsis');
                }
            }
        }
    }
    if (accum) {
        result.push(accum);
    }
    return result;
}
// @TODO: Is there a way to return "class"?
var paramTypeSimple = {
    address: CoderAddress,
    bool: CoderBoolean,
    string: CoderString,
    bytes: CoderDynamicBytes,
};
function getTupleParamCoder(coerceFunc, components, localName) {
    if (!components) {
        components = [];
    }
    var coders = [];
    components.forEach(function (component) {
        coders.push(getParamCoder(coerceFunc, component));
    });
    return new CoderTuple(coerceFunc, coders, localName);
}
function getParamCoder(coerceFunc, param) {
    var coder = paramTypeSimple[param.type];
    if (coder) {
        return new coder(coerceFunc, param.name);
    }
    var match = param.type.match(paramTypeNumber);
    if (match) {
        var size = parseInt(match[2] || "256");
        if (size === 0 || size > 256 || (size % 8) !== 0) {
            errors.throwError('invalid ' + match[1] + ' bit length', errors.INVALID_ARGUMENT, {
                arg: 'param',
                value: param
            });
        }
        return new CoderNumber(coerceFunc, size / 8, (match[1] === 'int'), param.name);
    }
    var match = param.type.match(paramTypeBytes);
    if (match) {
        var size = parseInt(match[1]);
        if (size === 0 || size > 32) {
            errors.throwError('invalid bytes length', errors.INVALID_ARGUMENT, {
                arg: 'param',
                value: param
            });
        }
        return new CoderFixedBytes(coerceFunc, size, param.name);
    }
    var match = param.type.match(paramTypeArray);
    if (match) {
        var size = parseInt(match[2] || "-1");
        param = properties_1.shallowCopy(param);
        param.type = match[1];
        param = properties_1.deepCopy(param);
        return new CoderArray(coerceFunc, getParamCoder(coerceFunc, param), size, param.name);
    }
    if (param.type.substring(0, 5) === 'tuple') {
        return getTupleParamCoder(coerceFunc, param.components, param.name);
    }
    if (param.type === '') {
        return new CoderNull(coerceFunc, param.name);
    }
    errors.throwError('invalid type', errors.INVALID_ARGUMENT, {
        arg: 'type',
        value: param.type
    });
    return null;
}
var AbiCoder = /** @class */ (function () {
    function AbiCoder(coerceFunc) {
        errors.checkNew(this, AbiCoder);
        if (!coerceFunc) {
            coerceFunc = exports.defaultCoerceFunc;
        }
        properties_1.defineReadOnly(this, 'coerceFunc', coerceFunc);
    }
    AbiCoder.prototype.encode = function (types, values) {
        if (types.length !== values.length) {
            errors.throwError('types/values length mismatch', errors.INVALID_ARGUMENT, {
                count: { types: types.length, values: values.length },
                value: { types: types, values: values }
            });
        }
        var coders = [];
        types.forEach(function (type) {
            // Convert types to type objects
            //   - "uint foo" => { type: "uint", name: "foo" }
            //   - "tuple(uint, uint)" => { type: "tuple", components: [ { type: "uint" }, { type: "uint" }, ] }
            var typeObject = null;
            if (typeof (type) === 'string') {
                typeObject = parseParam(type);
            }
            else {
                typeObject = type;
            }
            coders.push(getParamCoder(this.coerceFunc, typeObject));
        }, this);
        return bytes_1.hexlify(new CoderTuple(this.coerceFunc, coders, '_').encode(values));
    };
    AbiCoder.prototype.decode = function (types, data) {
        var coders = [];
        types.forEach(function (type) {
            // See encode for details
            var typeObject = null;
            if (typeof (type) === 'string') {
                typeObject = parseParam(type);
            }
            else {
                typeObject = properties_1.deepCopy(type);
            }
            coders.push(getParamCoder(this.coerceFunc, typeObject));
        }, this);
        return new CoderTuple(this.coerceFunc, coders, '_').decode(bytes_1.arrayify(data), 0).value;
    };
    return AbiCoder;
}());
exports.AbiCoder = AbiCoder;
exports.defaultAbiCoder = new AbiCoder();


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = __webpack_require__(29);
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var hash_js_1 = __importDefault(__webpack_require__(40));
var bytes_1 = __webpack_require__(5);
function ripemd160(data) {
    return '0x' + (hash_js_1.default.ripemd160().update(bytes_1.arrayify(data)).digest('hex'));
}
exports.ripemd160 = ripemd160;
function sha256(data) {
    return '0x' + (hash_js_1.default.sha256().update(bytes_1.arrayify(data)).digest('hex'));
}
exports.sha256 = sha256;
function sha512(data) {
    return '0x' + (hash_js_1.default.sha512().update(bytes_1.arrayify(data)).digest('hex'));
}
exports.sha512 = sha512;


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var bytes_1 = __webpack_require__(5);
var crypto_1 = __webpack_require__(29);
function randomBytes(length) {
    return bytes_1.arrayify(crypto_1.randomBytes(length));
}
exports.randomBytes = randomBytes;


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *  SigningKey
 *
 *
 */
var hdnode_1 = __webpack_require__(38);
var bytes_1 = __webpack_require__(5);
var properties_1 = __webpack_require__(7);
var secp256k1_1 = __webpack_require__(39);
var errors = __importStar(__webpack_require__(4));
///////////////////////////////
var SigningKey = /** @class */ (function () {
    function SigningKey(privateKey) {
        errors.checkNew(this, SigningKey);
        var privateKeyBytes = null;
        if (hdnode_1.HDNode.isHDNode(privateKey)) {
            properties_1.defineReadOnly(this, 'mnemonic', privateKey.mnemonic);
            properties_1.defineReadOnly(this, 'path', privateKey.path);
            privateKeyBytes = bytes_1.arrayify(privateKey.privateKey);
        }
        else {
            // A lot of common tools do not prefix private keys with a 0x
            if (typeof (privateKey) === 'string' && privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
                privateKey = '0x' + privateKey;
            }
            privateKeyBytes = bytes_1.arrayify(privateKey);
        }
        try {
            if (privateKeyBytes.length !== 32) {
                errors.throwError('exactly 32 bytes required', errors.INVALID_ARGUMENT, { arg: 'privateKey', value: '[REDACTED]' });
            }
        }
        catch (error) {
            var params = { arg: 'privateKey', reason: error.reason, value: '[REDACTED]' };
            if (error.value) {
                if (typeof (error.value.length) === 'number') {
                    params.length = error.value.length;
                }
                params.type = typeof (error.value);
            }
            errors.throwError('invalid private key', error.code, params);
        }
        properties_1.defineReadOnly(this, 'privateKey', bytes_1.hexlify(privateKeyBytes));
        properties_1.defineReadOnly(this, 'keyPair', new secp256k1_1.KeyPair(privateKeyBytes));
        properties_1.defineReadOnly(this, 'publicKey', this.keyPair.publicKey);
        properties_1.defineReadOnly(this, 'address', secp256k1_1.computeAddress(this.keyPair.publicKey));
        properties_1.setType(this, 'SigningKey');
    }
    SigningKey.prototype.signDigest = function (digest) {
        return this.keyPair.sign(digest);
    };
    SigningKey.prototype.computeSharedSecret = function (key) {
        return this.keyPair.computeSharedSecret(bytes_1.arrayify(key));
    };
    SigningKey.isSigningKey = function (value) {
        return properties_1.isType(value, 'SigningKey');
    };
    return SigningKey;
}());
exports.SigningKey = SigningKey;


/***/ }),
/* 56 */
/***/ (function(module, exports) {

module.exports = require("url");

/***/ }),
/* 57 */
/***/ (function(module, exports) {

module.exports = require("http");

/***/ }),
/* 58 */
/***/ (function(module, exports) {

module.exports = require("https");

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curves = exports;

var hash = __webpack_require__(60);
var curve = __webpack_require__(83);
var utils = __webpack_require__(14);

var assert = utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new curve.edwards(options);
  else
    this.curve = new curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
  ]
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = __webpack_require__(185);
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

var hash = exports;

hash.utils = __webpack_require__(18);
hash.common = __webpack_require__(35);
hash.sha = __webpack_require__(179);
hash.ripemd = __webpack_require__(183);
hash.hmac = __webpack_require__(184);

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(10);

function encode(val) {
  return encodeURIComponent(val).
    replace(/%40/gi, '@').
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__(91);

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = toDate;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function toDate(date) {
  (0, _assertString.default)(date);
  date = Date.parse(date);
  return !isNaN(date) ? new Date(date) : null;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = toString;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function toString(input) {
  if (_typeof(input) === 'object' && input !== null) {
    if (typeof input.toString === 'function') {
      input = input.toString();
    } else {
      input = '[object Object]';
    }
  } else if (input === null || typeof input === 'undefined' || isNaN(input) && !input.length) {
    input = '';
  }

  return String(input);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isFQDN;

var _assertString = _interopRequireDefault(__webpack_require__(3));

var _merge = _interopRequireDefault(__webpack_require__(26));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var default_fqdn_options = {
  require_tld: true,
  allow_underscores: false,
  allow_trailing_dot: false
};

function isFQDN(str, options) {
  (0, _assertString.default)(str);
  options = (0, _merge.default)(options, default_fqdn_options);
  /* Remove the optional trailing dot before checking validity */

  if (options.allow_trailing_dot && str[str.length - 1] === '.') {
    str = str.substring(0, str.length - 1);
  }

  var parts = str.split('.');

  for (var i = 0; i < parts.length; i++) {
    if (parts[i].length > 63) {
      return false;
    }
  }

  if (options.require_tld) {
    var tld = parts.pop();

    if (!parts.length || !/^([a-z\u00a1-\uffff]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {
      return false;
    } // disallow spaces


    if (/[\s\u2002-\u200B\u202F\u205F\u3000\uFEFF\uDB40\uDC20]/.test(tld)) {
      return false;
    }
  }

  for (var part, _i = 0; _i < parts.length; _i++) {
    part = parts[_i];

    if (options.allow_underscores) {
      part = part.replace(/_/g, '');
    }

    if (!/^[a-z\u00a1-\uffff0-9-]+$/i.test(part)) {
      return false;
    } // disallow full-width chars


    if (/[\uff01-\uff5e]/.test(part)) {
      return false;
    }

    if (part[0] === '-' || part[part.length - 1] === '-') {
      return false;
    }
  }

  return true;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var includes = function includes(arr, val) {
  return arr.some(function (arrVal) {
    return val === arrVal;
  });
};

var _default = includes;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 67 */
/***/ (function(module, exports) {

function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;

/***/ }),
/* 68 */
/***/ (function(module, exports) {

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

module.exports = _assertThisInitialized;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var contract_1 = __webpack_require__(109);
exports.Contract = contract_1.Contract;
exports.ContractFactory = contract_1.ContractFactory;
exports.VoidSigner = contract_1.VoidSigner;
var abstract_signer_1 = __webpack_require__(37);
exports.Signer = abstract_signer_1.Signer;
var wallet_1 = __webpack_require__(112);
exports.Wallet = wallet_1.Wallet;
var constants = __importStar(__webpack_require__(27));
exports.constants = constants;
var errors = __importStar(__webpack_require__(4));
exports.errors = errors;
var providers = __importStar(__webpack_require__(141));
exports.providers = providers;
var utils = __importStar(__webpack_require__(151));
exports.utils = utils;
var wordlists = __importStar(__webpack_require__(154));
exports.wordlists = wordlists;
////////////////////////
// Compile-Time Constants
// This is empty in node, and used by browserify to inject extra goodies
var shims_1 = __webpack_require__(161);
exports.platform = shims_1.platform;
// This is generated by "npm run dist"
var _version_1 = __webpack_require__(71);
exports.version = _version_1.version;
////////////////////////
// Helper Functions
function getDefaultProvider(network) {
    if (network == null) {
        network = 'homestead';
    }
    var n = utils.getNetwork(network);
    if (!n || !n._defaultProvider) {
        errors.throwError('unsupported getDefaultProvider network', errors.UNSUPPORTED_OPERATION, {
            operation: 'getDefaultProvider',
            network: network
        });
    }
    return n._defaultProvider(providers);
}
exports.getDefaultProvider = getDefaultProvider;


/***/ }),
/* 70 */
/***/ (function(module, exports) {

module.exports = require("buffer");

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.version = "4.0.27";


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI
var address_1 = __webpack_require__(16);
var abi_coder_1 = __webpack_require__(51);
var bignumber_1 = __webpack_require__(15);
var bytes_1 = __webpack_require__(5);
var hash_1 = __webpack_require__(28);
var keccak256_1 = __webpack_require__(19);
var properties_1 = __webpack_require__(7);
var errors = __importStar(__webpack_require__(4));
///////////////////////////////
var _Indexed = /** @class */ (function () {
    function _Indexed(hash) {
        properties_1.setType(this, 'Indexed');
        properties_1.defineReadOnly(this, 'hash', hash);
    }
    return _Indexed;
}());
var Description = /** @class */ (function () {
    function Description(info) {
        properties_1.setType(this, 'Description');
        for (var key in info) {
            properties_1.defineReadOnly(this, key, properties_1.deepCopy(info[key], true));
        }
        Object.freeze(this);
    }
    return Description;
}());
var _DeployDescription = /** @class */ (function (_super) {
    __extends(_DeployDescription, _super);
    function _DeployDescription() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    _DeployDescription.prototype.encode = function (bytecode, params) {
        if (!bytes_1.isHexString(bytecode)) {
            errors.throwError('invalid contract bytecode', errors.INVALID_ARGUMENT, {
                arg: 'bytecode',
                value: bytecode
            });
        }
        errors.checkArgumentCount(params.length, this.inputs.length, ' in Interface constructor');
        try {
            return (bytecode + abi_coder_1.defaultAbiCoder.encode(this.inputs, params).substring(2));
        }
        catch (error) {
            errors.throwError('invalid constructor argument', errors.INVALID_ARGUMENT, {
                arg: error.arg,
                reason: error.reason,
                value: error.value
            });
        }
        return null;
    };
    return _DeployDescription;
}(Description));
var _FunctionDescription = /** @class */ (function (_super) {
    __extends(_FunctionDescription, _super);
    function _FunctionDescription() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    _FunctionDescription.prototype.encode = function (params) {
        errors.checkArgumentCount(params.length, this.inputs.length, ' in interface function ' + this.name);
        try {
            return this.sighash + abi_coder_1.defaultAbiCoder.encode(this.inputs, params).substring(2);
        }
        catch (error) {
            errors.throwError('invalid input argument', errors.INVALID_ARGUMENT, {
                arg: error.arg,
                reason: error.reason,
                value: error.value
            });
        }
        return null;
    };
    _FunctionDescription.prototype.decode = function (data) {
        try {
            return abi_coder_1.defaultAbiCoder.decode(this.outputs, bytes_1.arrayify(data));
        }
        catch (error) {
            errors.throwError('invalid data for function output', errors.INVALID_ARGUMENT, {
                arg: 'data',
                errorArg: error.arg,
                errorValue: error.value,
                value: data,
                reason: error.reason
            });
        }
    };
    return _FunctionDescription;
}(Description));
var Result = /** @class */ (function (_super) {
    __extends(Result, _super);
    function Result() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Result;
}(Description));
var _EventDescription = /** @class */ (function (_super) {
    __extends(_EventDescription, _super);
    function _EventDescription() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    _EventDescription.prototype.encodeTopics = function (params) {
        var _this = this;
        if (params.length > this.inputs.length) {
            errors.throwError('too many arguments for ' + this.name, errors.UNEXPECTED_ARGUMENT, { maxCount: params.length, expectedCount: this.inputs.length });
        }
        var topics = [];
        if (!this.anonymous) {
            topics.push(this.topic);
        }
        params.forEach(function (arg, index) {
            var param = _this.inputs[index];
            if (!param.indexed) {
                if (arg != null) {
                    errors.throwError('cannot filter non-indexed parameters; must be null', errors.INVALID_ARGUMENT, { argument: (param.name || index), value: arg });
                }
                return;
            }
            if (arg == null) {
                topics.push(null);
            }
            else if (param.type === 'string') {
                topics.push(hash_1.id(arg));
            }
            else if (param.type === 'bytes') {
                topics.push(keccak256_1.keccak256(arg));
            }
            else if (param.type.indexOf('[') !== -1 || param.type.substring(0, 5) === 'tuple') {
                errors.throwError('filtering with tuples or arrays not implemented yet; bug us on GitHub', errors.NOT_IMPLEMENTED, { operation: 'filter(array|tuple)' });
            }
            else {
                if (param.type === 'address') {
                    address_1.getAddress(arg);
                }
                topics.push(bytes_1.hexZeroPad(bytes_1.hexlify(arg), 32).toLowerCase());
            }
        });
        // Trim off trailing nulls
        while (topics.length && topics[topics.length - 1] === null) {
            topics.pop();
        }
        return topics;
    };
    _EventDescription.prototype.decode = function (data, topics) {
        // Strip the signature off of non-anonymous topics
        if (topics != null && !this.anonymous) {
            topics = topics.slice(1);
        }
        var inputIndexed = [];
        var inputNonIndexed = [];
        var inputDynamic = [];
        this.inputs.forEach(function (param, index) {
            if (param.indexed) {
                if (param.type === 'string' || param.type === 'bytes' || param.type.indexOf('[') >= 0 || param.type.substring(0, 5) === 'tuple') {
                    inputIndexed.push({ type: 'bytes32', name: (param.name || '') });
                    inputDynamic.push(true);
                }
                else {
                    inputIndexed.push(param);
                    inputDynamic.push(false);
                }
            }
            else {
                inputNonIndexed.push(param);
                inputDynamic.push(false);
            }
        });
        if (topics != null) {
            var resultIndexed = abi_coder_1.defaultAbiCoder.decode(inputIndexed, bytes_1.concat(topics));
        }
        var resultNonIndexed = abi_coder_1.defaultAbiCoder.decode(inputNonIndexed, bytes_1.arrayify(data));
        var result = {};
        var nonIndexedIndex = 0, indexedIndex = 0;
        this.inputs.forEach(function (input, index) {
            if (input.indexed) {
                if (topics == null) {
                    result[index] = new _Indexed(null);
                }
                else if (inputDynamic[index]) {
                    result[index] = new _Indexed(resultIndexed[indexedIndex++]);
                }
                else {
                    result[index] = resultIndexed[indexedIndex++];
                }
            }
            else {
                result[index] = resultNonIndexed[nonIndexedIndex++];
            }
            if (input.name) {
                result[input.name] = result[index];
            }
        });
        result.length = this.inputs.length;
        return new Result(result);
    };
    return _EventDescription;
}(Description));
var _TransactionDescription = /** @class */ (function (_super) {
    __extends(_TransactionDescription, _super);
    function _TransactionDescription() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return _TransactionDescription;
}(Description));
var _LogDescription = /** @class */ (function (_super) {
    __extends(_LogDescription, _super);
    function _LogDescription() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return _LogDescription;
}(Description));
function addMethod(method) {
    switch (method.type) {
        case 'constructor': {
            var description = new _DeployDescription({
                inputs: method.inputs,
                payable: (method.payable == null || !!method.payable)
            });
            if (!this.deployFunction) {
                this.deployFunction = description;
            }
            break;
        }
        case 'function': {
            var signature = abi_coder_1.formatSignature(method).replace(/tuple/g, '');
            var sighash = hash_1.id(signature).substring(0, 10);
            var description = new _FunctionDescription({
                inputs: method.inputs,
                outputs: method.outputs,
                gas: method.gas,
                payable: (method.payable == null || !!method.payable),
                type: ((method.constant) ? 'call' : 'transaction'),
                name: method.name,
                signature: signature,
                sighash: sighash,
            });
            // Expose the first (and hopefully unique named function)
            if (method.name) {
                if (this.functions[method.name] == null) {
                    properties_1.defineReadOnly(this.functions, method.name, description);
                }
                else {
                    errors.warn('WARNING: Multiple definitions for ' + method.name);
                }
            }
            // Expose all methods by their signature, for overloaded functions
            if (this.functions[description.signature] == null) {
                properties_1.defineReadOnly(this.functions, description.signature, description);
            }
            break;
        }
        case 'event': {
            var signature = abi_coder_1.formatSignature(method).replace(/tuple/g, '');
            var description = new _EventDescription({
                name: method.name,
                signature: signature,
                inputs: method.inputs,
                topic: hash_1.id(signature),
                anonymous: (!!method.anonymous)
            });
            // Expose the first (and hopefully unique) event name
            if (method.name && this.events[method.name] == null) {
                properties_1.defineReadOnly(this.events, method.name, description);
            }
            // Expose all events by their signature, for overloaded functions
            if (this.events[description.signature] == null) {
                properties_1.defineReadOnly(this.events, description.signature, description);
            }
            break;
        }
        case 'fallback':
            // Nothing to do for fallback
            break;
        default:
            errors.warn('WARNING: unsupported ABI type - ' + method.type);
            break;
    }
}
var Interface = /** @class */ (function () {
    function Interface(abi) {
        errors.checkNew(this, Interface);
        if (typeof (abi) === 'string') {
            try {
                abi = JSON.parse(abi);
            }
            catch (error) {
                errors.throwError('could not parse ABI JSON', errors.INVALID_ARGUMENT, {
                    arg: 'abi',
                    errorMessage: error.message,
                    value: abi
                });
            }
            if (!Array.isArray(abi)) {
                errors.throwError('invalid abi', errors.INVALID_ARGUMENT, { arg: 'abi', value: abi });
                return null;
            }
        }
        properties_1.defineReadOnly(this, 'functions', {});
        properties_1.defineReadOnly(this, 'events', {});
        // Convert any supported ABI format into a standard ABI format
        var _abi = [];
        abi.forEach(function (fragment) {
            if (typeof (fragment) === 'string') {
                fragment = abi_coder_1.parseSignature(fragment);
            }
            // @TODO: We should probable do some validation; create abiCoder.formatSignature for checking
            _abi.push(fragment);
        });
        properties_1.defineReadOnly(this, 'abi', properties_1.deepCopy(_abi, true));
        _abi.forEach(addMethod, this);
        // If there wasn't a constructor, create the default constructor
        if (!this.deployFunction) {
            addMethod.call(this, { type: 'constructor', inputs: [] });
        }
        properties_1.setType(this, 'Interface');
    }
    Interface.prototype.parseTransaction = function (tx) {
        var sighash = tx.data.substring(0, 10).toLowerCase();
        for (var name in this.functions) {
            if (name.indexOf('(') === -1) {
                continue;
            }
            var func = this.functions[name];
            if (func.sighash === sighash) {
                var result = abi_coder_1.defaultAbiCoder.decode(func.inputs, '0x' + tx.data.substring(10));
                return new _TransactionDescription({
                    args: result,
                    decode: func.decode,
                    name: func.name,
                    signature: func.signature,
                    sighash: func.sighash,
                    value: bignumber_1.bigNumberify(tx.value || '0'),
                });
            }
        }
        return null;
    };
    Interface.prototype.parseLog = function (log) {
        for (var name in this.events) {
            if (name.indexOf('(') === -1) {
                continue;
            }
            var event = this.events[name];
            if (event.anonymous) {
                continue;
            }
            if (event.topic !== log.topics[0]) {
                continue;
            }
            // @TODO: If anonymous, and the only method, and the input count matches, should we parse and return it?
            return new _LogDescription({
                decode: event.decode,
                name: event.name,
                signature: event.signature,
                topic: event.topic,
                values: event.decode(log.data, log.topics)
            });
        }
        return null;
    };
    Interface.isInterface = function (value) {
        return properties_1.isType(value, 'Interface');
    };
    Interface.isIndexed = function (value) {
        return properties_1.isType(value, 'Indexed');
    };
    return Interface;
}());
exports.Interface = Interface;


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var wordlist_1 = __webpack_require__(21);
var words = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
var wordlist = null;
function loadWords(lang) {
    if (wordlist != null) {
        return;
    }
    wordlist = words.replace(/([A-Z])/g, ' $1').toLowerCase().substring(1).split(' ');
    if (wordlist_1.check(lang) !== '0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60') {
        wordlist = null;
        throw new Error('BIP39 Wordlist for en (English) FAILED');
    }
}
var LangEn = /** @class */ (function (_super) {
    __extends(LangEn, _super);
    function LangEn() {
        return _super.call(this, 'en') || this;
    }
    LangEn.prototype.getWord = function (index) {
        loadWords(this);
        return wordlist[index];
    };
    LangEn.prototype.getWordIndex = function (word) {
        loadWords(this);
        return wordlist.indexOf(word);
    };
    return LangEn;
}(wordlist_1.Wordlist));
var langEn = new LangEn();
exports.langEn = langEn;
wordlist_1.register(langEn);


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var crypto_1 = __webpack_require__(29);
var bytes_1 = __webpack_require__(5);
function bufferify(value) {
    return Buffer.from(bytes_1.arrayify(value));
}
function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {
    return bytes_1.arrayify(crypto_1.pbkdf2Sync(bufferify(password), bufferify(salt), iterations, keylen, hashAlgorithm));
}
exports.pbkdf2 = pbkdf2;


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var crypto_1 = __webpack_require__(29);
var bytes_1 = __webpack_require__(5);
var errors = __importStar(__webpack_require__(4));
var SupportedAlgorithms;
(function (SupportedAlgorithms) {
    SupportedAlgorithms["sha256"] = "sha256";
    SupportedAlgorithms["sha512"] = "sha512";
})(SupportedAlgorithms = exports.SupportedAlgorithms || (exports.SupportedAlgorithms = {}));
;
function computeHmac(algorithm, key, data) {
    if (!SupportedAlgorithms[algorithm]) {
        errors.throwError('unsupported algorithm ' + algorithm, errors.UNSUPPORTED_OPERATION, { operation: 'hmac', algorithm: algorithm });
    }
    return bytes_1.arrayify(crypto_1.createHmac(algorithm, Buffer.from(bytes_1.arrayify(key))).update(Buffer.from(bytes_1.arrayify(data))).digest());
}
exports.computeHmac = computeHmac;


/***/ }),
/* 76 */
/***/ (function(module, exports) {

module.exports = require("util");

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(17);
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(17);
var common = __webpack_require__(34);
var shaCommon = __webpack_require__(77);
var assert = __webpack_require__(13);

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(17);
var common = __webpack_require__(34);
var assert = __webpack_require__(13);

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var address_1 = __webpack_require__(16);
function isCrowdsaleWallet(json) {
    try {
        var data = JSON.parse(json);
    }
    catch (error) {
        return false;
    }
    return (data.encseed && data.ethaddr);
}
exports.isCrowdsaleWallet = isCrowdsaleWallet;
function isSecretStorageWallet(json) {
    try {
        var data = JSON.parse(json);
    }
    catch (error) {
        return false;
    }
    if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {
        return false;
    }
    // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff
    return true;
}
exports.isSecretStorageWallet = isSecretStorageWallet;
//export function isJsonWallet(json: string): boolean {
//    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));
//}
function getJsonWalletAddress(json) {
    if (isCrowdsaleWallet(json)) {
        try {
            return address_1.getAddress(JSON.parse(json).ethaddr);
        }
        catch (error) {
            return null;
        }
    }
    if (isSecretStorageWallet(json)) {
        try {
            return address_1.getAddress(JSON.parse(json).address);
        }
        catch (error) {
            return null;
        }
    }
    return null;
}
exports.getJsonWalletAddress = getJsonWalletAddress;


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var bytes_1 = __webpack_require__(5);
///////////////////////////////
/*
declare class Buffer implements ArrayLike<number> {
    constructor(data: any, encoding?: string);
    toString(encoding?: string): any;
    [key: number]: number;
    length: number;
}
*/
function decode(textData) {
    return bytes_1.arrayify(new Uint8Array(Buffer.from(textData, 'base64')));
}
exports.decode = decode;
;
function encode(data) {
    return Buffer.from(bytes_1.arrayify(data)).toString('base64');
}
exports.encode = encode;


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = exports;

curve.base = __webpack_require__(47);
curve.short = __webpack_require__(176);
curve.mont = __webpack_require__(177);
curve.edwards = __webpack_require__(178);


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(18);
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(18);
var common = __webpack_require__(35);
var shaCommon = __webpack_require__(84);
var assert = __webpack_require__(13);

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(18);
var common = __webpack_require__(35);
var assert = __webpack_require__(13);

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(10);
var normalizeHeaderName = __webpack_require__(199);

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(200);
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(206);
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__(62);

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };
  return error;
};


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isAbsoluteURL = __webpack_require__(201);
var combineURLs = __webpack_require__(202);

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

var url = __webpack_require__(56);
var http = __webpack_require__(57);
var https = __webpack_require__(58);
var assert = __webpack_require__(207);
var Writable = __webpack_require__(208).Writable;
var debug = __webpack_require__(209)("follow-redirects");

// RFC7231§4.2.1: Of the request methods defined by this specification,
// the GET, HEAD, OPTIONS, and TRACE methods are defined to be safe.
var SAFE_METHODS = { GET: true, HEAD: true, OPTIONS: true, TRACE: true };

// Create handlers that pass events from native requests
var eventHandlers = Object.create(null);
["abort", "aborted", "error", "socket", "timeout"].forEach(function (event) {
  eventHandlers[event] = function (arg) {
    this._redirectable.emit(event, arg);
  };
});

// An HTTP(S) request that can be redirected
function RedirectableRequest(options, responseCallback) {
  // Initialize the request
  Writable.call(this);
  options.headers = options.headers || {};
  this._options = options;
  this._redirectCount = 0;
  this._redirects = [];
  this._requestBodyLength = 0;
  this._requestBodyBuffers = [];

  // Since http.request treats host as an alias of hostname,
  // but the url module interprets host as hostname plus port,
  // eliminate the host property to avoid confusion.
  if (options.host) {
    // Use hostname if set, because it has precedence
    if (!options.hostname) {
      options.hostname = options.host;
    }
    delete options.host;
  }

  // Attach a callback if passed
  if (responseCallback) {
    this.on("response", responseCallback);
  }

  // React to responses of native requests
  var self = this;
  this._onNativeResponse = function (response) {
    self._processResponse(response);
  };

  // Complete the URL object when necessary
  if (!options.pathname && options.path) {
    var searchPos = options.path.indexOf("?");
    if (searchPos < 0) {
      options.pathname = options.path;
    }
    else {
      options.pathname = options.path.substring(0, searchPos);
      options.search = options.path.substring(searchPos);
    }
  }

  // Perform the first request
  this._performRequest();
}
RedirectableRequest.prototype = Object.create(Writable.prototype);

// Writes buffered data to the current native request
RedirectableRequest.prototype.write = function (data, encoding, callback) {
  // Validate input and shift parameters if necessary
  if (!(typeof data === "string" || typeof data === "object" && ("length" in data))) {
    throw new Error("data should be a string, Buffer or Uint8Array");
  }
  if (typeof encoding === "function") {
    callback = encoding;
    encoding = null;
  }

  // Ignore empty buffers, since writing them doesn't invoke the callback
  // https://github.com/nodejs/node/issues/22066
  if (data.length === 0) {
    if (callback) {
      callback();
    }
    return;
  }
  // Only write when we don't exceed the maximum body length
  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
    this._requestBodyLength += data.length;
    this._requestBodyBuffers.push({ data: data, encoding: encoding });
    this._currentRequest.write(data, encoding, callback);
  }
  // Error when we exceed the maximum body length
  else {
    this.emit("error", new Error("Request body larger than maxBodyLength limit"));
    this.abort();
  }
};

// Ends the current native request
RedirectableRequest.prototype.end = function (data, encoding, callback) {
  // Shift parameters if necessary
  if (typeof data === "function") {
    callback = data;
    data = encoding = null;
  }
  else if (typeof encoding === "function") {
    callback = encoding;
    encoding = null;
  }

  // Write data and end
  var currentRequest = this._currentRequest;
  this.write(data || "", encoding, function () {
    currentRequest.end(null, null, callback);
  });
};

// Sets a header value on the current native request
RedirectableRequest.prototype.setHeader = function (name, value) {
  this._options.headers[name] = value;
  this._currentRequest.setHeader(name, value);
};

// Clears a header value on the current native request
RedirectableRequest.prototype.removeHeader = function (name) {
  delete this._options.headers[name];
  this._currentRequest.removeHeader(name);
};

// Proxy all other public ClientRequest methods
[
  "abort", "flushHeaders", "getHeader",
  "setNoDelay", "setSocketKeepAlive", "setTimeout",
].forEach(function (method) {
  RedirectableRequest.prototype[method] = function (a, b) {
    return this._currentRequest[method](a, b);
  };
});

// Proxy all public ClientRequest properties
["aborted", "connection", "socket"].forEach(function (property) {
  Object.defineProperty(RedirectableRequest.prototype, property, {
    get: function () { return this._currentRequest[property]; },
  });
});

// Executes the next native request (initial or redirect)
RedirectableRequest.prototype._performRequest = function () {
  // Load the native protocol
  var protocol = this._options.protocol;
  var nativeProtocol = this._options.nativeProtocols[protocol];
  if (!nativeProtocol) {
    this.emit("error", new Error("Unsupported protocol " + protocol));
    return;
  }

  // If specified, use the agent corresponding to the protocol
  // (HTTP and HTTPS use different types of agents)
  if (this._options.agents) {
    var scheme = protocol.substr(0, protocol.length - 1);
    this._options.agent = this._options.agents[scheme];
  }

  // Create the native request
  var request = this._currentRequest =
        nativeProtocol.request(this._options, this._onNativeResponse);
  this._currentUrl = url.format(this._options);

  // Set up event handlers
  request._redirectable = this;
  for (var event in eventHandlers) {
    /* istanbul ignore else */
    if (event) {
      request.on(event, eventHandlers[event]);
    }
  }

  // End a redirected request
  // (The first request must be ended explicitly with RedirectableRequest#end)
  if (this._isRedirect) {
    // Write the request entity and end.
    var i = 0;
    var buffers = this._requestBodyBuffers;
    (function writeNext() {
      if (i < buffers.length) {
        var buffer = buffers[i++];
        request.write(buffer.data, buffer.encoding, writeNext);
      }
      else {
        request.end();
      }
    }());
  }
};

// Processes a response from the current native request
RedirectableRequest.prototype._processResponse = function (response) {
  // Store the redirected response
  if (this._options.trackRedirects) {
    this._redirects.push({
      url: this._currentUrl,
      headers: response.headers,
      statusCode: response.statusCode,
    });
  }

  // RFC7231§6.4: The 3xx (Redirection) class of status code indicates
  // that further action needs to be taken by the user agent in order to
  // fulfill the request. If a Location header field is provided,
  // the user agent MAY automatically redirect its request to the URI
  // referenced by the Location field value,
  // even if the specific status code is not understood.
  var location = response.headers.location;
  if (location && this._options.followRedirects !== false &&
      response.statusCode >= 300 && response.statusCode < 400) {
    // RFC7231§6.4: A client SHOULD detect and intervene
    // in cyclical redirections (i.e., "infinite" redirection loops).
    if (++this._redirectCount > this._options.maxRedirects) {
      this.emit("error", new Error("Max redirects exceeded."));
      return;
    }

    // RFC7231§6.4: Automatic redirection needs to done with
    // care for methods not known to be safe […],
    // since the user might not wish to redirect an unsafe request.
    // RFC7231§6.4.7: The 307 (Temporary Redirect) status code indicates
    // that the target resource resides temporarily under a different URI
    // and the user agent MUST NOT change the request method
    // if it performs an automatic redirection to that URI.
    var header;
    var headers = this._options.headers;
    if (response.statusCode !== 307 && !(this._options.method in SAFE_METHODS)) {
      this._options.method = "GET";
      // Drop a possible entity and headers related to it
      this._requestBodyBuffers = [];
      for (header in headers) {
        if (/^content-/i.test(header)) {
          delete headers[header];
        }
      }
    }

    // Drop the Host header, as the redirect might lead to a different host
    if (!this._isRedirect) {
      for (header in headers) {
        if (/^host$/i.test(header)) {
          delete headers[header];
        }
      }
    }

    // Perform the redirected request
    var redirectUrl = url.resolve(this._currentUrl, location);
    debug("redirecting to", redirectUrl);
    Object.assign(this._options, url.parse(redirectUrl));
    this._isRedirect = true;
    this._performRequest();

    // Discard the remainder of the response to avoid waiting for data
    response.destroy();
  }
  else {
    // The response is not a redirect; return it as-is
    response.responseUrl = this._currentUrl;
    response.redirects = this._redirects;
    this.emit("response", response);

    // Clean up
    this._requestBodyBuffers = [];
  }
};

// Wraps the key/value object of protocols with redirect functionality
function wrap(protocols) {
  // Default settings
  var exports = {
    maxRedirects: 21,
    maxBodyLength: 10 * 1024 * 1024,
  };

  // Wrap each protocol
  var nativeProtocols = {};
  Object.keys(protocols).forEach(function (scheme) {
    var protocol = scheme + ":";
    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);

    // Executes a request, following redirects
    wrappedProtocol.request = function (options, callback) {
      if (typeof options === "string") {
        options = url.parse(options);
        options.maxRedirects = exports.maxRedirects;
      }
      else {
        options = Object.assign({
          protocol: protocol,
          maxRedirects: exports.maxRedirects,
          maxBodyLength: exports.maxBodyLength,
        }, options);
      }
      options.nativeProtocols = nativeProtocols;
      assert.equal(options.protocol, protocol, "protocol mismatch");
      debug("options", options);
      return new RedirectableRequest(options, callback);
    };

    // Executes a GET request, following redirects
    wrappedProtocol.get = function (options, callback) {
      var request = wrappedProtocol.request(options, callback);
      request.end();
      return request;
    };
  });
  return exports;
}

// Exports
module.exports = wrap({ http: http, https: https });
module.exports.wrap = wrap;


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(211);

/**
 * Active `debug` instances.
 */
exports.instances = [];

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  var prevTime;

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);
  debug.destroy = destroy;

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  exports.instances.push(debug);

  return debug;
}

function destroy () {
  var index = exports.instances.indexOf(this);
  if (index !== -1) {
    exports.instances.splice(index, 1);
    return true;
  } else {
    return false;
  }
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var i;
  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }

  for (i = 0; i < exports.instances.length; i++) {
    var instance = exports.instances[i];
    instance.enabled = exports.enabled(instance.namespace);
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  if (name[name.length - 1] === '*') {
    return true;
  }
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(10);

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  var valueFromConfig2Keys = ['url', 'method', 'params', 'data'];
  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy'];
  var defaultToConfig2Keys = [
    'baseURL', 'url', 'transformRequest', 'transformResponse', 'paramsSerializer',
    'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress',
    'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent',
    'httpsAgent', 'cancelToken', 'socketPath'
  ];

  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    }
  });

  utils.forEach(mergeDeepPropertiesKeys, function mergeDeepProperties(prop) {
    if (utils.isObject(config2[prop])) {
      config[prop] = utils.deepMerge(config1[prop], config2[prop]);
    } else if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (utils.isObject(config1[prop])) {
      config[prop] = utils.deepMerge(config1[prop]);
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });

  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });

  var axiosKeys = valueFromConfig2Keys
    .concat(mergeDeepPropertiesKeys)
    .concat(defaultToConfig2Keys);

  var otherKeys = Object
    .keys(config2)
    .filter(function filterAxiosKeys(key) {
      return axiosKeys.indexOf(key) === -1;
    });

  utils.forEach(otherKeys, function otherKeysDefaultToConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });

  return config;
};


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = toFloat;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function toFloat(str) {
  (0, _assertString.default)(str);
  return parseFloat(str);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isByteLength;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/* eslint-disable prefer-rest-params */
function isByteLength(str, options) {
  (0, _assertString.default)(str);
  var min;
  var max;

  if (_typeof(options) === 'object') {
    min = options.min || 0;
    max = options.max;
  } else {
    // backwards compatibility: isByteLength(str, min [, max])
    min = arguments[1];
    max = arguments[2];
  }

  var len = encodeURI(str).split(/%..|./).length - 1;
  return len >= min && (typeof max === 'undefined' || len <= max);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isInt;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;
var intLeadingZeroes = /^[-+]?[0-9]+$/;

function isInt(str, options) {
  (0, _assertString.default)(str);
  options = options || {}; // Get the regex to use for testing, based on whether
  // leading zeroes are allowed or not.

  var regex = options.hasOwnProperty('allow_leading_zeroes') && !options.allow_leading_zeroes ? int : intLeadingZeroes; // Check min/max/lt/gt

  var minCheckPassed = !options.hasOwnProperty('min') || str >= options.min;
  var maxCheckPassed = !options.hasOwnProperty('max') || str <= options.max;
  var ltCheckPassed = !options.hasOwnProperty('lt') || str < options.lt;
  var gtCheckPassed = !options.hasOwnProperty('gt') || str > options.gt;
  return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isFullWidth;
exports.fullWidth = void 0;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fullWidth = /[^\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/;
exports.fullWidth = fullWidth;

function isFullWidth(str) {
  (0, _assertString.default)(str);
  return fullWidth.test(str);
}

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isHalfWidth;
exports.halfWidth = void 0;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var halfWidth = /[\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/;
exports.halfWidth = halfWidth;

function isHalfWidth(str) {
  (0, _assertString.default)(str);
  return halfWidth.test(str);
}

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isHexadecimal;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var hexadecimal = /^[0-9A-F]+$/i;

function isHexadecimal(str) {
  (0, _assertString.default)(str);
  return hexadecimal.test(str);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ltrim;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ltrim(str, chars) {
  (0, _assertString.default)(str);
  var pattern = chars ? new RegExp("^[".concat(chars, "]+"), 'g') : /^\s+/g;
  return str.replace(pattern, '');
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = rtrim;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function rtrim(str, chars) {
  (0, _assertString.default)(str);
  var pattern = chars ? new RegExp("[".concat(chars, "]")) : /\s/;
  var idx = str.length - 1;

  for (; idx >= 0 && pattern.test(str[idx]); idx--) {
    ;
  }

  return idx < str.length ? str.substr(0, idx + 1) : str;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = blacklist;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function blacklist(str, chars) {
  (0, _assertString.default)(str);
  return str.replace(new RegExp("[".concat(chars, "]+"), 'g'), '');
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(70)
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createHash = __webpack_require__(284)
var bs58checkBase = __webpack_require__(285)

// SHA256(SHA256(buffer))
function sha256x2 (buffer) {
  var tmp = createHash('sha256').update(buffer).digest()
  return createHash('sha256').update(tmp).digest()
}

module.exports = bs58checkBase(sha256x2)


/***/ }),
/* 108 */
/***/ (function(module, exports) {

function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = __webpack_require__(27);
var errors = __importStar(__webpack_require__(4));
var abi_coder_1 = __webpack_require__(51);
var address_1 = __webpack_require__(16);
var bignumber_1 = __webpack_require__(15);
var bytes_1 = __webpack_require__(5);
var interface_1 = __webpack_require__(72);
var properties_1 = __webpack_require__(7);
///////////////////////////////
// Imported Abstracts
var abstract_provider_1 = __webpack_require__(33);
var abstract_signer_1 = __webpack_require__(37);
///////////////////////////////
var VoidSigner = /** @class */ (function (_super) {
    __extends(VoidSigner, _super);
    function VoidSigner(address, provider) {
        var _this = _super.call(this) || this;
        properties_1.defineReadOnly(_this, 'address', address);
        properties_1.defineReadOnly(_this, 'provider', provider);
        return _this;
    }
    VoidSigner.prototype.getAddress = function () {
        return Promise.resolve(this.address);
    };
    VoidSigner.prototype._fail = function (message, operation) {
        return Promise.resolve().then(function () {
            errors.throwError(message, errors.UNSUPPORTED_OPERATION, { operation: operation });
        });
    };
    VoidSigner.prototype.signMessage = function (message) {
        return this._fail('VoidSigner cannot sign messages', 'signMessage');
    };
    VoidSigner.prototype.sendTransaction = function (transaction) {
        return this._fail('VoidSigner cannot sign transactions', 'sendTransaction');
    };
    VoidSigner.prototype.connect = function (provider) {
        return new VoidSigner(this.address, provider);
    };
    return VoidSigner;
}(abstract_signer_1.Signer));
exports.VoidSigner = VoidSigner;
var allowedTransactionKeys = {
    chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true
};
// Recursively replaces ENS names with promises to resolve the name and
// stalls until all promises have returned
// @TODO: Expand this to resolve any promises too
function resolveAddresses(provider, value, paramType) {
    if (Array.isArray(paramType)) {
        var promises_1 = [];
        paramType.forEach(function (paramType, index) {
            var v = null;
            if (Array.isArray(value)) {
                v = value[index];
            }
            else {
                v = value[paramType.name];
            }
            promises_1.push(resolveAddresses(provider, v, paramType));
        });
        return Promise.all(promises_1);
    }
    if (paramType.type === 'address') {
        return provider.resolveName(value);
    }
    if (paramType.type === 'tuple') {
        return resolveAddresses(provider, value, paramType.components);
    }
    // Strips one level of array indexing off the end to recuse into
    var isArrayMatch = paramType.type.match(/(.*)(\[[0-9]*\]$)/);
    if (isArrayMatch) {
        if (!Array.isArray(value)) {
            throw new Error('invalid value for array');
        }
        var promises = [];
        var subParamType = {
            components: paramType.components,
            type: isArrayMatch[1],
        };
        value.forEach(function (v) {
            promises.push(resolveAddresses(provider, v, subParamType));
        });
        return Promise.all(promises);
    }
    return Promise.resolve(value);
}
function runMethod(contract, functionName, estimateOnly) {
    var method = contract.interface.functions[functionName];
    return function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        var tx = {};
        var blockTag = null;
        // If 1 extra parameter was passed in, it contains overrides
        if (params.length === method.inputs.length + 1 && typeof (params[params.length - 1]) === 'object') {
            tx = properties_1.shallowCopy(params.pop());
            if (tx.blockTag != null) {
                blockTag = tx.blockTag;
            }
            delete tx.blockTag;
            // Check for unexpected keys (e.g. using "gas" instead of "gasLimit")
            for (var key in tx) {
                if (!allowedTransactionKeys[key]) {
                    throw new Error('unknown transaction override ' + key);
                }
            }
        }
        if (params.length != method.inputs.length) {
            throw new Error('incorrect number of arguments');
        }
        // Check overrides make sense
        ['data', 'to'].forEach(function (key) {
            if (tx[key] != null) {
                errors.throwError('cannot override ' + key, errors.UNSUPPORTED_OPERATION, { operation: key });
            }
        });
        tx.to = contract._deployed(blockTag).then(function () {
            return contract.addressPromise;
        });
        return resolveAddresses(contract.provider, params, method.inputs).then(function (params) {
            tx.data = method.encode(params);
            if (method.type === 'call') {
                // Call (constant functions) always cost 0 ether
                if (estimateOnly) {
                    return Promise.resolve(constants_1.Zero);
                }
                if (!contract.provider) {
                    errors.throwError('call (constant functions) require a provider or a signer with a provider', errors.UNSUPPORTED_OPERATION, { operation: 'call' });
                }
                // Check overrides make sense
                ['gasLimit', 'gasPrice', 'value'].forEach(function (key) {
                    if (tx[key] != null) {
                        throw new Error('call cannot override ' + key);
                    }
                });
                if (tx.from == null && contract.signer) {
                    tx.from = contract.signer.getAddress();
                }
                return contract.provider.call(tx, blockTag).then(function (value) {
                    if ((bytes_1.hexDataLength(value) % 32) === 4 && bytes_1.hexDataSlice(value, 0, 4) === '0x08c379a0') {
                        var reason = abi_coder_1.defaultAbiCoder.decode(['string'], bytes_1.hexDataSlice(value, 4));
                        errors.throwError('call revert exception', errors.CALL_EXCEPTION, {
                            address: contract.address,
                            args: params,
                            method: method.signature,
                            errorSignature: 'Error(string)',
                            errorArgs: [reason],
                            reason: reason,
                            transaction: tx
                        });
                    }
                    try {
                        var result = method.decode(value);
                        if (method.outputs.length === 1) {
                            result = result[0];
                        }
                        return result;
                    }
                    catch (error) {
                        if (value === '0x' && method.outputs.length > 0) {
                            errors.throwError('call exception', errors.CALL_EXCEPTION, {
                                address: contract.address,
                                method: method.signature,
                                args: params
                            });
                        }
                        throw error;
                    }
                });
            }
            else if (method.type === 'transaction') {
                // Only computing the transaction estimate
                if (estimateOnly) {
                    if (!contract.provider) {
                        errors.throwError('estimate gas require a provider or a signer with a provider', errors.UNSUPPORTED_OPERATION, { operation: 'estimateGas' });
                    }
                    if (tx.from == null && contract.signer) {
                        tx.from = contract.signer.getAddress();
                    }
                    return contract.provider.estimateGas(tx);
                }
                if (tx.gasLimit == null && method.gas != null) {
                    tx.gasLimit = bignumber_1.bigNumberify(method.gas).add(21000);
                }
                if (!contract.signer) {
                    errors.throwError('sending a transaction require a signer', errors.UNSUPPORTED_OPERATION, { operation: 'sendTransaction' });
                }
                // Make sure they aren't overriding something they shouldn't
                if (tx.from != null) {
                    errors.throwError('cannot override from in a transaction', errors.UNSUPPORTED_OPERATION, { operation: 'sendTransaction' });
                }
                return contract.signer.sendTransaction(tx).then(function (tx) {
                    var wait = tx.wait.bind(tx);
                    tx.wait = function (confirmations) {
                        return wait(confirmations).then(function (receipt) {
                            receipt.events = receipt.logs.map(function (log) {
                                var event = properties_1.deepCopy(log);
                                var parsed = contract.interface.parseLog(log);
                                if (parsed) {
                                    event.args = parsed.values;
                                    event.decode = parsed.decode;
                                    event.event = parsed.name;
                                    event.eventSignature = parsed.signature;
                                }
                                event.removeListener = function () { return contract.provider; };
                                event.getBlock = function () {
                                    return contract.provider.getBlock(receipt.blockHash);
                                };
                                event.getTransaction = function () {
                                    return contract.provider.getTransaction(receipt.transactionHash);
                                };
                                event.getTransactionReceipt = function () {
                                    return Promise.resolve(receipt);
                                };
                                return event;
                            });
                            return receipt;
                        });
                    };
                    return tx;
                });
            }
            throw new Error('invalid type - ' + method.type);
            return null;
        });
    };
}
function getEventTag(filter) {
    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
        return '*';
    }
    return (filter.address || '*') + '@' + (filter.topics ? filter.topics.join(':') : '');
}
var Contract = /** @class */ (function () {
    // https://github.com/Microsoft/TypeScript/issues/5453
    // Once this issue is resolved (there are open PR) we can do this nicer
    // by making addressOrName default to null for 2 operand calls. :)
    function Contract(addressOrName, contractInterface, signerOrProvider) {
        var _this = this;
        errors.checkNew(this, Contract);
        // @TODO: Maybe still check the addressOrName looks like a valid address or name?
        //address = getAddress(address);
        if (interface_1.Interface.isInterface(contractInterface)) {
            properties_1.defineReadOnly(this, 'interface', contractInterface);
        }
        else {
            properties_1.defineReadOnly(this, 'interface', new interface_1.Interface(contractInterface));
        }
        if (abstract_signer_1.Signer.isSigner(signerOrProvider)) {
            properties_1.defineReadOnly(this, 'provider', signerOrProvider.provider);
            properties_1.defineReadOnly(this, 'signer', signerOrProvider);
        }
        else if (abstract_provider_1.Provider.isProvider(signerOrProvider)) {
            properties_1.defineReadOnly(this, 'provider', signerOrProvider);
            properties_1.defineReadOnly(this, 'signer', null);
        }
        else {
            errors.throwError('invalid signer or provider', errors.INVALID_ARGUMENT, { arg: 'signerOrProvider', value: signerOrProvider });
        }
        properties_1.defineReadOnly(this, 'estimate', {});
        properties_1.defineReadOnly(this, 'functions', {});
        properties_1.defineReadOnly(this, 'filters', {});
        Object.keys(this.interface.events).forEach(function (eventName) {
            var event = _this.interface.events[eventName];
            properties_1.defineReadOnly(_this.filters, eventName, function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return {
                    address: _this.address,
                    topics: event.encodeTopics(args)
                };
            });
        });
        this._events = [];
        properties_1.defineReadOnly(this, 'address', addressOrName);
        if (this.provider) {
            properties_1.defineReadOnly(this, 'addressPromise', this.provider.resolveName(addressOrName).then(function (address) {
                if (address == null) {
                    throw new Error('name not found');
                }
                return address;
            }).catch(function (error) {
                throw error;
            }));
        }
        else {
            try {
                properties_1.defineReadOnly(this, 'addressPromise', Promise.resolve(address_1.getAddress(addressOrName)));
            }
            catch (error) {
                // Without a provider, we cannot use ENS names
                errors.throwError('provider is required to use non-address contract address', errors.INVALID_ARGUMENT, { argument: 'addressOrName', value: addressOrName });
            }
        }
        Object.keys(this.interface.functions).forEach(function (name) {
            var run = runMethod(_this, name, false);
            if (_this[name] == null) {
                properties_1.defineReadOnly(_this, name, run);
            }
            else {
                errors.warn('WARNING: Multiple definitions for ' + name);
            }
            if (_this.functions[name] == null) {
                properties_1.defineReadOnly(_this.functions, name, run);
                properties_1.defineReadOnly(_this.estimate, name, runMethod(_this, name, true));
            }
        });
    }
    // @TODO: Allow timeout?
    Contract.prototype.deployed = function () {
        return this._deployed();
    };
    Contract.prototype._deployed = function (blockTag) {
        var _this = this;
        if (!this._deployedPromise) {
            // If we were just deployed, we know the transaction we should occur in
            if (this.deployTransaction) {
                this._deployedPromise = this.deployTransaction.wait().then(function () {
                    return _this;
                });
            }
            else {
                // @TODO: Once we allow a timeout to be passed in, we will wait
                // up to that many blocks for getCode
                // Otherwise, poll for our code to be deployed
                this._deployedPromise = this.provider.getCode(this.address, blockTag).then(function (code) {
                    if (code === '0x') {
                        errors.throwError('contract not deployed', errors.UNSUPPORTED_OPERATION, {
                            contractAddress: _this.address,
                            operation: 'getDeployed'
                        });
                    }
                    return _this;
                });
            }
        }
        return this._deployedPromise;
    };
    // @TODO:
    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>
    // @TODO:
    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>
    Contract.prototype.fallback = function (overrides) {
        var _this = this;
        if (!this.signer) {
            errors.throwError('sending a transaction require a signer', errors.UNSUPPORTED_OPERATION, { operation: 'sendTransaction(fallback)' });
        }
        var tx = properties_1.shallowCopy(overrides || {});
        ['from', 'to'].forEach(function (key) {
            if (tx[key] == null) {
                return;
            }
            errors.throwError('cannot override ' + key, errors.UNSUPPORTED_OPERATION, { operation: key });
        });
        tx.to = this.addressPromise;
        return this.deployed().then(function () {
            return _this.signer.sendTransaction(tx);
        });
    };
    // Reconnect to a different signer or provider
    Contract.prototype.connect = function (signerOrProvider) {
        if (typeof (signerOrProvider) === 'string') {
            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);
        }
        var contract = new Contract(this.address, this.interface, signerOrProvider);
        if (this.deployTransaction) {
            properties_1.defineReadOnly(contract, 'deployTransaction', this.deployTransaction);
        }
        return contract;
    };
    // Re-attach to a different on=chain instance of this contract
    Contract.prototype.attach = function (addressOrName) {
        return new Contract(addressOrName, this.interface, this.signer || this.provider);
    };
    Contract.isIndexed = function (value) {
        return interface_1.Interface.isIndexed(value);
    };
    Contract.prototype._getEventFilter = function (eventName) {
        var _this = this;
        if (typeof (eventName) === 'string') {
            // Listen for any event
            if (eventName === '*') {
                return {
                    prepareEvent: function (e) {
                        var parsed = _this.interface.parseLog(e);
                        if (parsed) {
                            e.args = parsed.values;
                            e.decode = parsed.decode;
                            e.event = parsed.name;
                            e.eventSignature = parsed.signature;
                        }
                        return [e];
                    },
                    eventTag: '*',
                    filter: { address: this.address },
                };
            }
            // Normalize the eventName
            if (eventName.indexOf('(') !== -1) {
                eventName = abi_coder_1.formatSignature(abi_coder_1.parseSignature('event ' + eventName));
            }
            var event_1 = this.interface.events[eventName];
            if (!event_1) {
                errors.throwError('unknown event - ' + eventName, errors.INVALID_ARGUMENT, { argumnet: 'eventName', value: eventName });
            }
            var filter_1 = {
                address: this.address,
                topics: [event_1.topic]
            };
            return {
                prepareEvent: function (e) {
                    var args = event_1.decode(e.data, e.topics);
                    e.args = args;
                    var result = Array.prototype.slice.call(args);
                    result.push(e);
                    return result;
                },
                event: event_1,
                eventTag: getEventTag(filter_1),
                filter: filter_1
            };
        }
        var filter = {
            address: this.address
        };
        // Find the matching event in the ABI; if none, we still allow filtering
        // since it may be a filter for an otherwise unknown event
        var event = null;
        if (eventName.topics && eventName.topics[0]) {
            filter.topics = eventName.topics;
            for (var name_1 in this.interface.events) {
                if (name_1.indexOf('(') === -1) {
                    continue;
                }
                var e = this.interface.events[name_1];
                if (e.topic === eventName.topics[0].toLowerCase()) {
                    event = e;
                    break;
                }
            }
        }
        return {
            prepareEvent: function (e) {
                if (!event) {
                    return [e];
                }
                var args = event.decode(e.data, e.topics);
                e.args = args;
                var result = Array.prototype.slice.call(args);
                result.push(e);
                return result;
            },
            event: event,
            eventTag: getEventTag(filter),
            filter: filter
        };
    };
    Contract.prototype._addEventListener = function (eventFilter, listener, once) {
        var _this = this;
        if (!this.provider) {
            errors.throwError('events require a provider or a signer with a provider', errors.UNSUPPORTED_OPERATION, { operation: 'once' });
        }
        var wrappedListener = function (log) {
            var event = properties_1.deepCopy(log);
            var args = eventFilter.prepareEvent(event);
            if (eventFilter.event) {
                event.decode = eventFilter.event.decode;
                event.event = eventFilter.event.name;
                event.eventSignature = eventFilter.event.signature;
            }
            event.removeListener = function () { _this.removeListener(eventFilter.filter, listener); };
            event.getBlock = function () { return _this.provider.getBlock(log.blockHash); };
            event.getTransaction = function () { return _this.provider.getTransaction(log.transactionHash); };
            event.getTransactionReceipt = function () { return _this.provider.getTransactionReceipt(log.transactionHash); };
            _this.emit.apply(_this, [eventFilter.filter].concat(args));
        };
        this.provider.on(eventFilter.filter, wrappedListener);
        this._events.push({ eventFilter: eventFilter, listener: listener, wrappedListener: wrappedListener, once: once });
    };
    Contract.prototype.on = function (event, listener) {
        this._addEventListener(this._getEventFilter(event), listener, false);
        return this;
    };
    Contract.prototype.once = function (event, listener) {
        this._addEventListener(this._getEventFilter(event), listener, true);
        return this;
    };
    Contract.prototype.addListener = function (eventName, listener) {
        return this.on(eventName, listener);
    };
    Contract.prototype.emit = function (eventName) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!this.provider) {
            return false;
        }
        var result = false;
        var eventFilter = this._getEventFilter(eventName);
        this._events = this._events.filter(function (event) {
            // Not this event (keep it for later)
            if (event.eventFilter.eventTag !== eventFilter.eventTag) {
                return true;
            }
            // Call the callback in the next event loop
            setTimeout(function () {
                event.listener.apply(_this, args);
            }, 0);
            result = true;
            // Reschedule it if it not "once"
            return !(event.once);
        });
        return result;
    };
    Contract.prototype.listenerCount = function (eventName) {
        if (!this.provider) {
            return 0;
        }
        var eventFilter = this._getEventFilter(eventName);
        return this._events.filter(function (event) {
            return event.eventFilter.eventTag === eventFilter.eventTag;
        }).length;
    };
    Contract.prototype.listeners = function (eventName) {
        if (!this.provider) {
            return [];
        }
        var eventFilter = this._getEventFilter(eventName);
        return this._events.filter(function (event) {
            return event.eventFilter.eventTag === eventFilter.eventTag;
        }).map(function (event) { return event.listener; });
    };
    Contract.prototype.removeAllListeners = function (eventName) {
        var _this = this;
        if (!this.provider) {
            return this;
        }
        var eventFilter = this._getEventFilter(eventName);
        this._events = this._events.filter(function (event) {
            // Keep all other events
            if (event.eventFilter.eventTag !== eventFilter.eventTag) {
                return true;
            }
            // Deregister this event from the provider and filter it out
            _this.provider.removeListener(event.eventFilter.filter, event.wrappedListener);
            return false;
        });
        return this;
    };
    Contract.prototype.removeListener = function (eventName, listener) {
        var _this = this;
        if (!this.provider) {
            return this;
        }
        var found = false;
        var eventFilter = this._getEventFilter(eventName);
        this._events = this._events.filter(function (event) {
            // Make sure this event and listener match
            if (event.eventFilter.eventTag !== eventFilter.eventTag) {
                return true;
            }
            if (event.listener !== listener) {
                return true;
            }
            _this.provider.removeListener(event.eventFilter.filter, event.wrappedListener);
            // Already found a matching event in a previous loop
            if (found) {
                return true;
            }
            // REmove this event (returning false filters us out)
            found = true;
            return false;
        });
        return this;
    };
    return Contract;
}());
exports.Contract = Contract;
var ContractFactory = /** @class */ (function () {
    function ContractFactory(contractInterface, bytecode, signer) {
        var bytecodeHex = null;
        // Allow the bytecode object from the Solidity compiler
        if (typeof (bytecode) === 'string') {
            bytecodeHex = bytecode;
        }
        else if (bytes_1.isArrayish(bytecode)) {
            bytecodeHex = bytes_1.hexlify(bytecode);
        }
        else if (typeof (bytecode.object) === 'string') {
            bytecodeHex = bytecode.object;
        }
        else {
            errors.throwError('bytecode must be a valid hex string', errors.INVALID_ARGUMENT, { arg: 'bytecode', value: bytecode });
        }
        // Make sure it is 0x prefixed
        if (bytecodeHex.substring(0, 2) !== '0x') {
            bytecodeHex = '0x' + bytecodeHex;
        }
        if (!bytes_1.isHexString(bytecodeHex)) {
            errors.throwError('bytecode must be a valid hex string', errors.INVALID_ARGUMENT, { arg: 'bytecode', value: bytecode });
        }
        if ((bytecodeHex.length % 2) !== 0) {
            errors.throwError('bytecode must be valid data (even length)', errors.INVALID_ARGUMENT, { arg: 'bytecode', value: bytecode });
        }
        properties_1.defineReadOnly(this, 'bytecode', bytecodeHex);
        if (interface_1.Interface.isInterface(contractInterface)) {
            properties_1.defineReadOnly(this, 'interface', contractInterface);
        }
        else {
            properties_1.defineReadOnly(this, 'interface', new interface_1.Interface(contractInterface));
        }
        if (signer && !abstract_signer_1.Signer.isSigner(signer)) {
            errors.throwError('invalid signer', errors.INVALID_ARGUMENT, { arg: 'signer', value: null });
        }
        properties_1.defineReadOnly(this, 'signer', signer || null);
    }
    ContractFactory.prototype.getDeployTransaction = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var tx = {};
        // If we have 1 additional argument, we allow transaction overrides
        if (args.length === this.interface.deployFunction.inputs.length + 1) {
            tx = properties_1.shallowCopy(args.pop());
            for (var key in tx) {
                if (!allowedTransactionKeys[key]) {
                    throw new Error('unknown transaction override ' + key);
                }
            }
        }
        // Do not allow these to be overridden in a deployment transaction
        ['data', 'from', 'to'].forEach(function (key) {
            if (tx[key] == null) {
                return;
            }
            errors.throwError('cannot override ' + key, errors.UNSUPPORTED_OPERATION, { operation: key });
        });
        // Make sure the call matches the constructor signature
        errors.checkArgumentCount(args.length, this.interface.deployFunction.inputs.length, ' in Contract constructor');
        // Set the data to the bytecode + the encoded constructor arguments
        tx.data = this.interface.deployFunction.encode(this.bytecode, args);
        return tx;
    };
    ContractFactory.prototype.deploy = function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        // Get the deployment transaction (with optional overrides)
        var tx = this.getDeployTransaction.apply(this, args);
        // Send the deployment transaction
        return this.signer.sendTransaction(tx).then(function (tx) {
            var contract = new Contract(address_1.getContractAddress(tx), _this.interface, _this.signer);
            properties_1.defineReadOnly(contract, 'deployTransaction', tx);
            return contract;
        });
    };
    ContractFactory.prototype.attach = function (address) {
        return new Contract(address, this.interface, this.signer);
    };
    ContractFactory.prototype.connect = function (signer) {
        return new ContractFactory(this.interface, this.bytecode, signer);
    };
    ContractFactory.fromSolidity = function (compilerOutput, signer) {
        if (compilerOutput == null) {
            errors.throwError('missing compiler output', errors.MISSING_ARGUMENT, { argument: 'compilerOutput' });
        }
        if (typeof (compilerOutput) === 'string') {
            compilerOutput = JSON.parse(compilerOutput);
        }
        var abi = compilerOutput.abi;
        var bytecode = null;
        if (compilerOutput.bytecode) {
            bytecode = compilerOutput.bytecode;
        }
        else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
            bytecode = compilerOutput.evm.bytecode;
        }
        return new ContractFactory(abi, bytecode, signer);
    };
    return ContractFactory;
}());
exports.ContractFactory = ContractFactory;


/***/ }),
/* 110 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 111 */
/***/ (function(module, exports) {

/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.5.7
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2016
 * @license MIT
 */
/*jslint bitwise: true */
(function () {
  'use strict';

  var root = typeof window === 'object' ? window : {};
  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
  if (NODE_JS) {
    root = global;
  }
  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;
  var HEX_CHARS = '0123456789abcdef'.split('');
  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
  var KECCAK_PADDING = [1, 256, 65536, 16777216];
  var PADDING = [6, 1536, 393216, 100663296];
  var SHIFT = [0, 8, 16, 24];
  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
            0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
            2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
            2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
            2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
  var BITS = [224, 256, 384, 512];
  var SHAKE_BITS = [128, 256];
  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array'];

  var createOutputMethod = function (bits, padding, outputType) {
    return function (message) {
      return new Keccak(bits, padding, bits).update(message)[outputType]();
    };
  };

  var createShakeOutputMethod = function (bits, padding, outputType) {
    return function (message, outputBits) {
      return new Keccak(bits, padding, outputBits).update(message)[outputType]();
    };
  };

  var createMethod = function (bits, padding) {
    var method = createOutputMethod(bits, padding, 'hex');
    method.create = function () {
      return new Keccak(bits, padding, bits);
    };
    method.update = function (message) {
      return method.create().update(message);
    };
    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createOutputMethod(bits, padding, type);
    }
    return method;
  };

  var createShakeMethod = function (bits, padding) {
    var method = createShakeOutputMethod(bits, padding, 'hex');
    method.create = function (outputBits) {
      return new Keccak(bits, padding, outputBits);
    };
    method.update = function (message, outputBits) {
      return method.create(outputBits).update(message);
    };
    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createShakeOutputMethod(bits, padding, type);
    }
    return method;
  };

  var algorithms = [
    {name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod},
    {name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod},
    {name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod}
  ];

  var methods = {}, methodNames = [];

  for (var i = 0; i < algorithms.length; ++i) {
    var algorithm = algorithms[i];
    var bits  = algorithm.bits;
    for (var j = 0; j < bits.length; ++j) {
      var methodName = algorithm.name +'_' + bits[j];
      methodNames.push(methodName);
      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
    }
  }

  function Keccak(bits, padding, outputBits) {
    this.blocks = [];
    this.s = [];
    this.padding = padding;
    this.outputBits = outputBits;
    this.reset = true;
    this.block = 0;
    this.start = 0;
    this.blockCount = (1600 - (bits << 1)) >> 5;
    this.byteCount = this.blockCount << 2;
    this.outputBlocks = outputBits >> 5;
    this.extraBytes = (outputBits & 31) >> 3;

    for (var i = 0; i < 50; ++i) {
      this.s[i] = 0;
    }
  }

  Keccak.prototype.update = function (message) {
    var notString = typeof message !== 'string';
    if (notString && message.constructor === ArrayBuffer) {
      message = new Uint8Array(message);
    }
    var length = message.length, blocks = this.blocks, byteCount = this.byteCount,
      blockCount = this.blockCount, index = 0, s = this.s, i, code;

    while (index < length) {
      if (this.reset) {
        this.reset = false;
        blocks[0] = this.block;
        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }
      if (notString) {
        for (i = this.start; index < length && i < byteCount; ++index) {
          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = this.start; index < length && i < byteCount; ++index) {
          code = message.charCodeAt(index);
          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          }
        }
      }
      this.lastByteIndex = i;
      if (i >= byteCount) {
        this.start = i - byteCount;
        this.block = blocks[blockCount];
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);
        this.reset = true;
      } else {
        this.start = i;
      }
    }
    return this;
  };

  Keccak.prototype.finalize = function () {
    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
    blocks[i >> 2] |= this.padding[i & 3];
    if (this.lastByteIndex === this.byteCount) {
      blocks[0] = blocks[blockCount];
      for (i = 1; i < blockCount + 1; ++i) {
        blocks[i] = 0;
      }
    }
    blocks[blockCount - 1] |= 0x80000000;
    for (i = 0; i < blockCount; ++i) {
      s[i] ^= blocks[i];
    }
    f(s);
  };

  Keccak.prototype.toString = Keccak.prototype.hex = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
        extraBytes = this.extraBytes, i = 0, j = 0;
    var hex = '', block;
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        block = s[i];
        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
               HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
               HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
               HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
      }
      if (j % blockCount === 0) {
        f(s);
        i = 0;
      }
    }
    if (extraBytes) {
      block = s[i];
      if (extraBytes > 0) {
        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
      }
      if (extraBytes > 1) {
        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
      }
      if (extraBytes > 2) {
        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
      }
    }
    return hex;
  };

  Keccak.prototype.arrayBuffer = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
        extraBytes = this.extraBytes, i = 0, j = 0;
    var bytes = this.outputBits >> 3;
    var buffer;
    if (extraBytes) {
      buffer = new ArrayBuffer((outputBlocks + 1) << 2);
    } else {
      buffer = new ArrayBuffer(bytes);
    }
    var array = new Uint32Array(buffer);
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        array[j] = s[i];
      }
      if (j % blockCount === 0) {
        f(s);
      }
    }
    if (extraBytes) {
      array[i] = s[i];
      buffer = buffer.slice(0, bytes);
    }
    return buffer;
  };

  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

  Keccak.prototype.digest = Keccak.prototype.array = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
        extraBytes = this.extraBytes, i = 0, j = 0;
    var array = [], offset, block;
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        offset = j << 2;
        block = s[i];
        array[offset] = block & 0xFF;
        array[offset + 1] = (block >> 8) & 0xFF;
        array[offset + 2] = (block >> 16) & 0xFF;
        array[offset + 3] = (block >> 24) & 0xFF;
      }
      if (j % blockCount === 0) {
        f(s);
      }
    }
    if (extraBytes) {
      offset = j << 2;
      block = s[i];
      if (extraBytes > 0) {
        array[offset] = block & 0xFF;
      }
      if (extraBytes > 1) {
        array[offset + 1] = (block >> 8) & 0xFF;
      }
      if (extraBytes > 2) {
        array[offset + 2] = (block >> 16) & 0xFF;
      }
    }
    return array;
  };

  var f = function (s) {
    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
        b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
        b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
        b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
    for (n = 0; n < 48; n += 2) {
      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

      h = c8 ^ ((c2 << 1) | (c3 >>> 31));
      l = c9 ^ ((c3 << 1) | (c2 >>> 31));
      s[0] ^= h;
      s[1] ^= l;
      s[10] ^= h;
      s[11] ^= l;
      s[20] ^= h;
      s[21] ^= l;
      s[30] ^= h;
      s[31] ^= l;
      s[40] ^= h;
      s[41] ^= l;
      h = c0 ^ ((c4 << 1) | (c5 >>> 31));
      l = c1 ^ ((c5 << 1) | (c4 >>> 31));
      s[2] ^= h;
      s[3] ^= l;
      s[12] ^= h;
      s[13] ^= l;
      s[22] ^= h;
      s[23] ^= l;
      s[32] ^= h;
      s[33] ^= l;
      s[42] ^= h;
      s[43] ^= l;
      h = c2 ^ ((c6 << 1) | (c7 >>> 31));
      l = c3 ^ ((c7 << 1) | (c6 >>> 31));
      s[4] ^= h;
      s[5] ^= l;
      s[14] ^= h;
      s[15] ^= l;
      s[24] ^= h;
      s[25] ^= l;
      s[34] ^= h;
      s[35] ^= l;
      s[44] ^= h;
      s[45] ^= l;
      h = c4 ^ ((c8 << 1) | (c9 >>> 31));
      l = c5 ^ ((c9 << 1) | (c8 >>> 31));
      s[6] ^= h;
      s[7] ^= l;
      s[16] ^= h;
      s[17] ^= l;
      s[26] ^= h;
      s[27] ^= l;
      s[36] ^= h;
      s[37] ^= l;
      s[46] ^= h;
      s[47] ^= l;
      h = c6 ^ ((c0 << 1) | (c1 >>> 31));
      l = c7 ^ ((c1 << 1) | (c0 >>> 31));
      s[8] ^= h;
      s[9] ^= l;
      s[18] ^= h;
      s[19] ^= l;
      s[28] ^= h;
      s[29] ^= l;
      s[38] ^= h;
      s[39] ^= l;
      s[48] ^= h;
      s[49] ^= l;

      b0 = s[0];
      b1 = s[1];
      b32 = (s[11] << 4) | (s[10] >>> 28);
      b33 = (s[10] << 4) | (s[11] >>> 28);
      b14 = (s[20] << 3) | (s[21] >>> 29);
      b15 = (s[21] << 3) | (s[20] >>> 29);
      b46 = (s[31] << 9) | (s[30] >>> 23);
      b47 = (s[30] << 9) | (s[31] >>> 23);
      b28 = (s[40] << 18) | (s[41] >>> 14);
      b29 = (s[41] << 18) | (s[40] >>> 14);
      b20 = (s[2] << 1) | (s[3] >>> 31);
      b21 = (s[3] << 1) | (s[2] >>> 31);
      b2 = (s[13] << 12) | (s[12] >>> 20);
      b3 = (s[12] << 12) | (s[13] >>> 20);
      b34 = (s[22] << 10) | (s[23] >>> 22);
      b35 = (s[23] << 10) | (s[22] >>> 22);
      b16 = (s[33] << 13) | (s[32] >>> 19);
      b17 = (s[32] << 13) | (s[33] >>> 19);
      b48 = (s[42] << 2) | (s[43] >>> 30);
      b49 = (s[43] << 2) | (s[42] >>> 30);
      b40 = (s[5] << 30) | (s[4] >>> 2);
      b41 = (s[4] << 30) | (s[5] >>> 2);
      b22 = (s[14] << 6) | (s[15] >>> 26);
      b23 = (s[15] << 6) | (s[14] >>> 26);
      b4 = (s[25] << 11) | (s[24] >>> 21);
      b5 = (s[24] << 11) | (s[25] >>> 21);
      b36 = (s[34] << 15) | (s[35] >>> 17);
      b37 = (s[35] << 15) | (s[34] >>> 17);
      b18 = (s[45] << 29) | (s[44] >>> 3);
      b19 = (s[44] << 29) | (s[45] >>> 3);
      b10 = (s[6] << 28) | (s[7] >>> 4);
      b11 = (s[7] << 28) | (s[6] >>> 4);
      b42 = (s[17] << 23) | (s[16] >>> 9);
      b43 = (s[16] << 23) | (s[17] >>> 9);
      b24 = (s[26] << 25) | (s[27] >>> 7);
      b25 = (s[27] << 25) | (s[26] >>> 7);
      b6 = (s[36] << 21) | (s[37] >>> 11);
      b7 = (s[37] << 21) | (s[36] >>> 11);
      b38 = (s[47] << 24) | (s[46] >>> 8);
      b39 = (s[46] << 24) | (s[47] >>> 8);
      b30 = (s[8] << 27) | (s[9] >>> 5);
      b31 = (s[9] << 27) | (s[8] >>> 5);
      b12 = (s[18] << 20) | (s[19] >>> 12);
      b13 = (s[19] << 20) | (s[18] >>> 12);
      b44 = (s[29] << 7) | (s[28] >>> 25);
      b45 = (s[28] << 7) | (s[29] >>> 25);
      b26 = (s[38] << 8) | (s[39] >>> 24);
      b27 = (s[39] << 8) | (s[38] >>> 24);
      b8 = (s[48] << 14) | (s[49] >>> 18);
      b9 = (s[49] << 14) | (s[48] >>> 18);

      s[0] = b0 ^ (~b2 & b4);
      s[1] = b1 ^ (~b3 & b5);
      s[10] = b10 ^ (~b12 & b14);
      s[11] = b11 ^ (~b13 & b15);
      s[20] = b20 ^ (~b22 & b24);
      s[21] = b21 ^ (~b23 & b25);
      s[30] = b30 ^ (~b32 & b34);
      s[31] = b31 ^ (~b33 & b35);
      s[40] = b40 ^ (~b42 & b44);
      s[41] = b41 ^ (~b43 & b45);
      s[2] = b2 ^ (~b4 & b6);
      s[3] = b3 ^ (~b5 & b7);
      s[12] = b12 ^ (~b14 & b16);
      s[13] = b13 ^ (~b15 & b17);
      s[22] = b22 ^ (~b24 & b26);
      s[23] = b23 ^ (~b25 & b27);
      s[32] = b32 ^ (~b34 & b36);
      s[33] = b33 ^ (~b35 & b37);
      s[42] = b42 ^ (~b44 & b46);
      s[43] = b43 ^ (~b45 & b47);
      s[4] = b4 ^ (~b6 & b8);
      s[5] = b5 ^ (~b7 & b9);
      s[14] = b14 ^ (~b16 & b18);
      s[15] = b15 ^ (~b17 & b19);
      s[24] = b24 ^ (~b26 & b28);
      s[25] = b25 ^ (~b27 & b29);
      s[34] = b34 ^ (~b36 & b38);
      s[35] = b35 ^ (~b37 & b39);
      s[44] = b44 ^ (~b46 & b48);
      s[45] = b45 ^ (~b47 & b49);
      s[6] = b6 ^ (~b8 & b0);
      s[7] = b7 ^ (~b9 & b1);
      s[16] = b16 ^ (~b18 & b10);
      s[17] = b17 ^ (~b19 & b11);
      s[26] = b26 ^ (~b28 & b20);
      s[27] = b27 ^ (~b29 & b21);
      s[36] = b36 ^ (~b38 & b30);
      s[37] = b37 ^ (~b39 & b31);
      s[46] = b46 ^ (~b48 & b40);
      s[47] = b47 ^ (~b49 & b41);
      s[8] = b8 ^ (~b0 & b2);
      s[9] = b9 ^ (~b1 & b3);
      s[18] = b18 ^ (~b10 & b12);
      s[19] = b19 ^ (~b11 & b13);
      s[28] = b28 ^ (~b20 & b22);
      s[29] = b29 ^ (~b21 & b23);
      s[38] = b38 ^ (~b30 & b32);
      s[39] = b39 ^ (~b31 & b33);
      s[48] = b48 ^ (~b40 & b42);
      s[49] = b49 ^ (~b41 & b43);

      s[0] ^= RC[n];
      s[1] ^= RC[n + 1];
    }
  };

  if (COMMON_JS) {
    module.exports = methods;
  } else {
    for (var i = 0; i < methodNames.length; ++i) {
      root[methodNames[i]] = methods[methodNames[i]];
    }
  }
})();


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var bytes_1 = __webpack_require__(5);
var hash_1 = __webpack_require__(28);
var hdnode_1 = __webpack_require__(38);
var json_wallet_1 = __webpack_require__(80);
var keccak256_1 = __webpack_require__(19);
var properties_1 = __webpack_require__(7);
var random_bytes_1 = __webpack_require__(54);
var secretStorage = __importStar(__webpack_require__(136));
var signing_key_1 = __webpack_require__(55);
var transaction_1 = __webpack_require__(42);
// Imported Abstracts
var abstract_signer_1 = __webpack_require__(37);
var abstract_provider_1 = __webpack_require__(33);
var errors = __importStar(__webpack_require__(4));
var Wallet = /** @class */ (function (_super) {
    __extends(Wallet, _super);
    function Wallet(privateKey, provider) {
        var _this = _super.call(this) || this;
        errors.checkNew(_this, Wallet);
        // Make sure we have a valid signing key
        if (signing_key_1.SigningKey.isSigningKey(privateKey)) {
            properties_1.defineReadOnly(_this, 'signingKey', privateKey);
        }
        else {
            properties_1.defineReadOnly(_this, 'signingKey', new signing_key_1.SigningKey(privateKey));
        }
        properties_1.defineReadOnly(_this, 'provider', provider);
        return _this;
    }
    Object.defineProperty(Wallet.prototype, "address", {
        get: function () { return this.signingKey.address; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Wallet.prototype, "mnemonic", {
        get: function () { return this.signingKey.mnemonic; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Wallet.prototype, "path", {
        get: function () { return this.signingKey.path; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Wallet.prototype, "privateKey", {
        get: function () { return this.signingKey.privateKey; },
        enumerable: true,
        configurable: true
    });
    /**
     *  Create a new instance of this Wallet connected to provider.
     */
    Wallet.prototype.connect = function (provider) {
        if (!(abstract_provider_1.Provider.isProvider(provider))) {
            errors.throwError('invalid provider', errors.INVALID_ARGUMENT, { argument: 'provider', value: provider });
        }
        return new Wallet(this.signingKey, provider);
    };
    Wallet.prototype.getAddress = function () {
        return Promise.resolve(this.address);
    };
    Wallet.prototype.sign = function (transaction) {
        var _this = this;
        return properties_1.resolveProperties(transaction).then(function (tx) {
            var rawTx = transaction_1.serialize(tx);
            var signature = _this.signingKey.signDigest(keccak256_1.keccak256(rawTx));
            return transaction_1.serialize(tx, signature);
        });
    };
    Wallet.prototype.signMessage = function (message) {
        return Promise.resolve(bytes_1.joinSignature(this.signingKey.signDigest(hash_1.hashMessage(message))));
    };
    Wallet.prototype.getBalance = function (blockTag) {
        if (!this.provider) {
            throw new Error('missing provider');
        }
        return this.provider.getBalance(this.address, blockTag);
    };
    Wallet.prototype.getTransactionCount = function (blockTag) {
        if (!this.provider) {
            throw new Error('missing provider');
        }
        return this.provider.getTransactionCount(this.address, blockTag);
    };
    Wallet.prototype.sendTransaction = function (transaction) {
        var _this = this;
        if (!this.provider) {
            throw new Error('missing provider');
        }
        if (transaction.nonce == null) {
            transaction = properties_1.shallowCopy(transaction);
            transaction.nonce = this.getTransactionCount("pending");
        }
        return transaction_1.populateTransaction(transaction, this.provider, this.address).then(function (tx) {
            return _this.sign(tx).then(function (signedTransaction) {
                return _this.provider.sendTransaction(signedTransaction);
            });
        });
    };
    Wallet.prototype.encrypt = function (password, options, progressCallback) {
        if (typeof (options) === 'function' && !progressCallback) {
            progressCallback = options;
            options = {};
        }
        if (progressCallback && typeof (progressCallback) !== 'function') {
            throw new Error('invalid callback');
        }
        if (!options) {
            options = {};
        }
        if (this.mnemonic) {
            // Make sure we don't accidentally bubble the mnemonic up the call-stack
            options = properties_1.shallowCopy(options);
            // Set the mnemonic and path
            options.mnemonic = this.mnemonic;
            options.path = this.path;
        }
        return secretStorage.encrypt(this.privateKey, password, options, progressCallback);
    };
    /**
     *  Static methods to create Wallet instances.
     */
    Wallet.createRandom = function (options) {
        var entropy = random_bytes_1.randomBytes(16);
        if (!options) {
            options = {};
        }
        if (options.extraEntropy) {
            entropy = bytes_1.arrayify(keccak256_1.keccak256(bytes_1.concat([entropy, options.extraEntropy])).substring(0, 34));
        }
        var mnemonic = hdnode_1.entropyToMnemonic(entropy, options.locale);
        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);
    };
    Wallet.fromEncryptedJson = function (json, password, progressCallback) {
        if (json_wallet_1.isCrowdsaleWallet(json)) {
            try {
                if (progressCallback) {
                    progressCallback(0);
                }
                var privateKey = secretStorage.decryptCrowdsale(json, password);
                if (progressCallback) {
                    progressCallback(1);
                }
                return Promise.resolve(new Wallet(privateKey));
            }
            catch (error) {
                return Promise.reject(error);
            }
        }
        else if (json_wallet_1.isSecretStorageWallet(json)) {
            return secretStorage.decrypt(json, password, progressCallback).then(function (signingKey) {
                return new Wallet(signingKey);
            });
        }
        return Promise.reject('invalid wallet JSON');
    };
    Wallet.fromMnemonic = function (mnemonic, path, wordlist) {
        if (!path) {
            path = hdnode_1.defaultPath;
        }
        return new Wallet(hdnode_1.fromMnemonic(mnemonic, wordlist).derivePath(path));
    };
    return Wallet;
}(abstract_signer_1.Signer));
exports.Wallet = Wallet;


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * var basex = require('base-x');
 *
 * This implementation is heavily based on base-x. The main reason to
 * deviate was to prevent the dependency of Buffer.
 *
 * Contributors:
 *
 * base-x encoding
 * Forked from https://github.com/cryptocoinjs/bs58
 * Originally written by Mike Hearn for BitcoinJ
 * Copyright (c) 2011 Google Inc
 * Ported to JavaScript by Stefan Thomas
 * Merged Buffer refactorings from base58-native by Stephen Pair
 * Copyright (c) 2013 BitPay Inc
 *
 * The MIT License (MIT)
 *
 * Copyright base-x contributors (c) 2016
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var bytes_1 = __webpack_require__(5);
var properties_1 = __webpack_require__(7);
var BaseX = /** @class */ (function () {
    function BaseX(alphabet) {
        properties_1.defineReadOnly(this, "alphabet", alphabet);
        properties_1.defineReadOnly(this, "base", alphabet.length);
        properties_1.defineReadOnly(this, "_alphabetMap", {});
        properties_1.defineReadOnly(this, "_leader", alphabet.charAt(0));
        // pre-compute lookup table
        for (var i = 0; i < alphabet.length; i++) {
            this._alphabetMap[alphabet.charAt(i)] = i;
        }
    }
    BaseX.prototype.encode = function (value) {
        var source = bytes_1.arrayify(value);
        if (source.length === 0) {
            return '';
        }
        var digits = [0];
        for (var i = 0; i < source.length; ++i) {
            var carry = source[i];
            for (var j = 0; j < digits.length; ++j) {
                carry += digits[j] << 8;
                digits[j] = carry % this.base;
                carry = (carry / this.base) | 0;
            }
            while (carry > 0) {
                digits.push(carry % this.base);
                carry = (carry / this.base) | 0;
            }
        }
        var string = '';
        // deal with leading zeros
        for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) {
            string += this._leader;
        }
        // convert digits to a string
        for (var q = digits.length - 1; q >= 0; --q) {
            string += this.alphabet[digits[q]];
        }
        return string;
    };
    BaseX.prototype.decode = function (value) {
        if (typeof (value) !== 'string') {
            throw new TypeError('Expected String');
        }
        var bytes = [];
        if (value.length === 0) {
            return new Uint8Array(bytes);
        }
        bytes.push(0);
        for (var i = 0; i < value.length; i++) {
            var byte = this._alphabetMap[value[i]];
            if (byte === undefined) {
                throw new Error('Non-base' + this.base + ' character');
            }
            var carry = byte;
            for (var j = 0; j < bytes.length; ++j) {
                carry += bytes[j] * this.base;
                bytes[j] = carry & 0xff;
                carry >>= 8;
            }
            while (carry > 0) {
                bytes.push(carry & 0xff);
                carry >>= 8;
            }
        }
        // deal with leading zeros
        for (var k = 0; value[k] === this._leader && k < value.length - 1; ++k) {
            bytes.push(0);
        }
        return bytes_1.arrayify(new Uint8Array(bytes.reverse()));
    };
    return BaseX;
}());
exports.BaseX = BaseX;
var Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
exports.Base32 = Base32;
var Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
exports.Base58 = Base58;
//console.log(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj"))
//console.log(Base58.encode(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj")))


/***/ }),
/* 114 */
/***/ (function(module) {

module.exports = JSON.parse("{\"_args\":[[\"elliptic@6.3.3\",\"/Users/user/code/oikos/oikos-js\"]],\"_from\":\"elliptic@6.3.3\",\"_id\":\"elliptic@6.3.3\",\"_inBundle\":false,\"_integrity\":\"sha1-VILZZG1UvLif19mU/J4ulWiHbj8=\",\"_location\":\"/ethers/elliptic\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"version\",\"registry\":true,\"raw\":\"elliptic@6.3.3\",\"name\":\"elliptic\",\"escapedName\":\"elliptic\",\"rawSpec\":\"6.3.3\",\"saveSpec\":null,\"fetchSpec\":\"6.3.3\"},\"_requiredBy\":[\"/ethers\"],\"_resolved\":\"https://registry.npmjs.org/elliptic/-/elliptic-6.3.3.tgz\",\"_spec\":\"6.3.3\",\"_where\":\"/Users/user/code/oikos/oikos-js\",\"author\":{\"name\":\"Fedor Indutny\",\"email\":\"fedor@indutny.com\"},\"bugs\":{\"url\":\"https://github.com/indutny/elliptic/issues\"},\"dependencies\":{\"bn.js\":\"^4.4.0\",\"brorand\":\"^1.0.1\",\"hash.js\":\"^1.0.0\",\"inherits\":\"^2.0.1\"},\"description\":\"EC cryptography\",\"devDependencies\":{\"brfs\":\"^1.4.3\",\"coveralls\":\"^2.11.3\",\"grunt\":\"^0.4.5\",\"grunt-browserify\":\"^5.0.0\",\"grunt-cli\":\"^1.2.0\",\"grunt-contrib-connect\":\"^1.0.0\",\"grunt-contrib-copy\":\"^1.0.0\",\"grunt-contrib-uglify\":\"^1.0.1\",\"grunt-mocha-istanbul\":\"^3.0.1\",\"grunt-saucelabs\":\"^8.6.2\",\"istanbul\":\"^0.4.2\",\"jscs\":\"^2.9.0\",\"jshint\":\"^2.6.0\",\"mocha\":\"^2.1.0\"},\"files\":[\"lib\"],\"homepage\":\"https://github.com/indutny/elliptic\",\"keywords\":[\"EC\",\"Elliptic\",\"curve\",\"Cryptography\"],\"license\":\"MIT\",\"main\":\"lib/elliptic.js\",\"name\":\"elliptic\",\"repository\":{\"type\":\"git\",\"url\":\"git+ssh://git@github.com/indutny/elliptic.git\"},\"scripts\":{\"jscs\":\"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js\",\"jshint\":\"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js\",\"lint\":\"npm run jscs && npm run jshint\",\"test\":\"npm run lint && npm run unit\",\"unit\":\"istanbul test _mocha --reporter=spec test/index.js\",\"version\":\"grunt dist && git add dist/\"},\"version\":\"6.3.3\"}");

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;
var BN = __webpack_require__(8);

utils.assert = function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
};

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (!enc) {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  } else if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

// Represent num in a w-NAF form
function getNAF(num, w) {
  var naf = [];
  var ws = 1 << (w + 1);
  var k = num.clone();
  while (k.cmpn(1) >= 0) {
    var z;
    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }
    naf.push(z);

    // Optimization, shift by word if possible
    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
    for (var i = 1; i < shift; i++)
      naf.push(0);
    k.iushrn(shift);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
           this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                     bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;



/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(40);
var elliptic = __webpack_require__(12);
var utils = elliptic.utils;
var assert = utils.assert;

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this.reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc);
  var nonce = utils.toArray(options.nonce, options.nonceEnc);
  var pers = utils.toArray(options.pers, options.persEnc);
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this.reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toBuffer(entropy, entropyEnc);
  add = utils.toBuffer(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this.reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this.reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc);
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this.reseed++;
  return utils.encode(res, enc);
};


/***/ }),
/* 117 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.sha1 = __webpack_require__(119);
exports.sha224 = __webpack_require__(120);
exports.sha256 = __webpack_require__(78);
exports.sha384 = __webpack_require__(121);
exports.sha512 = __webpack_require__(79);


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(17);
var common = __webpack_require__(34);
var shaCommon = __webpack_require__(77);

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(17);
var SHA256 = __webpack_require__(78);

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};



/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(17);

var SHA512 = __webpack_require__(79);

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(17);
var common = __webpack_require__(34);

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(17);
var assert = __webpack_require__(13);

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(8);
var elliptic = __webpack_require__(12);
var utils = elliptic.utils;
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len,
                                                       jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
                          bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = __webpack_require__(41);
var elliptic = __webpack_require__(12);
var BN = __webpack_require__(8);
var inherits = __webpack_require__(22);
var Base = curve.base;

var assert = elliptic.utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);

  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
  return false;
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = __webpack_require__(41);
var BN = __webpack_require__(8);
var inherits = __webpack_require__(22);
var Base = curve.base;

var elliptic = __webpack_require__(12);
var utils = elliptic.utils;

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = __webpack_require__(41);
var elliptic = __webpack_require__(12);
var BN = __webpack_require__(8);
var inherits = __webpack_require__(22);
var Base = curve.base;

var assert = elliptic.utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - 1) / (d y^2 + 1)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.one);
  var rhs = y2.redMul(this.d).redAdd(this.one);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
         this.y.cmp(this.z) === 0;
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
  return false;
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curves = exports;

var hash = __webpack_require__(40);
var elliptic = __webpack_require__(12);

var assert = elliptic.utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new elliptic.curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new elliptic.curve.edwards(options);
  else
    this.curve = new elliptic.curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
  ]
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = __webpack_require__(129);
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});


/***/ }),
/* 129 */
/***/ (function(module, exports) {

module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(8);
var elliptic = __webpack_require__(12);
var utils = elliptic.utils;
var assert = utils.assert;

var KeyPair = __webpack_require__(131);
var Signature = __webpack_require__(132);

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = elliptic.curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof elliptic.curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    pers: options.pers,
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ?
        options.k(iter) :
        new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(8);
var elliptic = __webpack_require__(12);
var utils = elliptic.utils;
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(8);

var elliptic = __webpack_require__(12);
var utils = elliptic.utils;
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }
  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0 && (r[1] & 0x80)) {
    r = r.slice(1);
  }
  if (s[0] === 0 && (s[1] & 0x80)) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(40);
var elliptic = __webpack_require__(12);
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = __webpack_require__(134);
var Signature = __webpack_require__(135);

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  var curve = elliptic.curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
               .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var elliptic = __webpack_require__(12);
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(8);
var elliptic = __webpack_require__(12);
var utils = elliptic.utils;
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var aes_js_1 = __importDefault(__webpack_require__(137));
var scrypt_js_1 = __importDefault(__webpack_require__(138));
var uuid_1 = __importDefault(__webpack_require__(139));
var signing_key_1 = __webpack_require__(55);
var HDNode = __importStar(__webpack_require__(38));
var address_1 = __webpack_require__(16);
var bytes_1 = __webpack_require__(5);
var pbkdf2_1 = __webpack_require__(74);
var keccak256_1 = __webpack_require__(19);
var utf8_1 = __webpack_require__(9);
var random_bytes_1 = __webpack_require__(54);
function looseArrayify(hexString) {
    if (typeof (hexString) === 'string' && hexString.substring(0, 2) !== '0x') {
        hexString = '0x' + hexString;
    }
    return bytes_1.arrayify(hexString);
}
function zpad(value, length) {
    value = String(value);
    while (value.length < length) {
        value = '0' + value;
    }
    return value;
}
function getPassword(password) {
    if (typeof (password) === 'string') {
        return utf8_1.toUtf8Bytes(password, utf8_1.UnicodeNormalizationForm.NFKC);
    }
    return bytes_1.arrayify(password);
}
// Search an Object and its children recursively, caselessly.
function searchPath(object, path) {
    var currentChild = object;
    var comps = path.toLowerCase().split('/');
    for (var i = 0; i < comps.length; i++) {
        // Search for a child object with a case-insensitive matching key
        var matchingChild = null;
        for (var key in currentChild) {
            if (key.toLowerCase() === comps[i]) {
                matchingChild = currentChild[key];
                break;
            }
        }
        // Didn't find one. :'(
        if (matchingChild === null) {
            return null;
        }
        // Now check this child...
        currentChild = matchingChild;
    }
    return currentChild;
}
// @TODO: Make a type for string or arrayish
// See: https://github.com/ethereum/pyethsaletool
function decryptCrowdsale(json, password) {
    var data = JSON.parse(json);
    password = getPassword(password);
    // Ethereum Address
    var ethaddr = address_1.getAddress(searchPath(data, 'ethaddr'));
    // Encrypted Seed
    var encseed = looseArrayify(searchPath(data, 'encseed'));
    if (!encseed || (encseed.length % 16) !== 0) {
        throw new Error('invalid encseed');
    }
    var key = pbkdf2_1.pbkdf2(password, password, 2000, 32, 'sha256').slice(0, 16);
    var iv = encseed.slice(0, 16);
    var encryptedSeed = encseed.slice(16);
    // Decrypt the seed
    var aesCbc = new aes_js_1.default.ModeOfOperation.cbc(key, iv);
    var seed = bytes_1.arrayify(aesCbc.decrypt(encryptedSeed));
    seed = aes_js_1.default.padding.pkcs7.strip(seed);
    // This wallet format is weird... Convert the binary encoded hex to a string.
    var seedHex = '';
    for (var i = 0; i < seed.length; i++) {
        seedHex += String.fromCharCode(seed[i]);
    }
    var seedHexBytes = utf8_1.toUtf8Bytes(seedHex);
    var signingKey = new signing_key_1.SigningKey(keccak256_1.keccak256(seedHexBytes));
    if (signingKey.address !== ethaddr) {
        throw new Error('corrupt crowdsale wallet');
    }
    return signingKey;
}
exports.decryptCrowdsale = decryptCrowdsale;
//@TODO: string or arrayish
function decrypt(json, password, progressCallback) {
    var data = JSON.parse(json);
    var passwordBytes = getPassword(password);
    var decrypt = function (key, ciphertext) {
        var cipher = searchPath(data, 'crypto/cipher');
        if (cipher === 'aes-128-ctr') {
            var iv = looseArrayify(searchPath(data, 'crypto/cipherparams/iv'));
            var counter = new aes_js_1.default.Counter(iv);
            var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(key, counter);
            return bytes_1.arrayify(aesCtr.decrypt(ciphertext));
        }
        return null;
    };
    var computeMAC = function (derivedHalf, ciphertext) {
        return keccak256_1.keccak256(bytes_1.concat([derivedHalf, ciphertext]));
    };
    var getSigningKey = function (key, reject) {
        var ciphertext = looseArrayify(searchPath(data, 'crypto/ciphertext'));
        var computedMAC = bytes_1.hexlify(computeMAC(key.slice(16, 32), ciphertext)).substring(2);
        if (computedMAC !== searchPath(data, 'crypto/mac').toLowerCase()) {
            reject(new Error('invalid password'));
            return null;
        }
        var privateKey = decrypt(key.slice(0, 16), ciphertext);
        var mnemonicKey = key.slice(32, 64);
        if (!privateKey) {
            reject(new Error('unsupported cipher'));
            return null;
        }
        var signingKey = new signing_key_1.SigningKey(privateKey);
        if (signingKey.address !== address_1.getAddress(data.address)) {
            reject(new Error('address mismatch'));
            return null;
        }
        // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase
        if (searchPath(data, 'x-ethers/version') === '0.1') {
            var mnemonicCiphertext = looseArrayify(searchPath(data, 'x-ethers/mnemonicCiphertext'));
            var mnemonicIv = looseArrayify(searchPath(data, 'x-ethers/mnemonicCounter'));
            var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);
            var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
            var path = searchPath(data, 'x-ethers/path') || HDNode.defaultPath;
            var entropy = bytes_1.arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));
            var mnemonic = HDNode.entropyToMnemonic(entropy);
            var node = HDNode.fromMnemonic(mnemonic).derivePath(path);
            if (node.privateKey != bytes_1.hexlify(privateKey)) {
                reject(new Error('mnemonic mismatch'));
                return null;
            }
            signingKey = new signing_key_1.SigningKey(node);
        }
        return signingKey;
    };
    return new Promise(function (resolve, reject) {
        var kdf = searchPath(data, 'crypto/kdf');
        if (kdf && typeof (kdf) === 'string') {
            if (kdf.toLowerCase() === 'scrypt') {
                var salt = looseArrayify(searchPath(data, 'crypto/kdfparams/salt'));
                var N = parseInt(searchPath(data, 'crypto/kdfparams/n'));
                var r = parseInt(searchPath(data, 'crypto/kdfparams/r'));
                var p = parseInt(searchPath(data, 'crypto/kdfparams/p'));
                if (!N || !r || !p) {
                    reject(new Error('unsupported key-derivation function parameters'));
                    return;
                }
                // Make sure N is a power of 2
                if ((N & (N - 1)) !== 0) {
                    reject(new Error('unsupported key-derivation function parameter value for N'));
                    return;
                }
                var dkLen = parseInt(searchPath(data, 'crypto/kdfparams/dklen'));
                if (dkLen !== 32) {
                    reject(new Error('unsupported key-derivation derived-key length'));
                    return;
                }
                if (progressCallback) {
                    progressCallback(0);
                }
                scrypt_js_1.default(passwordBytes, salt, N, r, p, 64, function (error, progress, key) {
                    if (error) {
                        error.progress = progress;
                        reject(error);
                    }
                    else if (key) {
                        key = bytes_1.arrayify(key);
                        var signingKey = getSigningKey(key, reject);
                        if (!signingKey) {
                            return;
                        }
                        if (progressCallback) {
                            progressCallback(1);
                        }
                        resolve(signingKey);
                    }
                    else if (progressCallback) {
                        return progressCallback(progress);
                    }
                });
            }
            else if (kdf.toLowerCase() === 'pbkdf2') {
                var salt = looseArrayify(searchPath(data, 'crypto/kdfparams/salt'));
                var prfFunc = null;
                var prf = searchPath(data, 'crypto/kdfparams/prf');
                if (prf === 'hmac-sha256') {
                    prfFunc = 'sha256';
                }
                else if (prf === 'hmac-sha512') {
                    prfFunc = 'sha512';
                }
                else {
                    reject(new Error('unsupported prf'));
                    return;
                }
                var c = parseInt(searchPath(data, 'crypto/kdfparams/c'));
                var dkLen = parseInt(searchPath(data, 'crypto/kdfparams/dklen'));
                if (dkLen !== 32) {
                    reject(new Error('unsupported key-derivation derived-key length'));
                    return;
                }
                var key = pbkdf2_1.pbkdf2(passwordBytes, salt, c, dkLen, prfFunc);
                var signingKey = getSigningKey(key, reject);
                if (!signingKey) {
                    return;
                }
                resolve(signingKey);
            }
            else {
                reject(new Error('unsupported key-derivation function'));
            }
        }
        else {
            reject(new Error('unsupported key-derivation function'));
        }
    });
}
exports.decrypt = decrypt;
function encrypt(privateKey, password, options, progressCallback) {
    // the options are optional, so adjust the call as needed
    if (typeof (options) === 'function' && !progressCallback) {
        progressCallback = options;
        options = {};
    }
    if (!options) {
        options = {};
    }
    // Check the private key
    var privateKeyBytes = null;
    if (signing_key_1.SigningKey.isSigningKey(privateKey)) {
        privateKeyBytes = bytes_1.arrayify(privateKey.privateKey);
    }
    else {
        privateKeyBytes = bytes_1.arrayify(privateKey);
    }
    if (privateKeyBytes.length !== 32) {
        throw new Error('invalid private key');
    }
    var passwordBytes = getPassword(password);
    var entropy = null;
    if (options.entropy) {
        entropy = bytes_1.arrayify(options.entropy);
    }
    if (options.mnemonic) {
        if (entropy) {
            if (HDNode.entropyToMnemonic(entropy) !== options.mnemonic) {
                throw new Error('entropy and mnemonic mismatch');
            }
        }
        else {
            entropy = bytes_1.arrayify(HDNode.mnemonicToEntropy(options.mnemonic));
        }
    }
    var path = options.path;
    if (entropy && !path) {
        path = HDNode.defaultPath;
    }
    var client = options.client;
    if (!client) {
        client = "ethers.js";
    }
    // Check/generate the salt
    var salt = null;
    if (options.salt) {
        salt = bytes_1.arrayify(options.salt);
    }
    else {
        salt = random_bytes_1.randomBytes(32);
        ;
    }
    // Override initialization vector
    var iv = null;
    if (options.iv) {
        iv = bytes_1.arrayify(options.iv);
        if (iv.length !== 16) {
            throw new Error('invalid iv');
        }
    }
    else {
        iv = random_bytes_1.randomBytes(16);
    }
    // Override the uuid
    var uuidRandom = null;
    if (options.uuid) {
        uuidRandom = bytes_1.arrayify(options.uuid);
        if (uuidRandom.length !== 16) {
            throw new Error('invalid uuid');
        }
    }
    else {
        uuidRandom = random_bytes_1.randomBytes(16);
    }
    // Override the scrypt password-based key derivation function parameters
    var N = (1 << 17), r = 8, p = 1;
    if (options.scrypt) {
        if (options.scrypt.N) {
            N = options.scrypt.N;
        }
        if (options.scrypt.r) {
            r = options.scrypt.r;
        }
        if (options.scrypt.p) {
            p = options.scrypt.p;
        }
    }
    return new Promise(function (resolve, reject) {
        if (progressCallback) {
            progressCallback(0);
        }
        // We take 64 bytes:
        //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)
        //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)
        scrypt_js_1.default(passwordBytes, salt, N, r, p, 64, function (error, progress, key) {
            if (error) {
                error.progress = progress;
                reject(error);
            }
            else if (key) {
                key = bytes_1.arrayify(key);
                // This will be used to encrypt the wallet (as per Web3 secret storage)
                var derivedKey = key.slice(0, 16);
                var macPrefix = key.slice(16, 32);
                // This will be used to encrypt the mnemonic phrase (if any)
                var mnemonicKey = key.slice(32, 64);
                // Get the address for this private key
                var address = (new signing_key_1.SigningKey(privateKeyBytes)).address;
                // Encrypt the private key
                var counter = new aes_js_1.default.Counter(iv);
                var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(derivedKey, counter);
                var ciphertext = bytes_1.arrayify(aesCtr.encrypt(privateKeyBytes));
                // Compute the message authentication code, used to check the password
                var mac = keccak256_1.keccak256(bytes_1.concat([macPrefix, ciphertext]));
                // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition
                var data = {
                    address: address.substring(2).toLowerCase(),
                    id: uuid_1.default.v4({ random: uuidRandom }),
                    version: 3,
                    Crypto: {
                        cipher: 'aes-128-ctr',
                        cipherparams: {
                            iv: bytes_1.hexlify(iv).substring(2),
                        },
                        ciphertext: bytes_1.hexlify(ciphertext).substring(2),
                        kdf: 'scrypt',
                        kdfparams: {
                            salt: bytes_1.hexlify(salt).substring(2),
                            n: N,
                            dklen: 32,
                            p: p,
                            r: r
                        },
                        mac: mac.substring(2)
                    }
                };
                // If we have a mnemonic, encrypt it into the JSON wallet
                if (entropy) {
                    var mnemonicIv = random_bytes_1.randomBytes(16);
                    var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);
                    var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
                    var mnemonicCiphertext = bytes_1.arrayify(mnemonicAesCtr.encrypt(entropy));
                    var now = new Date();
                    var timestamp = (now.getUTCFullYear() + '-' +
                        zpad(now.getUTCMonth() + 1, 2) + '-' +
                        zpad(now.getUTCDate(), 2) + 'T' +
                        zpad(now.getUTCHours(), 2) + '-' +
                        zpad(now.getUTCMinutes(), 2) + '-' +
                        zpad(now.getUTCSeconds(), 2) + '.0Z');
                    data['x-ethers'] = {
                        client: client,
                        gethFilename: ('UTC--' + timestamp + '--' + data.address),
                        mnemonicCounter: bytes_1.hexlify(mnemonicIv).substring(2),
                        mnemonicCiphertext: bytes_1.hexlify(mnemonicCiphertext).substring(2),
                        path: path,
                        version: "0.1"
                    };
                }
                if (progressCallback) {
                    progressCallback(1);
                }
                resolve(JSON.stringify(data));
            }
            else if (progressCallback) {
                return progressCallback(progress);
            }
        });
    });
}
exports.encrypt = encrypt;


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function(root) {

    function checkInt(value) {
        return (parseInt(value) === value);
    }

    function checkInts(arrayish) {
        if (!checkInt(arrayish.length)) { return false; }

        for (var i = 0; i < arrayish.length; i++) {
            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
                return false;
            }
        }

        return true;
    }

    function coerceArray(arg, copy) {

        // ArrayBuffer view
        if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {

            if (copy) {
                if (arg.slice) {
                    arg = arg.slice();
                } else {
                    arg = Array.prototype.slice.call(arg);
                }
            }

            return arg;
        }

        // It's an array; check it is a valid representation of a byte
        if (Array.isArray(arg)) {
            if (!checkInts(arg)) {
                throw new Error('Array contains invalid value: ' + arg);
            }

            return new Uint8Array(arg);
        }

        // Something else, but behaves like an array (maybe a Buffer? Arguments?)
        if (checkInt(arg.length) && checkInts(arg)) {
            return new Uint8Array(arg);
        }

        throw new Error('unsupported array-like object');
    }

    function createArray(length) {
        return new Uint8Array(length);
    }

    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
        if (sourceStart != null || sourceEnd != null) {
            if (sourceArray.slice) {
                sourceArray = sourceArray.slice(sourceStart, sourceEnd);
            } else {
                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
            }
        }
        targetArray.set(sourceArray, targetStart);
    }



    var convertUtf8 = (function() {
        function toBytes(text) {
            var result = [], i = 0;
            text = encodeURI(text);
            while (i < text.length) {
                var c = text.charCodeAt(i++);

                // if it is a % sign, encode the following 2 bytes as a hex value
                if (c === 37) {
                    result.push(parseInt(text.substr(i, 2), 16))
                    i += 2;

                // otherwise, just the actual byte
                } else {
                    result.push(c)
                }
            }

            return coerceArray(result);
        }

        function fromBytes(bytes) {
            var result = [], i = 0;

            while (i < bytes.length) {
                var c = bytes[i];

                if (c < 128) {
                    result.push(String.fromCharCode(c));
                    i++;
                } else if (c > 191 && c < 224) {
                    result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));
                    i += 2;
                } else {
                    result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));
                    i += 3;
                }
            }

            return result.join('');
        }

        return {
            toBytes: toBytes,
            fromBytes: fromBytes,
        }
    })();

    var convertHex = (function() {
        function toBytes(text) {
            var result = [];
            for (var i = 0; i < text.length; i += 2) {
                result.push(parseInt(text.substr(i, 2), 16));
            }

            return result;
        }

        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html
        var Hex = '0123456789abcdef';

        function fromBytes(bytes) {
                var result = [];
                for (var i = 0; i < bytes.length; i++) {
                    var v = bytes[i];
                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
                }
                return result.join('');
        }

        return {
            toBytes: toBytes,
            fromBytes: fromBytes,
        }
    })();


    // Number of rounds by keysize
    var numberOfRounds = {16: 10, 24: 12, 32: 14}

    // Round constant words
    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];

    // S-box and Inverse S-box (S is for Substitution)
    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
    var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];

    // Transformations for encryption
    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];

    // Transformations for decryption
    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];

    // Transformations for decryption key expansion
    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];

    function convertToInt32(bytes) {
        var result = [];
        for (var i = 0; i < bytes.length; i += 4) {
            result.push(
                (bytes[i    ] << 24) |
                (bytes[i + 1] << 16) |
                (bytes[i + 2] <<  8) |
                 bytes[i + 3]
            );
        }
        return result;
    }

    var AES = function(key) {
        if (!(this instanceof AES)) {
            throw Error('AES must be instanitated with `new`');
        }

        Object.defineProperty(this, 'key', {
            value: coerceArray(key, true)
        });

        this._prepare();
    }


    AES.prototype._prepare = function() {

        var rounds = numberOfRounds[this.key.length];
        if (rounds == null) {
            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');
        }

        // encryption round keys
        this._Ke = [];

        // decryption round keys
        this._Kd = [];

        for (var i = 0; i <= rounds; i++) {
            this._Ke.push([0, 0, 0, 0]);
            this._Kd.push([0, 0, 0, 0]);
        }

        var roundKeyCount = (rounds + 1) * 4;
        var KC = this.key.length / 4;

        // convert the key into ints
        var tk = convertToInt32(this.key);

        // copy values into round key arrays
        var index;
        for (var i = 0; i < KC; i++) {
            index = i >> 2;
            this._Ke[index][i % 4] = tk[i];
            this._Kd[rounds - index][i % 4] = tk[i];
        }

        // key expansion (fips-197 section 5.2)
        var rconpointer = 0;
        var t = KC, tt;
        while (t < roundKeyCount) {
            tt = tk[KC - 1];
            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^
                      (S[(tt >>  8) & 0xFF] << 16) ^
                      (S[ tt        & 0xFF] <<  8) ^
                       S[(tt >> 24) & 0xFF]        ^
                      (rcon[rconpointer] << 24));
            rconpointer += 1;

            // key expansion (for non-256 bit)
            if (KC != 8) {
                for (var i = 1; i < KC; i++) {
                    tk[i] ^= tk[i - 1];
                }

            // key expansion for 256-bit keys is "slightly different" (fips-197)
            } else {
                for (var i = 1; i < (KC / 2); i++) {
                    tk[i] ^= tk[i - 1];
                }
                tt = tk[(KC / 2) - 1];

                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^
                              (S[(tt >>  8) & 0xFF] <<  8) ^
                              (S[(tt >> 16) & 0xFF] << 16) ^
                              (S[(tt >> 24) & 0xFF] << 24));

                for (var i = (KC / 2) + 1; i < KC; i++) {
                    tk[i] ^= tk[i - 1];
                }
            }

            // copy values into round key arrays
            var i = 0, r, c;
            while (i < KC && t < roundKeyCount) {
                r = t >> 2;
                c = t % 4;
                this._Ke[r][c] = tk[i];
                this._Kd[rounds - r][c] = tk[i++];
                t++;
            }
        }

        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
        for (var r = 1; r < rounds; r++) {
            for (var c = 0; c < 4; c++) {
                tt = this._Kd[r][c];
                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^
                                  U2[(tt >> 16) & 0xFF] ^
                                  U3[(tt >>  8) & 0xFF] ^
                                  U4[ tt        & 0xFF]);
            }
        }
    }

    AES.prototype.encrypt = function(plaintext) {
        if (plaintext.length != 16) {
            throw new Error('invalid plaintext size (must be 16 bytes)');
        }

        var rounds = this._Ke.length - 1;
        var a = [0, 0, 0, 0];

        // convert plaintext to (ints ^ key)
        var t = convertToInt32(plaintext);
        for (var i = 0; i < 4; i++) {
            t[i] ^= this._Ke[0][i];
        }

        // apply round transforms
        for (var r = 1; r < rounds; r++) {
            for (var i = 0; i < 4; i++) {
                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^
                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^
                        T3[(t[(i + 2) % 4] >>  8) & 0xff] ^
                        T4[ t[(i + 3) % 4]        & 0xff] ^
                        this._Ke[r][i]);
            }
            t = a.slice();
        }

        // the last round is special
        var result = createArray(16), tt;
        for (var i = 0; i < 4; i++) {
            tt = this._Ke[rounds][i];
            result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
            result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
            result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;
        }

        return result;
    }

    AES.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length != 16) {
            throw new Error('invalid ciphertext size (must be 16 bytes)');
        }

        var rounds = this._Kd.length - 1;
        var a = [0, 0, 0, 0];

        // convert plaintext to (ints ^ key)
        var t = convertToInt32(ciphertext);
        for (var i = 0; i < 4; i++) {
            t[i] ^= this._Kd[0][i];
        }

        // apply round transforms
        for (var r = 1; r < rounds; r++) {
            for (var i = 0; i < 4; i++) {
                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^
                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^
                        T7[(t[(i + 2) % 4] >>  8) & 0xff] ^
                        T8[ t[(i + 1) % 4]        & 0xff] ^
                        this._Kd[r][i]);
            }
            t = a.slice();
        }

        // the last round is special
        var result = createArray(16), tt;
        for (var i = 0; i < 4; i++) {
            tt = this._Kd[rounds][i];
            result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
            result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;
        }

        return result;
    }


    /**
     *  Mode Of Operation - Electonic Codebook (ECB)
     */
    var ModeOfOperationECB = function(key) {
        if (!(this instanceof ModeOfOperationECB)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Electronic Code Block";
        this.name = "ecb";

        this._aes = new AES(key);
    }

    ModeOfOperationECB.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);

        if ((plaintext.length % 16) !== 0) {
            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
        }

        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);

        for (var i = 0; i < plaintext.length; i += 16) {
            copyArray(plaintext, block, 0, i, i + 16);
            block = this._aes.encrypt(block);
            copyArray(block, ciphertext, i);
        }

        return ciphertext;
    }

    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);

        if ((ciphertext.length % 16) !== 0) {
            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
        }

        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);

        for (var i = 0; i < ciphertext.length; i += 16) {
            copyArray(ciphertext, block, 0, i, i + 16);
            block = this._aes.decrypt(block);
            copyArray(block, plaintext, i);
        }

        return plaintext;
    }


    /**
     *  Mode Of Operation - Cipher Block Chaining (CBC)
     */
    var ModeOfOperationCBC = function(key, iv) {
        if (!(this instanceof ModeOfOperationCBC)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Cipher Block Chaining";
        this.name = "cbc";

        if (!iv) {
            iv = createArray(16);

        } else if (iv.length != 16) {
            throw new Error('invalid initialation vector size (must be 16 bytes)');
        }

        this._lastCipherblock = coerceArray(iv, true);

        this._aes = new AES(key);
    }

    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);

        if ((plaintext.length % 16) !== 0) {
            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
        }

        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);

        for (var i = 0; i < plaintext.length; i += 16) {
            copyArray(plaintext, block, 0, i, i + 16);

            for (var j = 0; j < 16; j++) {
                block[j] ^= this._lastCipherblock[j];
            }

            this._lastCipherblock = this._aes.encrypt(block);
            copyArray(this._lastCipherblock, ciphertext, i);
        }

        return ciphertext;
    }

    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);

        if ((ciphertext.length % 16) !== 0) {
            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
        }

        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);

        for (var i = 0; i < ciphertext.length; i += 16) {
            copyArray(ciphertext, block, 0, i, i + 16);
            block = this._aes.decrypt(block);

            for (var j = 0; j < 16; j++) {
                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
            }

            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
        }

        return plaintext;
    }


    /**
     *  Mode Of Operation - Cipher Feedback (CFB)
     */
    var ModeOfOperationCFB = function(key, iv, segmentSize) {
        if (!(this instanceof ModeOfOperationCFB)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Cipher Feedback";
        this.name = "cfb";

        if (!iv) {
            iv = createArray(16);

        } else if (iv.length != 16) {
            throw new Error('invalid initialation vector size (must be 16 size)');
        }

        if (!segmentSize) { segmentSize = 1; }

        this.segmentSize = segmentSize;

        this._shiftRegister = coerceArray(iv, true);

        this._aes = new AES(key);
    }

    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
        if ((plaintext.length % this.segmentSize) != 0) {
            throw new Error('invalid plaintext size (must be segmentSize bytes)');
        }

        var encrypted = coerceArray(plaintext, true);

        var xorSegment;
        for (var i = 0; i < encrypted.length; i += this.segmentSize) {
            xorSegment = this._aes.encrypt(this._shiftRegister);
            for (var j = 0; j < this.segmentSize; j++) {
                encrypted[i + j] ^= xorSegment[j];
            }

            // Shift the register
            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }

        return encrypted;
    }

    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
        if ((ciphertext.length % this.segmentSize) != 0) {
            throw new Error('invalid ciphertext size (must be segmentSize bytes)');
        }

        var plaintext = coerceArray(ciphertext, true);

        var xorSegment;
        for (var i = 0; i < plaintext.length; i += this.segmentSize) {
            xorSegment = this._aes.encrypt(this._shiftRegister);

            for (var j = 0; j < this.segmentSize; j++) {
                plaintext[i + j] ^= xorSegment[j];
            }

            // Shift the register
            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }

        return plaintext;
    }

    /**
     *  Mode Of Operation - Output Feedback (OFB)
     */
    var ModeOfOperationOFB = function(key, iv) {
        if (!(this instanceof ModeOfOperationOFB)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Output Feedback";
        this.name = "ofb";

        if (!iv) {
            iv = createArray(16);

        } else if (iv.length != 16) {
            throw new Error('invalid initialation vector size (must be 16 bytes)');
        }

        this._lastPrecipher = coerceArray(iv, true);
        this._lastPrecipherIndex = 16;

        this._aes = new AES(key);
    }

    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);

        for (var i = 0; i < encrypted.length; i++) {
            if (this._lastPrecipherIndex === 16) {
                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
                this._lastPrecipherIndex = 0;
            }
            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
        }

        return encrypted;
    }

    // Decryption is symetric
    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;


    /**
     *  Counter object for CTR common mode of operation
     */
    var Counter = function(initialValue) {
        if (!(this instanceof Counter)) {
            throw Error('Counter must be instanitated with `new`');
        }

        // We allow 0, but anything false-ish uses the default 1
        if (initialValue !== 0 && !initialValue) { initialValue = 1; }

        if (typeof(initialValue) === 'number') {
            this._counter = createArray(16);
            this.setValue(initialValue);

        } else {
            this.setBytes(initialValue);
        }
    }

    Counter.prototype.setValue = function(value) {
        if (typeof(value) !== 'number' || parseInt(value) != value) {
            throw new Error('invalid counter value (must be an integer)');
        }

        for (var index = 15; index >= 0; --index) {
            this._counter[index] = value % 256;
            value = value >> 8;
        }
    }

    Counter.prototype.setBytes = function(bytes) {
        bytes = coerceArray(bytes, true);

        if (bytes.length != 16) {
            throw new Error('invalid counter bytes size (must be 16 bytes)');
        }

        this._counter = bytes;
    };

    Counter.prototype.increment = function() {
        for (var i = 15; i >= 0; i--) {
            if (this._counter[i] === 255) {
                this._counter[i] = 0;
            } else {
                this._counter[i]++;
                break;
            }
        }
    }


    /**
     *  Mode Of Operation - Counter (CTR)
     */
    var ModeOfOperationCTR = function(key, counter) {
        if (!(this instanceof ModeOfOperationCTR)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Counter";
        this.name = "ctr";

        if (!(counter instanceof Counter)) {
            counter = new Counter(counter)
        }

        this._counter = counter;

        this._remainingCounter = null;
        this._remainingCounterIndex = 16;

        this._aes = new AES(key);
    }

    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);

        for (var i = 0; i < encrypted.length; i++) {
            if (this._remainingCounterIndex === 16) {
                this._remainingCounter = this._aes.encrypt(this._counter._counter);
                this._remainingCounterIndex = 0;
                this._counter.increment();
            }
            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
        }

        return encrypted;
    }

    // Decryption is symetric
    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;


    ///////////////////////
    // Padding

    // See:https://tools.ietf.org/html/rfc2315
    function pkcs7pad(data) {
        data = coerceArray(data, true);
        var padder = 16 - (data.length % 16);
        var result = createArray(data.length + padder);
        copyArray(data, result);
        for (var i = data.length; i < result.length; i++) {
            result[i] = padder;
        }
        return result;
    }

    function pkcs7strip(data) {
        data = coerceArray(data, true);
        if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }

        var padder = data[data.length - 1];
        if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }

        var length = data.length - padder;
        for (var i = 0; i < padder; i++) {
            if (data[length + i] !== padder) {
                throw new Error('PKCS#7 invalid padding byte');
            }
        }

        var result = createArray(length);
        copyArray(data, result, 0, 0, length);
        return result;
    }

    ///////////////////////
    // Exporting


    // The block cipher
    var aesjs = {
        AES: AES,
        Counter: Counter,

        ModeOfOperation: {
            ecb: ModeOfOperationECB,
            cbc: ModeOfOperationCBC,
            cfb: ModeOfOperationCFB,
            ofb: ModeOfOperationOFB,
            ctr: ModeOfOperationCTR
        },

        utils: {
            hex: convertHex,
            utf8: convertUtf8
        },

        padding: {
            pkcs7: {
                pad: pkcs7pad,
                strip: pkcs7strip
            }
        },

        _arrayTest: {
            coerceArray: coerceArray,
            createArray: createArray,
            copyArray: copyArray,
        }
    };


    // node.js
    if (true) {
        module.exports = aesjs

    // RequireJS/AMD
    // http://www.requirejs.org/docs/api.html
    // https://github.com/amdjs/amdjs-api/wiki/AMD
    } else {}


})(this);


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function(root) {
    var MAX_VALUE = 0x7fffffff;

    // The SHA256 and PBKDF2 implementation are from scrypt-async-js:
    // See: https://github.com/dchest/scrypt-async-js
    function SHA256(m) {
        var K = [
           0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
           0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
           0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
           0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
           0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
           0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
           0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
           0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
           0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
           0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
           0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
           0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
           0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
       ];

        var h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a;
        var h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19;
        var w = new Array(64);

        function blocks(p) {
            var off = 0, len = p.length;
            while (len >= 64) {
                var a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i, j, t1, t2;

                for (i = 0; i < 16; i++) {
                    j = off + i*4;
                    w[i] = ((p[j] & 0xff)<<24) | ((p[j+1] & 0xff)<<16) |
                    ((p[j+2] & 0xff)<<8) | (p[j+3] & 0xff);
                }

                for (i = 16; i < 64; i++) {
                    u = w[i-2];
                    t1 = ((u>>>17) | (u<<(32-17))) ^ ((u>>>19) | (u<<(32-19))) ^ (u>>>10);

                    u = w[i-15];
                    t2 = ((u>>>7) | (u<<(32-7))) ^ ((u>>>18) | (u<<(32-18))) ^ (u>>>3);

                    w[i] = (((t1 + w[i-7]) | 0) + ((t2 + w[i-16]) | 0)) | 0;
                }

                for (i = 0; i < 64; i++) {
                    t1 = ((((((e>>>6) | (e<<(32-6))) ^ ((e>>>11) | (e<<(32-11))) ^
                             ((e>>>25) | (e<<(32-25)))) + ((e & f) ^ (~e & g))) | 0) +
                          ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;

                    t2 = ((((a>>>2) | (a<<(32-2))) ^ ((a>>>13) | (a<<(32-13))) ^
                           ((a>>>22) | (a<<(32-22)))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;

                    h = g;
                    g = f;
                    f = e;
                    e = (d + t1) | 0;
                    d = c;
                    c = b;
                    b = a;
                    a = (t1 + t2) | 0;
                }

                h0 = (h0 + a) | 0;
                h1 = (h1 + b) | 0;
                h2 = (h2 + c) | 0;
                h3 = (h3 + d) | 0;
                h4 = (h4 + e) | 0;
                h5 = (h5 + f) | 0;
                h6 = (h6 + g) | 0;
                h7 = (h7 + h) | 0;

                off += 64;
                len -= 64;
            }
        }

        blocks(m);

        var i, bytesLeft = m.length % 64,
        bitLenHi = (m.length / 0x20000000) | 0,
        bitLenLo = m.length << 3,
        numZeros = (bytesLeft < 56) ? 56 : 120,
        p = m.slice(m.length - bytesLeft, m.length);

        p.push(0x80);
        for (i = bytesLeft + 1; i < numZeros; i++) { p.push(0); }
        p.push((bitLenHi>>>24) & 0xff);
        p.push((bitLenHi>>>16) & 0xff);
        p.push((bitLenHi>>>8)  & 0xff);
        p.push((bitLenHi>>>0)  & 0xff);
        p.push((bitLenLo>>>24) & 0xff);
        p.push((bitLenLo>>>16) & 0xff);
        p.push((bitLenLo>>>8)  & 0xff);
        p.push((bitLenLo>>>0)  & 0xff);

        blocks(p);

        return [
            (h0>>>24) & 0xff, (h0>>>16) & 0xff, (h0>>>8) & 0xff, (h0>>>0) & 0xff,
            (h1>>>24) & 0xff, (h1>>>16) & 0xff, (h1>>>8) & 0xff, (h1>>>0) & 0xff,
            (h2>>>24) & 0xff, (h2>>>16) & 0xff, (h2>>>8) & 0xff, (h2>>>0) & 0xff,
            (h3>>>24) & 0xff, (h3>>>16) & 0xff, (h3>>>8) & 0xff, (h3>>>0) & 0xff,
            (h4>>>24) & 0xff, (h4>>>16) & 0xff, (h4>>>8) & 0xff, (h4>>>0) & 0xff,
            (h5>>>24) & 0xff, (h5>>>16) & 0xff, (h5>>>8) & 0xff, (h5>>>0) & 0xff,
            (h6>>>24) & 0xff, (h6>>>16) & 0xff, (h6>>>8) & 0xff, (h6>>>0) & 0xff,
            (h7>>>24) & 0xff, (h7>>>16) & 0xff, (h7>>>8) & 0xff, (h7>>>0) & 0xff
        ];
    }

    function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
        // compress password if it's longer than hash block length
        password = password.length <= 64 ? password : SHA256(password);

        var i;
        var innerLen = 64 + salt.length + 4;
        var inner = new Array(innerLen);
        var outerKey = new Array(64);
        var dk = [];

        // inner = (password ^ ipad) || salt || counter
        for (i = 0; i < 64; i++) inner[i] = 0x36;
        for (i = 0; i < password.length; i++) inner[i] ^= password[i];
        for (i = 0; i < salt.length; i++) inner[64+i] = salt[i];
        for (i = innerLen - 4; i < innerLen; i++) inner[i] = 0;

        // outerKey = password ^ opad
        for (i = 0; i < 64; i++) outerKey[i] = 0x5c;
        for (i = 0; i < password.length; i++) outerKey[i] ^= password[i];

        // increments counter inside inner
        function incrementCounter() {
            for (var i = innerLen-1; i >= innerLen-4; i--) {
                inner[i]++;
                if (inner[i] <= 0xff) return;
                inner[i] = 0;
            }
        }

        // output blocks = SHA256(outerKey || SHA256(inner)) ...
        while (dkLen >= 32) {
            incrementCounter();
            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
            dkLen -= 32;
        }
        if (dkLen > 0) {
            incrementCounter();
            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
        }

        return dk;
    }

    // The following is an adaptation of scryptsy
    // See: https://www.npmjs.com/package/scryptsy
    function blockmix_salsa8(BY, Yi, r, x, _X) {
        var i;

        arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);
        for (i = 0; i < 2 * r; i++) {
            blockxor(BY, i * 16, _X, 16);
            salsa20_8(_X, x);
            arraycopy(_X, 0, BY, Yi + (i * 16), 16);
        }

        for (i = 0; i < r; i++) {
            arraycopy(BY, Yi + (i * 2) * 16, BY, (i * 16), 16);
        }

        for (i = 0; i < r; i++) {
            arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);
        }
    }

    function R(a, b) {
        return (a << b) | (a >>> (32 - b));
    }

    function salsa20_8(B, x) {
        arraycopy(B, 0, x, 0, 16);

        for (var i = 8; i > 0; i -= 2) {
            x[ 4] ^= R(x[ 0] + x[12], 7);
            x[ 8] ^= R(x[ 4] + x[ 0], 9);
            x[12] ^= R(x[ 8] + x[ 4], 13);
            x[ 0] ^= R(x[12] + x[ 8], 18);
            x[ 9] ^= R(x[ 5] + x[ 1], 7);
            x[13] ^= R(x[ 9] + x[ 5], 9);
            x[ 1] ^= R(x[13] + x[ 9], 13);
            x[ 5] ^= R(x[ 1] + x[13], 18);
            x[14] ^= R(x[10] + x[ 6], 7);
            x[ 2] ^= R(x[14] + x[10], 9);
            x[ 6] ^= R(x[ 2] + x[14], 13);
            x[10] ^= R(x[ 6] + x[ 2], 18);
            x[ 3] ^= R(x[15] + x[11], 7);
            x[ 7] ^= R(x[ 3] + x[15], 9);
            x[11] ^= R(x[ 7] + x[ 3], 13);
            x[15] ^= R(x[11] + x[ 7], 18);
            x[ 1] ^= R(x[ 0] + x[ 3], 7);
            x[ 2] ^= R(x[ 1] + x[ 0], 9);
            x[ 3] ^= R(x[ 2] + x[ 1], 13);
            x[ 0] ^= R(x[ 3] + x[ 2], 18);
            x[ 6] ^= R(x[ 5] + x[ 4], 7);
            x[ 7] ^= R(x[ 6] + x[ 5], 9);
            x[ 4] ^= R(x[ 7] + x[ 6], 13);
            x[ 5] ^= R(x[ 4] + x[ 7], 18);
            x[11] ^= R(x[10] + x[ 9], 7);
            x[ 8] ^= R(x[11] + x[10], 9);
            x[ 9] ^= R(x[ 8] + x[11], 13);
            x[10] ^= R(x[ 9] + x[ 8], 18);
            x[12] ^= R(x[15] + x[14], 7);
            x[13] ^= R(x[12] + x[15], 9);
            x[14] ^= R(x[13] + x[12], 13);
            x[15] ^= R(x[14] + x[13], 18);
        }

        for (i = 0; i < 16; ++i) {
            B[i] += x[i];
        }
    }

    // naive approach... going back to loop unrolling may yield additional performance
    function blockxor(S, Si, D, len) {
        for (var i = 0; i < len; i++) {
            D[i] ^= S[Si + i]
        }
    }

    function arraycopy(src, srcPos, dest, destPos, length) {
        while (length--) {
            dest[destPos++] = src[srcPos++];
        }
    }

    function checkBufferish(o) {
        if (!o || typeof(o.length) !== 'number') {
            return false;
        }
        for (var i = 0; i < o.length; i++) {
            if (typeof(o[i]) !== 'number') { return false; }

            var v = parseInt(o[i]);
            if (v != o[i] || v < 0 || v >= 256) {
                return false;
            }
        }
        return true;
    }

    function ensureInteger(value, name) {
        var intValue = parseInt(value);
        if (value != intValue) { throw new Error('invalid ' + name); }
        return intValue;
    }

    // N = Cpu cost, r = Memory cost, p = parallelization cost
    // callback(error, progress, key)
    function scrypt(password, salt, N, r, p, dkLen, callback) {

        if (!callback) { throw new Error('missing callback'); }

        N = ensureInteger(N, 'N');
        r = ensureInteger(r, 'r');
        p = ensureInteger(p, 'p');

        dkLen = ensureInteger(dkLen, 'dkLen');

        if (N === 0 || (N & (N - 1)) !== 0) { throw new Error('N must be power of 2'); }

        if (N > MAX_VALUE / 128 / r) { throw new Error('N too large'); }
        if (r > MAX_VALUE / 128 / p) { throw new Error('r too large'); }

        if (!checkBufferish(password)) {
            throw new Error('password must be an array or buffer');
        }
        password = Array.prototype.slice.call(password);

        if (!checkBufferish(salt)) {
            throw new Error('salt must be an array or buffer');
        }
        salt = Array.prototype.slice.call(salt);

        var b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);
        var B = new Uint32Array(p * 32 * r)
        for (var i = 0; i < B.length; i++) {
            var j = i * 4;
            B[i] = ((b[j + 3] & 0xff) << 24) |
                   ((b[j + 2] & 0xff) << 16) |
                   ((b[j + 1] & 0xff) << 8) |
                   ((b[j + 0] & 0xff) << 0);
        }

        var XY = new Uint32Array(64 * r);
        var V = new Uint32Array(32 * r * N);

        var Yi = 32 * r;

        // scratch space
        var x = new Uint32Array(16);       // salsa20_8
        var _X = new Uint32Array(16);      // blockmix_salsa8

        var totalOps = p * N * 2;
        var currentOp = 0;
        var lastPercent10 = null;

        // Set this to true to abandon the scrypt on the next step
        var stop = false;

        // State information
        var state = 0;
        var i0 = 0, i1;
        var Bi;

        // How many blockmix_salsa8 can we do per step?
        var limit = parseInt(1000 / r);

        // Trick from scrypt-async; if there is a setImmediate shim in place, use it
        var nextTick = (typeof(setImmediate) !== 'undefined') ? setImmediate : setTimeout;

        // This is really all I changed; making scryptsy a state machine so we occasionally
        // stop and give other evnts on the evnt loop a chance to run. ~RicMoo
        var incrementalSMix = function() {
            if (stop) {
                return callback(new Error('cancelled'), currentOp / totalOps);
            }

            switch (state) {
                case 0:
                    // for (var i = 0; i < p; i++)...
                    Bi = i0 * 32 * r;

                    arraycopy(B, Bi, XY, 0, Yi);                       // ROMix - 1

                    state = 1;                                         // Move to ROMix 2
                    i1 = 0;

                    // Fall through

                case 1:

                    // Run up to 1000 steps of the first inner smix loop
                    var steps = N - i1;
                    if (steps > limit) { steps = limit; }
                    for (var i = 0; i < steps; i++) {                  // ROMix - 2
                        arraycopy(XY, 0, V, (i1 + i) * Yi, Yi)         // ROMix - 3
                        blockmix_salsa8(XY, Yi, r, x, _X);             // ROMix - 4
                    }

                    // for (var i = 0; i < N; i++)
                    i1 += steps;
                    currentOp += steps;

                    // Call the callback with the progress (optionally stopping us)
                    var percent10 = parseInt(1000 * currentOp / totalOps);
                    if (percent10 !== lastPercent10) {
                        stop = callback(null, currentOp / totalOps);
                        if (stop) { break; }
                        lastPercent10 = percent10;
                    }

                    if (i1 < N) {
                        break;
                    }

                    i1 = 0;                                          // Move to ROMix 6
                    state = 2;

                    // Fall through

                case 2:

                    // Run up to 1000 steps of the second inner smix loop
                    var steps = N - i1;
                    if (steps > limit) { steps = limit; }
                    for (var i = 0; i < steps; i++) {                // ROMix - 6
                        var offset = (2 * r - 1) * 16;               // ROMix - 7
                        var j = XY[offset] & (N - 1);
                        blockxor(V, j * Yi, XY, Yi);                 // ROMix - 8 (inner)
                        blockmix_salsa8(XY, Yi, r, x, _X);           // ROMix - 9 (outer)
                    }

                    // for (var i = 0; i < N; i++)...
                    i1 += steps;
                    currentOp += steps;

                    // Call the callback with the progress (optionally stopping us)
                    var percent10 = parseInt(1000 * currentOp / totalOps);
                    if (percent10 !== lastPercent10) {
                        stop = callback(null, currentOp / totalOps);
                        if (stop) { break; }
                        lastPercent10 = percent10;
                    }

                    if (i1 < N) {
                        break;
                    }

                    arraycopy(XY, 0, B, Bi, Yi);                     // ROMix - 10

                    // for (var i = 0; i < p; i++)...
                    i0++;
                    if (i0 < p) {
                        state = 0;
                        break;
                    }

                    b = [];
                    for (var i = 0; i < B.length; i++) {
                        b.push((B[i] >>  0) & 0xff);
                        b.push((B[i] >>  8) & 0xff);
                        b.push((B[i] >> 16) & 0xff);
                        b.push((B[i] >> 24) & 0xff);
                    }

                    var derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);

                    // Done; don't break (which would reschedule)
                    return callback(null, 1.0, derivedKey);
                }

                // Schedule the next steps
                nextTick(incrementalSMix);
            }

            // Bootstrap the incremental smix
            incrementalSMix();
    }

    // node.js
    if (true) {
       module.exports = scrypt;

    // RequireJS/AMD
    // http://www.requirejs.org/docs/api.html
    // https://github.com/amdjs/amdjs-api/wiki/AMD
    } else {}

})(this);


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

//     uuid.js
//
//     Copyright (c) 2010-2012 Robert Kieffer
//     MIT License - http://opensource.org/licenses/mit-license.php

// Unique ID creation requires a high quality random # generator.  We feature
// detect to determine the best RNG source, normalizing to a function that
// returns 128-bits of randomness, since that's what's usually required
var _rng = __webpack_require__(140);

// Maps for number <-> hex string conversion
var _byteToHex = [];
var _hexToByte = {};
for (var i = 0; i < 256; i++) {
  _byteToHex[i] = (i + 0x100).toString(16).substr(1);
  _hexToByte[_byteToHex[i]] = i;
}

// **`parse()` - Parse a UUID into it's component bytes**
function parse(s, buf, offset) {
  var i = (buf && offset) || 0, ii = 0;

  buf = buf || [];
  s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
    if (ii < 16) { // Don't overflow!
      buf[i + ii++] = _hexToByte[oct];
    }
  });

  // Zero out remaining bytes if string was short
  while (ii < 16) {
    buf[i + ii++] = 0;
  }

  return buf;
}

// **`unparse()` - Convert UUID byte array (ala parse()) into a string**
function unparse(buf, offset) {
  var i = offset || 0, bth = _byteToHex;
  return  bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]];
}

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

// random #'s we need to init node and clockseq
var _seedBytes = _rng();

// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
var _nodeId = [
  _seedBytes[0] | 0x01,
  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
];

// Per 4.2.2, randomize (14 bit) clockseq
var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

// Previous uuid creation time
var _lastMSecs = 0, _lastNSecs = 0;

// See https://github.com/broofa/node-uuid for API details
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];

  options = options || {};

  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

  // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock
  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

  // Time since last uuid creation (in msecs)
  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

  // Per 4.2.1.2, Bump clockseq on clock regression
  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  }

  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  }

  // Per 4.2.1.2 Throw error if too many uuids are requested
  if (nsecs >= 10000) {
    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;

  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
  msecs += 12219292800000;

  // `time_low`
  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff;

  // `time_mid`
  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff;

  // `time_high_and_version`
  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
  b[i++] = tmh >>> 16 & 0xff;

  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
  b[i++] = clockseq >>> 8 | 0x80;

  // `clock_seq_low`
  b[i++] = clockseq & 0xff;

  // `node`
  var node = options.node || _nodeId;
  for (var n = 0; n < 6; n++) {
    b[i + n] = node[n];
  }

  return buf ? buf : unparse(b);
}

// **`v4()` - Generate random UUID**

// See https://github.com/broofa/node-uuid for API details
function v4(options, buf, offset) {
  // Deprecated - 'format' argument, as supported in v1.2
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options == 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || _rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ii++) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || unparse(rnds);
}

// Export public API
var uuid = v4;
uuid.v1 = v1;
uuid.v4 = v4;
uuid.parse = parse;
uuid.unparse = unparse;

module.exports = uuid;


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

var rb = __webpack_require__(29).randomBytes;
module.exports = function() {
  return rb(16);
};


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var abstract_provider_1 = __webpack_require__(33);
exports.Provider = abstract_provider_1.Provider;
var base_provider_1 = __webpack_require__(43);
exports.BaseProvider = base_provider_1.BaseProvider;
var etherscan_provider_1 = __webpack_require__(145);
exports.EtherscanProvider = etherscan_provider_1.EtherscanProvider;
var fallback_provider_1 = __webpack_require__(146);
exports.FallbackProvider = fallback_provider_1.FallbackProvider;
var ipc_provider_1 = __webpack_require__(147);
exports.IpcProvider = ipc_provider_1.IpcProvider;
var infura_provider_1 = __webpack_require__(149);
exports.InfuraProvider = infura_provider_1.InfuraProvider;
var json_rpc_provider_1 = __webpack_require__(46);
exports.JsonRpcProvider = json_rpc_provider_1.JsonRpcProvider;
exports.JsonRpcSigner = json_rpc_provider_1.JsonRpcSigner;
var web3_provider_1 = __webpack_require__(150);
exports.Web3Provider = web3_provider_1.Web3Provider;


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Wrapper for built-in http.js to emulate the browser XMLHttpRequest object.
 *
 * This can be used with JS designed for browsers to improve reuse of code and
 * allow the use of existing libraries.
 *
 * Usage: include("XMLHttpRequest.js") and use XMLHttpRequest per W3C specs.
 *
 * @author Dan DeFelippi <dan@driverdan.com>
 * @contributor David Ellis <d.f.ellis@ieee.org>
 * @license MIT
 */

var Url = __webpack_require__(56);
var spawn = __webpack_require__(143).spawn;
var fs = __webpack_require__(144);

exports.XMLHttpRequest = function() {
  "use strict";

  /**
   * Private variables
   */
  var self = this;
  var http = __webpack_require__(57);
  var https = __webpack_require__(58);

  // Holds http.js objects
  var request;
  var response;

  // Request settings
  var settings = {};

  // Disable header blacklist.
  // Not part of XHR specs.
  var disableHeaderCheck = false;

  // Set some default headers
  var defaultHeaders = {
    "User-Agent": "node-XMLHttpRequest",
    "Accept": "*/*",
  };

  var headers = {};
  var headersCase = {};

  // These headers are not user setable.
  // The following are allowed but banned in the spec:
  // * user-agent
  var forbiddenRequestHeaders = [
    "accept-charset",
    "accept-encoding",
    "access-control-request-headers",
    "access-control-request-method",
    "connection",
    "content-length",
    "content-transfer-encoding",
    "cookie",
    "cookie2",
    "date",
    "expect",
    "host",
    "keep-alive",
    "origin",
    "referer",
    "te",
    "trailer",
    "transfer-encoding",
    "upgrade",
    "via"
  ];

  // These request methods are not allowed
  var forbiddenRequestMethods = [
    "TRACE",
    "TRACK",
    "CONNECT"
  ];

  // Send flag
  var sendFlag = false;
  // Error flag, used when errors occur or abort is called
  var errorFlag = false;

  // Event listeners
  var listeners = {};

  /**
   * Constants
   */

  this.UNSENT = 0;
  this.OPENED = 1;
  this.HEADERS_RECEIVED = 2;
  this.LOADING = 3;
  this.DONE = 4;

  /**
   * Public vars
   */

  // Current state
  this.readyState = this.UNSENT;

  // default ready state change handler in case one is not set or is set late
  this.onreadystatechange = null;

  // Result & response
  this.responseText = "";
  this.responseXML = "";
  this.status = null;
  this.statusText = null;
  
  // Whether cross-site Access-Control requests should be made using
  // credentials such as cookies or authorization headers
  this.withCredentials = false;

  /**
   * Private methods
   */

  /**
   * Check if the specified header is allowed.
   *
   * @param string header Header to validate
   * @return boolean False if not allowed, otherwise true
   */
  var isAllowedHttpHeader = function(header) {
    return disableHeaderCheck || (header && forbiddenRequestHeaders.indexOf(header.toLowerCase()) === -1);
  };

  /**
   * Check if the specified method is allowed.
   *
   * @param string method Request method to validate
   * @return boolean False if not allowed, otherwise true
   */
  var isAllowedHttpMethod = function(method) {
    return (method && forbiddenRequestMethods.indexOf(method) === -1);
  };

  /**
   * Public methods
   */

  /**
   * Open the connection. Currently supports local server requests.
   *
   * @param string method Connection method (eg GET, POST)
   * @param string url URL for the connection.
   * @param boolean async Asynchronous connection. Default is true.
   * @param string user Username for basic authentication (optional)
   * @param string password Password for basic authentication (optional)
   */
  this.open = function(method, url, async, user, password) {
    this.abort();
    errorFlag = false;

    // Check for valid request method
    if (!isAllowedHttpMethod(method)) {
      throw new Error("SecurityError: Request method not allowed");
    }

    settings = {
      "method": method,
      "url": url.toString(),
      "async": (typeof async !== "boolean" ? true : async),
      "user": user || null,
      "password": password || null
    };

    setState(this.OPENED);
  };

  /**
   * Disables or enables isAllowedHttpHeader() check the request. Enabled by default.
   * This does not conform to the W3C spec.
   *
   * @param boolean state Enable or disable header checking.
   */
  this.setDisableHeaderCheck = function(state) {
    disableHeaderCheck = state;
  };

  /**
   * Sets a header for the request or appends the value if one is already set.
   *
   * @param string header Header name
   * @param string value Header value
   */
  this.setRequestHeader = function(header, value) {
    if (this.readyState !== this.OPENED) {
      throw new Error("INVALID_STATE_ERR: setRequestHeader can only be called when state is OPEN");
    }
    if (!isAllowedHttpHeader(header)) {
      console.warn("Refused to set unsafe header \"" + header + "\"");
      return;
    }
    if (sendFlag) {
      throw new Error("INVALID_STATE_ERR: send flag is true");
    }
    header = headersCase[header.toLowerCase()] || header;
    headersCase[header.toLowerCase()] = header;
    headers[header] = headers[header] ? headers[header] + ', ' + value : value;
  };

  /**
   * Gets a header from the server response.
   *
   * @param string header Name of header to get.
   * @return string Text of the header or null if it doesn't exist.
   */
  this.getResponseHeader = function(header) {
    if (typeof header === "string"
      && this.readyState > this.OPENED
      && response
      && response.headers
      && response.headers[header.toLowerCase()]
      && !errorFlag
    ) {
      return response.headers[header.toLowerCase()];
    }

    return null;
  };

  /**
   * Gets all the response headers.
   *
   * @return string A string with all response headers separated by CR+LF
   */
  this.getAllResponseHeaders = function() {
    if (this.readyState < this.HEADERS_RECEIVED || errorFlag) {
      return "";
    }
    var result = "";

    for (var i in response.headers) {
      // Cookie headers are excluded
      if (i !== "set-cookie" && i !== "set-cookie2") {
        result += i + ": " + response.headers[i] + "\r\n";
      }
    }
    return result.substr(0, result.length - 2);
  };

  /**
   * Gets a request header
   *
   * @param string name Name of header to get
   * @return string Returns the request header or empty string if not set
   */
  this.getRequestHeader = function(name) {
    if (typeof name === "string" && headersCase[name.toLowerCase()]) {
      return headers[headersCase[name.toLowerCase()]];
    }

    return "";
  };

  /**
   * Sends the request to the server.
   *
   * @param string data Optional data to send as request body.
   */
  this.send = function(data) {
    if (this.readyState !== this.OPENED) {
      throw new Error("INVALID_STATE_ERR: connection must be opened before send() is called");
    }

    if (sendFlag) {
      throw new Error("INVALID_STATE_ERR: send has already been called");
    }

    var ssl = false, local = false;
    var url = Url.parse(settings.url);
    var host;
    // Determine the server
    switch (url.protocol) {
      case "https:":
        ssl = true;
        // SSL & non-SSL both need host, no break here.
      case "http:":
        host = url.hostname;
        break;

      case "file:":
        local = true;
        break;

      case undefined:
      case null:
      case "":
        host = "localhost";
        break;

      default:
        throw new Error("Protocol not supported.");
    }

    // Load files off the local filesystem (file://)
    if (local) {
      if (settings.method !== "GET") {
        throw new Error("XMLHttpRequest: Only GET method is supported");
      }

      if (settings.async) {
        fs.readFile(url.pathname, "utf8", function(error, data) {
          if (error) {
            self.handleError(error);
          } else {
            self.status = 200;
            self.responseText = data;
            setState(self.DONE);
          }
        });
      } else {
        try {
          this.responseText = fs.readFileSync(url.pathname, "utf8");
          this.status = 200;
          setState(self.DONE);
        } catch(e) {
          this.handleError(e);
        }
      }

      return;
    }

    // Default to port 80. If accessing localhost on another port be sure
    // to use http://localhost:port/path
    var port = url.port || (ssl ? 443 : 80);
    // Add query string if one is used
    var uri = url.pathname + (url.search ? url.search : "");

    // Set the defaults if they haven't been set
    for (var name in defaultHeaders) {
      if (!headersCase[name.toLowerCase()]) {
        headers[name] = defaultHeaders[name];
      }
    }

    // Set the Host header or the server may reject the request
    headers.Host = host;
    if (!((ssl && port === 443) || port === 80)) {
      headers.Host += ":" + url.port;
    }

    // Set Basic Auth if necessary
    if (settings.user) {
      if (typeof settings.password === "undefined") {
        settings.password = "";
      }
      var authBuf = new Buffer(settings.user + ":" + settings.password);
      headers.Authorization = "Basic " + authBuf.toString("base64");
    }

    // Set content length header
    if (settings.method === "GET" || settings.method === "HEAD") {
      data = null;
    } else if (data) {
      headers["Content-Length"] = Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data);

      if (!headers["Content-Type"]) {
        headers["Content-Type"] = "text/plain;charset=UTF-8";
      }
    } else if (settings.method === "POST") {
      // For a post with no data set Content-Length: 0.
      // This is required by buggy servers that don't meet the specs.
      headers["Content-Length"] = 0;
    }

    var options = {
      host: host,
      port: port,
      path: uri,
      method: settings.method,
      headers: headers,
      agent: false,
      withCredentials: self.withCredentials
    };

    // Reset error flag
    errorFlag = false;

    // Handle async requests
    if (settings.async) {
      // Use the proper protocol
      var doRequest = ssl ? https.request : http.request;

      // Request is being sent, set send flag
      sendFlag = true;

      // As per spec, this is called here for historical reasons.
      self.dispatchEvent("readystatechange");

      // Handler for the response
      var responseHandler = function responseHandler(resp) {
        // Set response var to the response we got back
        // This is so it remains accessable outside this scope
        response = resp;
        // Check for redirect
        // @TODO Prevent looped redirects
        if (response.statusCode === 301 || response.statusCode === 302 || response.statusCode === 303 || response.statusCode === 307) {
          // Change URL to the redirect location
          settings.url = response.headers.location;
          var url = Url.parse(settings.url);
          // Set host var in case it's used later
          host = url.hostname;
          // Options for the new request
          var newOptions = {
            hostname: url.hostname,
            port: url.port,
            path: url.path,
            method: response.statusCode === 303 ? "GET" : settings.method,
            headers: headers,
            withCredentials: self.withCredentials
          };

          // Issue the new request
          request = doRequest(newOptions, responseHandler).on("error", errorHandler);
          request.end();
          // @TODO Check if an XHR event needs to be fired here
          return;
        }

        response.setEncoding("utf8");

        setState(self.HEADERS_RECEIVED);
        self.status = response.statusCode;

        response.on("data", function(chunk) {
          // Make sure there's some data
          if (chunk) {
            self.responseText += chunk;
          }
          // Don't emit state changes if the connection has been aborted.
          if (sendFlag) {
            setState(self.LOADING);
          }
        });

        response.on("end", function() {
          if (sendFlag) {
            // Discard the end event if the connection has been aborted
            setState(self.DONE);
            sendFlag = false;
          }
        });

        response.on("error", function(error) {
          self.handleError(error);
        });
      };

      // Error handler for the request
      var errorHandler = function errorHandler(error) {
        self.handleError(error);
      };

      // Create the request
      request = doRequest(options, responseHandler).on("error", errorHandler);

      // Node 0.4 and later won't accept empty data. Make sure it's needed.
      if (data) {
        request.write(data);
      }

      request.end();

      self.dispatchEvent("loadstart");
    } else { // Synchronous
      // Create a temporary file for communication with the other Node process
      var contentFile = ".node-xmlhttprequest-content-" + process.pid;
      var syncFile = ".node-xmlhttprequest-sync-" + process.pid;
      fs.writeFileSync(syncFile, "", "utf8");
      // The async request the other Node process executes
      var execString = "var http = require('http'), https = require('https'), fs = require('fs');"
        + "var doRequest = http" + (ssl ? "s" : "") + ".request;"
        + "var options = " + JSON.stringify(options) + ";"
        + "var responseText = '';"
        + "var req = doRequest(options, function(response) {"
        + "response.setEncoding('utf8');"
        + "response.on('data', function(chunk) {"
        + "  responseText += chunk;"
        + "});"
        + "response.on('end', function() {"
        + "fs.writeFileSync('" + contentFile + "', JSON.stringify({err: null, data: {statusCode: response.statusCode, headers: response.headers, text: responseText}}), 'utf8');"
        + "fs.unlinkSync('" + syncFile + "');"
        + "});"
        + "response.on('error', function(error) {"
        + "fs.writeFileSync('" + contentFile + "', JSON.stringify({err: error}), 'utf8');"
        + "fs.unlinkSync('" + syncFile + "');"
        + "});"
        + "}).on('error', function(error) {"
        + "fs.writeFileSync('" + contentFile + "', JSON.stringify({err: error}), 'utf8');"
        + "fs.unlinkSync('" + syncFile + "');"
        + "});"
        + (data ? "req.write('" + JSON.stringify(data).slice(1,-1).replace(/'/g, "\\'") + "');":"")
        + "req.end();";
      // Start the other Node Process, executing this string
      var syncProc = spawn(process.argv[0], ["-e", execString]);
      while(fs.existsSync(syncFile)) {
        // Wait while the sync file is empty
      }
      var resp = JSON.parse(fs.readFileSync(contentFile, 'utf8'));
      // Kill the child process once the file has data
      syncProc.stdin.end();
      // Remove the temporary file
      fs.unlinkSync(contentFile);

      if (resp.err) {
        self.handleError(resp.err);
      } else {
        response = resp.data;
        self.status = resp.data.statusCode;
        self.responseText = resp.data.text;
        setState(self.DONE);
      }
    }
  };

  /**
   * Called when an error is encountered to deal with it.
   */
  this.handleError = function(error) {
    this.status = 0;
    this.statusText = error;
    this.responseText = error.stack;
    errorFlag = true;
    setState(this.DONE);
    this.dispatchEvent('error');
  };

  /**
   * Aborts a request.
   */
  this.abort = function() {
    if (request) {
      request.abort();
      request = null;
    }

    headers = defaultHeaders;
    this.status = 0;
    this.responseText = "";
    this.responseXML = "";

    errorFlag = true;

    if (this.readyState !== this.UNSENT
        && (this.readyState !== this.OPENED || sendFlag)
        && this.readyState !== this.DONE) {
      sendFlag = false;
      setState(this.DONE);
    }
    this.readyState = this.UNSENT;
    this.dispatchEvent('abort');
  };

  /**
   * Adds an event listener. Preferred method of binding to events.
   */
  this.addEventListener = function(event, callback) {
    if (!(event in listeners)) {
      listeners[event] = [];
    }
    // Currently allows duplicate callbacks. Should it?
    listeners[event].push(callback);
  };

  /**
   * Remove an event callback that has already been bound.
   * Only works on the matching funciton, cannot be a copy.
   */
  this.removeEventListener = function(event, callback) {
    if (event in listeners) {
      // Filter will return a new array with the callback removed
      listeners[event] = listeners[event].filter(function(ev) {
        return ev !== callback;
      });
    }
  };

  /**
   * Dispatch any events, including both "on" methods and events attached using addEventListener.
   */
  this.dispatchEvent = function(event) {
    if (typeof self["on" + event] === "function") {
      self["on" + event]();
    }
    if (event in listeners) {
      for (var i = 0, len = listeners[event].length; i < len; i++) {
        listeners[event][i].call(self);
      }
    }
  };

  /**
   * Changes readyState and calls onreadystatechange.
   *
   * @param int state New state
   */
  var setState = function(state) {
    if (state == self.LOADING || self.readyState !== state) {
      self.readyState = state;

      if (settings.async || self.readyState < self.OPENED || self.readyState === self.DONE) {
        self.dispatchEvent("readystatechange");
      }

      if (self.readyState === self.DONE && !errorFlag) {
        self.dispatchEvent("load");
        // @TODO figure out InspectorInstrumentation::didLoadXHR(cookie)
        self.dispatchEvent("loadend");
      }
    }
  };
};


/***/ }),
/* 143 */
/***/ (function(module, exports) {

module.exports = require("child_process");

/***/ }),
/* 144 */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var base_provider_1 = __webpack_require__(43);
var bytes_1 = __webpack_require__(5);
var properties_1 = __webpack_require__(7);
var web_1 = __webpack_require__(45);
var errors = __importStar(__webpack_require__(4));
///////////////////////////////
// The transaction has already been sanitized by the calls in Provider
function getTransactionString(transaction) {
    var result = [];
    for (var key in transaction) {
        if (transaction[key] == null) {
            continue;
        }
        var value = bytes_1.hexlify(transaction[key]);
        if ({ gasLimit: true, gasPrice: true, nonce: true, value: true }[key]) {
            value = bytes_1.hexStripZeros(value);
        }
        result.push(key + '=' + value);
    }
    return result.join('&');
}
function getResult(result) {
    // getLogs, getHistory have weird success responses
    if (result.status == 0 && (result.message === 'No records found' || result.message === 'No transactions found')) {
        return result.result;
    }
    if (result.status != 1 || result.message != 'OK') {
        // @TODO: not any
        var error = new Error('invalid response');
        error.result = JSON.stringify(result);
        throw error;
    }
    return result.result;
}
function getJsonResult(result) {
    if (result.jsonrpc != '2.0') {
        // @TODO: not any
        var error = new Error('invalid response');
        error.result = JSON.stringify(result);
        throw error;
    }
    if (result.error) {
        // @TODO: not any
        var error = new Error(result.error.message || 'unknown error');
        if (result.error.code) {
            error.code = result.error.code;
        }
        if (result.error.data) {
            error.data = result.error.data;
        }
        throw error;
    }
    return result.result;
}
// The blockTag was normalized as a string by the Provider pre-perform operations
function checkLogTag(blockTag) {
    if (blockTag === 'pending') {
        throw new Error('pending not supported');
    }
    if (blockTag === 'latest') {
        return blockTag;
    }
    return parseInt(blockTag.substring(2), 16);
}
var EtherscanProvider = /** @class */ (function (_super) {
    __extends(EtherscanProvider, _super);
    function EtherscanProvider(network, apiKey) {
        var _this = _super.call(this, network) || this;
        errors.checkNew(_this, EtherscanProvider);
        var name = 'invalid';
        if (_this.network) {
            name = _this.network.name;
        }
        var baseUrl = null;
        switch (name) {
            case 'homestead':
                baseUrl = 'https://api.etherscan.io';
                break;
            case 'ropsten':
                baseUrl = 'https://api-ropsten.etherscan.io';
                break;
            case 'rinkeby':
                baseUrl = 'https://api-rinkeby.etherscan.io';
                break;
            case 'kovan':
                baseUrl = 'https://api-kovan.etherscan.io';
                break;
            case 'goerli':
                baseUrl = 'https://api-goerli.etherscan.io';
                break;
            default:
                throw new Error('unsupported network');
        }
        properties_1.defineReadOnly(_this, 'baseUrl', baseUrl);
        properties_1.defineReadOnly(_this, 'apiKey', apiKey);
        return _this;
    }
    EtherscanProvider.prototype.perform = function (method, params) {
        var _this = this;
        var url = this.baseUrl;
        var apiKey = '';
        if (this.apiKey) {
            apiKey += '&apikey=' + this.apiKey;
        }
        var get = function (url, procFunc) {
            return web_1.fetchJson(url, null, procFunc || getJsonResult).then(function (result) {
                _this.emit('debug', {
                    action: 'perform',
                    request: url,
                    response: result,
                    provider: _this
                });
                return result;
            });
        };
        switch (method) {
            case 'getBlockNumber':
                url += '/api?module=proxy&action=eth_blockNumber' + apiKey;
                return get(url);
            case 'getGasPrice':
                url += '/api?module=proxy&action=eth_gasPrice' + apiKey;
                return get(url);
            case 'getBalance':
                // Returns base-10 result
                url += '/api?module=account&action=balance&address=' + params.address;
                url += '&tag=' + params.blockTag + apiKey;
                return get(url, getResult);
            case 'getTransactionCount':
                url += '/api?module=proxy&action=eth_getTransactionCount&address=' + params.address;
                url += '&tag=' + params.blockTag + apiKey;
                return get(url);
            case 'getCode':
                url += '/api?module=proxy&action=eth_getCode&address=' + params.address;
                url += '&tag=' + params.blockTag + apiKey;
                return get(url, getJsonResult);
            case 'getStorageAt':
                url += '/api?module=proxy&action=eth_getStorageAt&address=' + params.address;
                url += '&position=' + params.position;
                url += '&tag=' + params.blockTag + apiKey;
                return get(url, getJsonResult);
            case 'sendTransaction':
                url += '/api?module=proxy&action=eth_sendRawTransaction&hex=' + params.signedTransaction;
                url += apiKey;
                return get(url).catch(function (error) {
                    if (error.responseText) {
                        // "Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0"
                        if (error.responseText.toLowerCase().indexOf('insufficient funds') >= 0) {
                            errors.throwError('insufficient funds', errors.INSUFFICIENT_FUNDS, {});
                        }
                        // "Transaction with the same hash was already imported."
                        if (error.responseText.indexOf('same hash was already imported') >= 0) {
                            errors.throwError('nonce has already been used', errors.NONCE_EXPIRED, {});
                        }
                        // "Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce."
                        if (error.responseText.indexOf('another transaction with same nonce') >= 0) {
                            errors.throwError('replacement fee too low', errors.REPLACEMENT_UNDERPRICED, {});
                        }
                    }
                    throw error;
                });
            case 'getBlock':
                if (params.blockTag) {
                    url += '/api?module=proxy&action=eth_getBlockByNumber&tag=' + params.blockTag;
                    if (params.includeTransactions) {
                        url += '&boolean=true';
                    }
                    else {
                        url += '&boolean=false';
                    }
                    url += apiKey;
                    return get(url);
                }
                throw new Error('getBlock by blockHash not implmeneted');
            case 'getTransaction':
                url += '/api?module=proxy&action=eth_getTransactionByHash&txhash=' + params.transactionHash;
                url += apiKey;
                return get(url);
            case 'getTransactionReceipt':
                url += '/api?module=proxy&action=eth_getTransactionReceipt&txhash=' + params.transactionHash;
                url += apiKey;
                return get(url);
            case 'call': {
                var transaction = getTransactionString(params.transaction);
                if (transaction) {
                    transaction = '&' + transaction;
                }
                url += '/api?module=proxy&action=eth_call' + transaction;
                //url += '&tag=' + params.blockTag + apiKey;
                if (params.blockTag !== 'latest') {
                    throw new Error('EtherscanProvider does not support blockTag for call');
                }
                url += apiKey;
                return get(url);
            }
            case 'estimateGas': {
                var transaction = getTransactionString(params.transaction);
                if (transaction) {
                    transaction = '&' + transaction;
                }
                url += '/api?module=proxy&action=eth_estimateGas&' + transaction;
                url += apiKey;
                return get(url);
            }
            case 'getLogs':
                url += '/api?module=logs&action=getLogs';
                try {
                    if (params.filter.fromBlock) {
                        url += '&fromBlock=' + checkLogTag(params.filter.fromBlock);
                    }
                    if (params.filter.toBlock) {
                        url += '&toBlock=' + checkLogTag(params.filter.toBlock);
                    }
                    if (params.filter.blockHash) {
                        try {
                            errors.throwError("Etherscan does not support blockHash filters", errors.UNSUPPORTED_OPERATION, {
                                operation: "getLogs(blockHash)"
                            });
                        }
                        catch (error) {
                            return Promise.reject(error);
                        }
                    }
                    if (params.filter.address) {
                        url += '&address=' + params.filter.address;
                    }
                    // @TODO: We can handle slightly more complicated logs using the logs API
                    if (params.filter.topics && params.filter.topics.length > 0) {
                        if (params.filter.topics.length > 1) {
                            throw new Error('unsupported topic format');
                        }
                        var topic0 = params.filter.topics[0];
                        if (typeof (topic0) !== 'string' || topic0.length !== 66) {
                            throw new Error('unsupported topic0 format');
                        }
                        url += '&topic0=' + topic0;
                    }
                }
                catch (error) {
                    return Promise.reject(error);
                }
                url += apiKey;
                var self = this;
                return get(url, getResult).then(function (logs) {
                    var txs = {};
                    var seq = Promise.resolve();
                    logs.forEach(function (log) {
                        seq = seq.then(function () {
                            if (log.blockHash != null) {
                                return null;
                            }
                            log.blockHash = txs[log.transactionHash];
                            if (log.blockHash == null) {
                                return self.getTransaction(log.transactionHash).then(function (tx) {
                                    txs[log.transactionHash] = tx.blockHash;
                                    log.blockHash = tx.blockHash;
                                    return null;
                                });
                            }
                            return null;
                        });
                    });
                    return seq.then(function () {
                        return logs;
                    });
                });
            case 'getEtherPrice':
                if (this.network.name !== 'homestead') {
                    return Promise.resolve(0.0);
                }
                url += '/api?module=stats&action=ethprice';
                url += apiKey;
                return get(url, getResult).then(function (result) {
                    return parseFloat(result.ethusd);
                });
            default:
                break;
        }
        return _super.prototype.perform.call(this, method, params);
    };
    // @TODO: Allow startBlock and endBlock to be Promises
    EtherscanProvider.prototype.getHistory = function (addressOrName, startBlock, endBlock) {
        var _this = this;
        var url = this.baseUrl;
        var apiKey = '';
        if (this.apiKey) {
            apiKey += '&apikey=' + this.apiKey;
        }
        if (startBlock == null) {
            startBlock = 0;
        }
        if (endBlock == null) {
            endBlock = 99999999;
        }
        return this.resolveName(addressOrName).then(function (address) {
            url += '/api?module=account&action=txlist&address=' + address;
            url += '&startblock=' + startBlock;
            url += '&endblock=' + endBlock;
            url += '&sort=asc' + apiKey;
            return web_1.fetchJson(url, null, getResult).then(function (result) {
                _this.emit('debug', {
                    action: 'getHistory',
                    request: url,
                    response: result,
                    provider: _this
                });
                var output = [];
                result.forEach(function (tx) {
                    ['contractAddress', 'to'].forEach(function (key) {
                        if (tx[key] == '') {
                            delete tx[key];
                        }
                    });
                    if (tx.creates == null && tx.contractAddress != null) {
                        tx.creates = tx.contractAddress;
                    }
                    var item = base_provider_1.BaseProvider.checkTransactionResponse(tx);
                    if (tx.timeStamp) {
                        item.timestamp = parseInt(tx.timeStamp);
                    }
                    output.push(item);
                });
                return output;
            });
        });
    };
    return EtherscanProvider;
}(base_provider_1.BaseProvider));
exports.EtherscanProvider = EtherscanProvider;


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var base_provider_1 = __webpack_require__(43);
var errors = __importStar(__webpack_require__(4));
// Returns:
//  - true is all networks match
//  - false if any network is null
//  - throws if any 2 networks do not match
function checkNetworks(networks) {
    var result = true;
    var check = null;
    networks.forEach(function (network) {
        // Null
        if (network == null) {
            result = false;
            return;
        }
        // Have nothing to compre to yet
        if (check == null) {
            check = network;
            return;
        }
        // Matches!
        if (check.name === network.name &&
            check.chainId === network.chainId &&
            ((check.ensAddress === network.ensAddress) ||
                (check.ensAddress == null && network.ensAddress == null))) {
            return;
        }
        errors.throwError('provider mismatch', errors.INVALID_ARGUMENT, { arg: 'networks', value: networks });
    });
    return result;
}
var FallbackProvider = /** @class */ (function (_super) {
    __extends(FallbackProvider, _super);
    function FallbackProvider(providers) {
        var _this = this;
        if (providers.length === 0) {
            throw new Error('no providers');
        }
        // All networks are ready, we can know the network for certain
        var ready = checkNetworks(providers.map(function (p) { return p.network; }));
        if (ready) {
            _this = _super.call(this, providers[0].network) || this;
        }
        else {
            // The network won't be known until all child providers know
            var ready_1 = Promise.all(providers.map(function (p) { return p.getNetwork(); })).then(function (networks) {
                if (!checkNetworks(networks)) {
                    errors.throwError('getNetwork returned null', errors.UNKNOWN_ERROR, {});
                }
                return networks[0];
            });
            _this = _super.call(this, ready_1) || this;
        }
        errors.checkNew(_this, FallbackProvider);
        // Preserve a copy, so we don't get mutated
        _this._providers = providers.slice(0);
        return _this;
    }
    Object.defineProperty(FallbackProvider.prototype, "providers", {
        get: function () {
            // Return a copy, so we don't get mutated
            return this._providers.slice(0);
        },
        enumerable: true,
        configurable: true
    });
    FallbackProvider.prototype.perform = function (method, params) {
        // Creates a copy of the providers array
        var providers = this.providers;
        return new Promise(function (resolve, reject) {
            var firstError = null;
            function next() {
                if (!providers.length) {
                    reject(firstError);
                    return;
                }
                var provider = providers.shift();
                provider.perform(method, params).then(function (result) {
                    return resolve(result);
                }).catch(function (error) {
                    if (!firstError) {
                        firstError = error;
                    }
                    setTimeout(next, 0);
                });
            }
            next();
        });
    };
    return FallbackProvider;
}(base_provider_1.BaseProvider));
exports.FallbackProvider = FallbackProvider;


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var net_1 = __importDefault(__webpack_require__(148));
var json_rpc_provider_1 = __webpack_require__(46);
var properties_1 = __webpack_require__(7);
var errors = __importStar(__webpack_require__(4));
var IpcProvider = /** @class */ (function (_super) {
    __extends(IpcProvider, _super);
    function IpcProvider(path, network) {
        var _this = this;
        if (path == null) {
            errors.throwError('missing path', errors.MISSING_ARGUMENT, {
                argument: 'path'
            });
        }
        _this = _super.call(this, 'ipc://' + path, network) || this;
        errors.checkNew(_this, IpcProvider);
        properties_1.defineReadOnly(_this, 'path', path);
        return _this;
    }
    // @TODO: Create a connection to the IPC path and use filters instead of polling for block
    IpcProvider.prototype.send = function (method, params) {
        // This method is very simple right now. We create a new socket
        // connection each time, which may be slower, but the main
        // advantage we are aiming for now is security. This simplifies
        // multiplexing requests (since we do not need to multiplex).
        var _this = this;
        var payload = JSON.stringify({
            method: method,
            params: params,
            id: 42,
            jsonrpc: "2.0"
        });
        return new Promise(function (resolve, reject) {
            var response = Buffer.alloc(0);
            var stream = net_1.default.connect(_this.path);
            stream.on('data', function (data) {
                response = Buffer.concat([response, data]);
            });
            stream.on("end", function () {
                try {
                    resolve(JSON.parse(response.toString('utf8')).result);
                    // @TODO: Better pull apart the error
                    stream.destroy();
                }
                catch (error) {
                    reject(error);
                    stream.destroy();
                }
            });
            stream.on('error', function (error) {
                reject(error);
                stream.destroy();
            });
            stream.write(payload);
            stream.end();
        });
    };
    return IpcProvider;
}(json_rpc_provider_1.JsonRpcProvider));
exports.IpcProvider = IpcProvider;


/***/ }),
/* 148 */
/***/ (function(module, exports) {

module.exports = require("net");

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var json_rpc_provider_1 = __webpack_require__(46);
var bytes_1 = __webpack_require__(5);
var networks_1 = __webpack_require__(44);
var properties_1 = __webpack_require__(7);
var errors = __importStar(__webpack_require__(4));
var defaultProjectId = "7d0d81d0919f4f05b9ab6634be01ee73";
var InfuraProvider = /** @class */ (function (_super) {
    __extends(InfuraProvider, _super);
    function InfuraProvider(network, projectId) {
        var _this = this;
        var standard = networks_1.getNetwork((network == null) ? 'homestead' : network);
        if (projectId == null) {
            projectId = defaultProjectId;
        }
        var host = null;
        switch (standard.name) {
            case 'homestead':
                host = 'mainnet.infura.io';
                break;
            case 'ropsten':
                host = 'ropsten.infura.io';
                break;
            case 'rinkeby':
                host = 'rinkeby.infura.io';
                break;
            case 'goerli':
                host = 'goerli.infura.io';
                break;
            case 'kovan':
                host = 'kovan.infura.io';
                break;
            default:
                errors.throwError('unsupported network', errors.INVALID_ARGUMENT, {
                    argument: "network",
                    value: network
                });
        }
        // New-style Project ID
        if (bytes_1.isHexString("0x" + projectId, 16)) {
            _this = _super.call(this, 'https://' + host + '/v3/' + projectId, standard) || this;
            properties_1.defineReadOnly(_this, 'apiAccessToken', null);
            properties_1.defineReadOnly(_this, 'projectId', projectId);
            // Legacy API Access Token
        }
        else {
            _this = _super.call(this, 'https://' + host + '/' + projectId, standard) || this;
            properties_1.defineReadOnly(_this, 'apiAccessToken', projectId);
            properties_1.defineReadOnly(_this, 'projectId', null);
        }
        errors.checkNew(_this, InfuraProvider);
        return _this;
    }
    InfuraProvider.prototype._startPending = function () {
        errors.warn('WARNING: INFURA does not support pending filters');
    };
    InfuraProvider.prototype.getSigner = function (address) {
        return errors.throwError('INFURA does not support signing', errors.UNSUPPORTED_OPERATION, { operation: 'getSigner' });
    };
    InfuraProvider.prototype.listAccounts = function () {
        return Promise.resolve([]);
    };
    return InfuraProvider;
}(json_rpc_provider_1.JsonRpcProvider));
exports.InfuraProvider = InfuraProvider;


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var json_rpc_provider_1 = __webpack_require__(46);
var properties_1 = __webpack_require__(7);
var errors = __importStar(__webpack_require__(4));
/*
@TODO
utils.defineProperty(Web3Signer, 'onchange', {

});

*/
var Web3Provider = /** @class */ (function (_super) {
    __extends(Web3Provider, _super);
    function Web3Provider(web3Provider, network) {
        var _this = 
        // HTTP has a host; IPC has a path.
        _super.call(this, web3Provider.host || web3Provider.path || '', network) || this;
        errors.checkNew(_this, Web3Provider);
        if (web3Provider) {
            if (web3Provider.sendAsync) {
                _this._sendAsync = web3Provider.sendAsync.bind(web3Provider);
            }
            else if (web3Provider.send) {
                _this._sendAsync = web3Provider.send.bind(web3Provider);
            }
        }
        if (!web3Provider || !_this._sendAsync) {
            errors.throwError('invalid web3Provider', errors.INVALID_ARGUMENT, { arg: 'web3Provider', value: web3Provider });
        }
        properties_1.defineReadOnly(_this, '_web3Provider', web3Provider);
        return _this;
    }
    Web3Provider.prototype.send = function (method, params) {
        var _this = this;
        // Metamask complains about eth_sign (and on some versions hangs)
        if (method == 'eth_sign' && this._web3Provider.isMetaMask) {
            // https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign
            method = 'personal_sign';
            params = [params[1], params[0]];
        }
        return new Promise(function (resolve, reject) {
            var request = {
                method: method,
                params: params,
                id: 42,
                jsonrpc: "2.0"
            };
            _this._sendAsync(request, function (error, result) {
                if (error) {
                    reject(error);
                    return;
                }
                if (result.error) {
                    // @TODO: not any
                    var error = new Error(result.error.message);
                    error.code = result.error.code;
                    error.data = result.error.data;
                    reject(error);
                    return;
                }
                resolve(result.result);
            });
        });
    };
    return Web3Provider;
}(json_rpc_provider_1.JsonRpcProvider));
exports.Web3Provider = Web3Provider;


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var abi_coder_1 = __webpack_require__(51);
exports.AbiCoder = abi_coder_1.AbiCoder;
exports.defaultAbiCoder = abi_coder_1.defaultAbiCoder;
exports.formatSignature = abi_coder_1.formatSignature;
exports.formatParamType = abi_coder_1.formatParamType;
exports.parseSignature = abi_coder_1.parseSignature;
exports.parseParamType = abi_coder_1.parseParamType;
var address_1 = __webpack_require__(16);
exports.getAddress = address_1.getAddress;
exports.getContractAddress = address_1.getContractAddress;
exports.getIcapAddress = address_1.getIcapAddress;
var base64 = __importStar(__webpack_require__(81));
exports.base64 = base64;
var bignumber_1 = __webpack_require__(15);
exports.BigNumber = bignumber_1.BigNumber;
exports.bigNumberify = bignumber_1.bigNumberify;
var bytes_1 = __webpack_require__(5);
exports.arrayify = bytes_1.arrayify;
exports.concat = bytes_1.concat;
exports.hexDataSlice = bytes_1.hexDataSlice;
exports.hexDataLength = bytes_1.hexDataLength;
exports.hexlify = bytes_1.hexlify;
exports.hexStripZeros = bytes_1.hexStripZeros;
exports.hexZeroPad = bytes_1.hexZeroPad;
exports.isHexString = bytes_1.isHexString;
exports.joinSignature = bytes_1.joinSignature;
exports.padZeros = bytes_1.padZeros;
exports.splitSignature = bytes_1.splitSignature;
exports.stripZeros = bytes_1.stripZeros;
var hash_1 = __webpack_require__(28);
exports.hashMessage = hash_1.hashMessage;
exports.id = hash_1.id;
exports.namehash = hash_1.namehash;
var HDNode = __importStar(__webpack_require__(38));
exports.HDNode = HDNode;
var interface_1 = __webpack_require__(72);
exports.Interface = interface_1.Interface;
var json_wallet_1 = __webpack_require__(80);
exports.getJsonWalletAddress = json_wallet_1.getJsonWalletAddress;
var keccak256_1 = __webpack_require__(19);
exports.keccak256 = keccak256_1.keccak256;
var sha2_1 = __webpack_require__(53);
exports.sha256 = sha2_1.sha256;
var solidity_1 = __webpack_require__(152);
exports.solidityKeccak256 = solidity_1.keccak256;
exports.solidityPack = solidity_1.pack;
exports.soliditySha256 = solidity_1.sha256;
var random_bytes_1 = __webpack_require__(54);
exports.randomBytes = random_bytes_1.randomBytes;
var networks_1 = __webpack_require__(44);
exports.getNetwork = networks_1.getNetwork;
var properties_1 = __webpack_require__(7);
exports.checkProperties = properties_1.checkProperties;
exports.deepCopy = properties_1.deepCopy;
exports.defineReadOnly = properties_1.defineReadOnly;
exports.resolveProperties = properties_1.resolveProperties;
exports.shallowCopy = properties_1.shallowCopy;
var RLP = __importStar(__webpack_require__(36));
exports.RLP = RLP;
var secp256k1_1 = __webpack_require__(39);
exports.computeAddress = secp256k1_1.computeAddress;
exports.computePublicKey = secp256k1_1.computePublicKey;
exports.recoverAddress = secp256k1_1.recoverAddress;
exports.recoverPublicKey = secp256k1_1.recoverPublicKey;
exports.verifyMessage = secp256k1_1.verifyMessage;
var signing_key_1 = __webpack_require__(55);
exports.SigningKey = signing_key_1.SigningKey;
var transaction_1 = __webpack_require__(42);
exports.populateTransaction = transaction_1.populateTransaction;
var transaction_2 = __webpack_require__(42);
exports.parseTransaction = transaction_2.parse;
exports.serializeTransaction = transaction_2.serialize;
var utf8_1 = __webpack_require__(9);
exports.formatBytes32String = utf8_1.formatBytes32String;
exports.parseBytes32String = utf8_1.parseBytes32String;
exports.toUtf8Bytes = utf8_1.toUtf8Bytes;
exports.toUtf8String = utf8_1.toUtf8String;
var units_1 = __webpack_require__(153);
exports.commify = units_1.commify;
exports.formatEther = units_1.formatEther;
exports.parseEther = units_1.parseEther;
exports.formatUnits = units_1.formatUnits;
exports.parseUnits = units_1.parseUnits;
var web_1 = __webpack_require__(45);
exports.fetchJson = web_1.fetchJson;
////////////////////////
// Enums
var hmac_1 = __webpack_require__(75);
exports.SupportedAlgorithms = hmac_1.SupportedAlgorithms;
var utf8_2 = __webpack_require__(9);
exports.UnicodeNormalizationForm = utf8_2.UnicodeNormalizationForm;
var wordlist_1 = __webpack_require__(21);
exports.Wordlist = wordlist_1.Wordlist;


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_1 = __webpack_require__(15);
var bytes_1 = __webpack_require__(5);
var utf8_1 = __webpack_require__(9);
var keccak256_1 = __webpack_require__(19);
var sha2_1 = __webpack_require__(53);
var regexBytes = new RegExp("^bytes([0-9]+)$");
var regexNumber = new RegExp("^(u?int)([0-9]*)$");
var regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
var Zeros = '0000000000000000000000000000000000000000000000000000000000000000';
function _pack(type, value, isArray) {
    switch (type) {
        case 'address':
            if (isArray) {
                return bytes_1.padZeros(value, 32);
            }
            return bytes_1.arrayify(value);
        case 'string':
            return utf8_1.toUtf8Bytes(value);
        case 'bytes':
            return bytes_1.arrayify(value);
        case 'bool':
            value = (value ? '0x01' : '0x00');
            if (isArray) {
                return bytes_1.padZeros(value, 32);
            }
            return bytes_1.arrayify(value);
    }
    var match = type.match(regexNumber);
    if (match) {
        //var signed = (match[1] === 'int')
        var size = parseInt(match[2] || "256");
        if ((size % 8 != 0) || size === 0 || size > 256) {
            throw new Error('invalid number type - ' + type);
        }
        if (isArray) {
            size = 256;
        }
        value = bignumber_1.bigNumberify(value).toTwos(size);
        return bytes_1.padZeros(value, size / 8);
    }
    match = type.match(regexBytes);
    if (match) {
        var size = parseInt(match[1]);
        if (String(size) != match[1] || size === 0 || size > 32) {
            throw new Error('invalid number type - ' + type);
        }
        if (bytes_1.arrayify(value).byteLength !== size) {
            throw new Error('invalid value for ' + type);
        }
        if (isArray) {
            return bytes_1.arrayify((value + Zeros).substring(0, 66));
        }
        return value;
    }
    match = type.match(regexArray);
    if (match && Array.isArray(value)) {
        var baseType = match[1];
        var count = parseInt(match[2] || String(value.length));
        if (count != value.length) {
            throw new Error('invalid value for ' + type);
        }
        var result = [];
        value.forEach(function (value) {
            result.push(_pack(baseType, value, true));
        });
        return bytes_1.concat(result);
    }
    throw new Error('unknown type - ' + type);
}
// @TODO: Array Enum
function pack(types, values) {
    if (types.length != values.length) {
        throw new Error('type/value count mismatch');
    }
    var tight = [];
    types.forEach(function (type, index) {
        tight.push(_pack(type, values[index]));
    });
    return bytes_1.hexlify(bytes_1.concat(tight));
}
exports.pack = pack;
function keccak256(types, values) {
    return keccak256_1.keccak256(pack(types, values));
}
exports.keccak256 = keccak256;
function sha256(types, values) {
    return sha2_1.sha256(pack(types, values));
}
exports.sha256 = sha256;


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = __webpack_require__(27);
var errors = __importStar(__webpack_require__(4));
var bignumber_1 = __webpack_require__(15);
var names = [
    'wei',
    'kwei',
    'Mwei',
    'Gwei',
    'szabo',
    'finney',
    'ether',
];
var unitInfos = {};
function _getUnitInfo(value) {
    return {
        decimals: value.length - 1,
        tenPower: bignumber_1.bigNumberify(value)
    };
}
// Build cache of common units
(function () {
    // Cache the common units
    var value = '1';
    names.forEach(function (name) {
        var info = _getUnitInfo(value);
        unitInfos[name.toLowerCase()] = info;
        unitInfos[String(info.decimals)] = info;
        value += '000';
    });
})();
function getUnitInfo(name) {
    // Try the cache
    var info = unitInfos[String(name).toLowerCase()];
    if (!info && typeof (name) === 'number' && parseInt(String(name)) == name && name >= 0 && name <= 256) {
        var value = '1';
        for (var i = 0; i < name; i++) {
            value += '0';
        }
        info = _getUnitInfo(value);
    }
    // Make sure we got something
    if (!info) {
        errors.throwError('invalid unitType', errors.INVALID_ARGUMENT, { argument: 'name', value: name });
    }
    return info;
}
// Some environments have issues with RegEx that contain back-tracking, so we cannot
// use them.
function commify(value) {
    var comps = String(value).split('.');
    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === '.' || value === '-.') {
        errors.throwError('invalid value', errors.INVALID_ARGUMENT, { argument: 'value', value: value });
    }
    // Make sure we have at least one whole digit (0 if none)
    var whole = comps[0];
    var negative = '';
    if (whole.substring(0, 1) === '-') {
        negative = '-';
        whole = whole.substring(1);
    }
    // Make sure we have at least 1 whole digit with no leading zeros
    while (whole.substring(0, 1) === '0') {
        whole = whole.substring(1);
    }
    if (whole === '') {
        whole = '0';
    }
    var suffix = '';
    if (comps.length === 2) {
        suffix = '.' + (comps[1] || '0');
    }
    var formatted = [];
    while (whole.length) {
        if (whole.length <= 3) {
            formatted.unshift(whole);
            break;
        }
        else {
            var index = whole.length - 3;
            formatted.unshift(whole.substring(index));
            whole = whole.substring(0, index);
        }
    }
    return negative + formatted.join(',') + suffix;
}
exports.commify = commify;
function formatUnits(value, unitType) {
    var unitInfo = getUnitInfo(unitType);
    // Make sure wei is a big number (convert as necessary)
    value = bignumber_1.bigNumberify(value);
    var negative = value.lt(constants_1.Zero);
    if (negative) {
        value = value.mul(constants_1.NegativeOne);
    }
    var fraction = value.mod(unitInfo.tenPower).toString();
    while (fraction.length < unitInfo.decimals) {
        fraction = '0' + fraction;
    }
    // Strip training 0
    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
    var whole = value.div(unitInfo.tenPower).toString();
    value = whole + '.' + fraction;
    if (negative) {
        value = '-' + value;
    }
    return value;
}
exports.formatUnits = formatUnits;
function parseUnits(value, unitType) {
    if (unitType == null) {
        unitType = 18;
    }
    var unitInfo = getUnitInfo(unitType);
    if (typeof (value) !== 'string' || !value.match(/^-?[0-9.,]+$/)) {
        errors.throwError('invalid decimal value', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
    }
    if (unitInfo.decimals === 0) {
        return bignumber_1.bigNumberify(value);
    }
    // Is it negative?
    var negative = (value.substring(0, 1) === '-');
    if (negative) {
        value = value.substring(1);
    }
    if (value === '.') {
        errors.throwError('missing value', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
    }
    // Split it into a whole and fractional part
    var comps = value.split('.');
    if (comps.length > 2) {
        errors.throwError('too many decimal points', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
    }
    var whole = comps[0], fraction = comps[1];
    if (!whole) {
        whole = '0';
    }
    if (!fraction) {
        fraction = '0';
    }
    // Prevent underflow
    if (fraction.length > unitInfo.decimals) {
        errors.throwError('underflow occurred', errors.NUMERIC_FAULT, { operation: 'division', fault: "underflow" });
    }
    // Fully pad the string with zeros to get to wei
    while (fraction.length < unitInfo.decimals) {
        fraction += '0';
    }
    var wholeValue = bignumber_1.bigNumberify(whole);
    var fractionValue = bignumber_1.bigNumberify(fraction);
    var wei = (wholeValue.mul(unitInfo.tenPower)).add(fractionValue);
    if (negative) {
        wei = wei.mul(constants_1.NegativeOne);
    }
    return wei;
}
exports.parseUnits = parseUnits;
function formatEther(wei) {
    return formatUnits(wei, 18);
}
exports.formatEther = formatEther;
function parseEther(ether) {
    return parseUnits(ether, 18);
}
exports.parseEther = parseEther;


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var lang_en_1 = __webpack_require__(73);
var lang_es_1 = __webpack_require__(155);
var lang_fr_1 = __webpack_require__(156);
var lang_ja_1 = __webpack_require__(157);
var lang_ko_1 = __webpack_require__(158);
var lang_it_1 = __webpack_require__(159);
var lang_zh_1 = __webpack_require__(160);
var en = lang_en_1.langEn;
exports.en = en;
var es = lang_es_1.langEs;
exports.es = es;
var fr = lang_fr_1.langFr;
exports.fr = fr;
var it = lang_it_1.langIt;
exports.it = it;
var ja = lang_ja_1.langJa;
exports.ja = ja;
var ko = lang_ko_1.langKo;
exports.ko = ko;
var zh = lang_zh_1.langZhCn;
exports.zh = zh;
var zh_cn = lang_zh_1.langZhCn;
exports.zh_cn = zh_cn;
var zh_tw = lang_zh_1.langZhTw;
exports.zh_tw = zh_tw;


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var wordlist_1 = __webpack_require__(21);
var utf8_1 = __webpack_require__(9);
var errors_1 = __webpack_require__(4);
var words = "A/bacoAbdomenAbejaAbiertoAbogadoAbonoAbortoAbrazoAbrirAbueloAbusoAcabarAcademiaAccesoAccio/nAceiteAcelgaAcentoAceptarA/cidoAclararAcne/AcogerAcosoActivoActoActrizActuarAcudirAcuerdoAcusarAdictoAdmitirAdoptarAdornoAduanaAdultoAe/reoAfectarAficio/nAfinarAfirmarA/gilAgitarAgoni/aAgostoAgotarAgregarAgrioAguaAgudoA/guilaAgujaAhogoAhorroAireAislarAjedrezAjenoAjusteAlacra/nAlambreAlarmaAlbaA/lbumAlcaldeAldeaAlegreAlejarAlertaAletaAlfilerAlgaAlgodo/nAliadoAlientoAlivioAlmaAlmejaAlmi/barAltarAltezaAltivoAltoAlturaAlumnoAlzarAmableAmanteAmapolaAmargoAmasarA/mbarA/mbitoAmenoAmigoAmistadAmorAmparoAmplioAnchoAncianoAnclaAndarAnde/nAnemiaA/nguloAnilloA/nimoAni/sAnotarAntenaAntiguoAntojoAnualAnularAnuncioA~adirA~ejoA~oApagarAparatoApetitoApioAplicarApodoAporteApoyoAprenderAprobarApuestaApuroAradoAra~aArarA/rbitroA/rbolArbustoArchivoArcoArderArdillaArduoA/reaA/ridoAriesArmoni/aArne/sAromaArpaArpo/nArregloArrozArrugaArteArtistaAsaAsadoAsaltoAscensoAsegurarAseoAsesorAsientoAsiloAsistirAsnoAsombroA/speroAstillaAstroAstutoAsumirAsuntoAtajoAtaqueAtarAtentoAteoA/ticoAtletaA/tomoAtraerAtrozAtu/nAudazAudioAugeAulaAumentoAusenteAutorAvalAvanceAvaroAveAvellanaAvenaAvestruzAvio/nAvisoAyerAyudaAyunoAzafra/nAzarAzoteAzu/carAzufreAzulBabaBaborBacheBahi/aBaileBajarBalanzaBalco/nBaldeBambu/BancoBandaBa~oBarbaBarcoBarnizBarroBa/sculaBasto/nBasuraBatallaBateri/aBatirBatutaBau/lBazarBebe/BebidaBelloBesarBesoBestiaBichoBienBingoBlancoBloqueBlusaBoaBobinaBoboBocaBocinaBodaBodegaBoinaBolaBoleroBolsaBombaBondadBonitoBonoBonsa/iBordeBorrarBosqueBoteBoti/nBo/vedaBozalBravoBrazoBrechaBreveBrilloBrincoBrisaBrocaBromaBronceBroteBrujaBruscoBrutoBuceoBucleBuenoBueyBufandaBufo/nBu/hoBuitreBultoBurbujaBurlaBurroBuscarButacaBuzo/nCaballoCabezaCabinaCabraCacaoCada/verCadenaCaerCafe/Cai/daCaima/nCajaCajo/nCalCalamarCalcioCaldoCalidadCalleCalmaCalorCalvoCamaCambioCamelloCaminoCampoCa/ncerCandilCanelaCanguroCanicaCantoCa~aCa~o/nCaobaCaosCapazCapita/nCapoteCaptarCapuchaCaraCarbo/nCa/rcelCaretaCargaCari~oCarneCarpetaCarroCartaCasaCascoCaseroCaspaCastorCatorceCatreCaudalCausaCazoCebollaCederCedroCeldaCe/lebreCelosoCe/lulaCementoCenizaCentroCercaCerdoCerezaCeroCerrarCertezaCe/spedCetroChacalChalecoChampu/ChanclaChapaCharlaChicoChisteChivoChoqueChozaChuletaChuparCiclo/nCiegoCieloCienCiertoCifraCigarroCimaCincoCineCintaCipre/sCircoCiruelaCisneCitaCiudadClamorClanClaroClaseClaveClienteClimaCli/nicaCobreCoccio/nCochinoCocinaCocoCo/digoCodoCofreCogerCoheteCoji/nCojoColaColchaColegioColgarColinaCollarColmoColumnaCombateComerComidaCo/modoCompraCondeConejoCongaConocerConsejoContarCopaCopiaCorazo/nCorbataCorchoCordo/nCoronaCorrerCoserCosmosCostaCra/neoCra/terCrearCrecerCrei/doCremaCri/aCrimenCriptaCrisisCromoCro/nicaCroquetaCrudoCruzCuadroCuartoCuatroCuboCubrirCucharaCuelloCuentoCuerdaCuestaCuevaCuidarCulebraCulpaCultoCumbreCumplirCunaCunetaCuotaCupo/nCu/pulaCurarCuriosoCursoCurvaCutisDamaDanzaDarDardoDa/tilDeberDe/bilDe/cadaDecirDedoDefensaDefinirDejarDelfi/nDelgadoDelitoDemoraDensoDentalDeporteDerechoDerrotaDesayunoDeseoDesfileDesnudoDestinoDesvi/oDetalleDetenerDeudaDi/aDiabloDiademaDiamanteDianaDiarioDibujoDictarDienteDietaDiezDifi/cilDignoDilemaDiluirDineroDirectoDirigirDiscoDise~oDisfrazDivaDivinoDobleDoceDolorDomingoDonDonarDoradoDormirDorsoDosDosisDrago/nDrogaDuchaDudaDueloDue~oDulceDu/oDuqueDurarDurezaDuroE/banoEbrioEcharEcoEcuadorEdadEdicio/nEdificioEditorEducarEfectoEficazEjeEjemploElefanteElegirElementoElevarElipseE/liteElixirElogioEludirEmbudoEmitirEmocio/nEmpateEmpe~oEmpleoEmpresaEnanoEncargoEnchufeEnci/aEnemigoEneroEnfadoEnfermoEnga~oEnigmaEnlaceEnormeEnredoEnsayoEnse~arEnteroEntrarEnvaseEnvi/oE/pocaEquipoErizoEscalaEscenaEscolarEscribirEscudoEsenciaEsferaEsfuerzoEspadaEspejoEspi/aEsposaEspumaEsqui/EstarEsteEstiloEstufaEtapaEternoE/ticaEtniaEvadirEvaluarEventoEvitarExactoExamenExcesoExcusaExentoExigirExilioExistirE/xitoExpertoExplicarExponerExtremoFa/bricaFa/bulaFachadaFa/cilFactorFaenaFajaFaldaFalloFalsoFaltarFamaFamiliaFamosoFarao/nFarmaciaFarolFarsaFaseFatigaFaunaFavorFaxFebreroFechaFelizFeoFeriaFerozFe/rtilFervorFesti/nFiableFianzaFiarFibraFiccio/nFichaFideoFiebreFielFieraFiestaFiguraFijarFijoFilaFileteFilialFiltroFinFincaFingirFinitoFirmaFlacoFlautaFlechaFlorFlotaFluirFlujoFlu/orFobiaFocaFogataFogo/nFolioFolletoFondoFormaForroFortunaForzarFosaFotoFracasoFra/gilFranjaFraseFraudeFrei/rFrenoFresaFri/oFritoFrutaFuegoFuenteFuerzaFugaFumarFuncio/nFundaFurgo/nFuriaFusilFu/tbolFuturoGacelaGafasGaitaGajoGalaGaleri/aGalloGambaGanarGanchoGangaGansoGarajeGarzaGasolinaGastarGatoGavila/nGemeloGemirGenGe/neroGenioGenteGeranioGerenteGermenGestoGiganteGimnasioGirarGiroGlaciarGloboGloriaGolGolfoGolosoGolpeGomaGordoGorilaGorraGotaGoteoGozarGradaGra/ficoGranoGrasaGratisGraveGrietaGrilloGripeGrisGritoGrosorGru/aGruesoGrumoGrupoGuanteGuapoGuardiaGuerraGui/aGui~oGuionGuisoGuitarraGusanoGustarHaberHa/bilHablarHacerHachaHadaHallarHamacaHarinaHazHaza~aHebillaHebraHechoHeladoHelioHembraHerirHermanoHe/roeHervirHieloHierroHi/gadoHigieneHijoHimnoHistoriaHocicoHogarHogueraHojaHombreHongoHonorHonraHoraHormigaHornoHostilHoyoHuecoHuelgaHuertaHuesoHuevoHuidaHuirHumanoHu/medoHumildeHumoHundirHuraca/nHurtoIconoIdealIdiomaI/doloIglesiaIglu/IgualIlegalIlusio/nImagenIma/nImitarImparImperioImponerImpulsoIncapazI/ndiceInerteInfielInformeIngenioInicioInmensoInmuneInnatoInsectoInstanteIntere/sI/ntimoIntuirInu/tilInviernoIraIrisIroni/aIslaIsloteJabali/Jabo/nJamo/nJarabeJardi/nJarraJaulaJazmi/nJefeJeringaJineteJornadaJorobaJovenJoyaJuergaJuevesJuezJugadorJugoJugueteJuicioJuncoJunglaJunioJuntarJu/piterJurarJustoJuvenilJuzgarKiloKoalaLabioLacioLacraLadoLadro/nLagartoLa/grimaLagunaLaicoLamerLa/minaLa/mparaLanaLanchaLangostaLanzaLa/pizLargoLarvaLa/stimaLataLa/texLatirLaurelLavarLazoLealLeccio/nLecheLectorLeerLegio/nLegumbreLejanoLenguaLentoLe~aLeo/nLeopardoLesio/nLetalLetraLeveLeyendaLibertadLibroLicorLi/derLidiarLienzoLigaLigeroLimaLi/miteLimo/nLimpioLinceLindoLi/neaLingoteLinoLinternaLi/quidoLisoListaLiteraLitioLitroLlagaLlamaLlantoLlaveLlegarLlenarLlevarLlorarLloverLluviaLoboLocio/nLocoLocuraLo/gicaLogroLombrizLomoLonjaLoteLuchaLucirLugarLujoLunaLunesLupaLustroLutoLuzMacetaMachoMaderaMadreMaduroMaestroMafiaMagiaMagoMai/zMaldadMaletaMallaMaloMama/MamboMamutMancoMandoManejarMangaManiqui/ManjarManoMansoMantaMa~anaMapaMa/quinaMarMarcoMareaMarfilMargenMaridoMa/rmolMarro/nMartesMarzoMasaMa/scaraMasivoMatarMateriaMatizMatrizMa/ximoMayorMazorcaMechaMedallaMedioMe/dulaMejillaMejorMelenaMelo/nMemoriaMenorMensajeMenteMenu/MercadoMerengueMe/ritoMesMeso/nMetaMeterMe/todoMetroMezclaMiedoMielMiembroMigaMilMilagroMilitarMillo/nMimoMinaMineroMi/nimoMinutoMiopeMirarMisaMiseriaMisilMismoMitadMitoMochilaMocio/nModaModeloMohoMojarMoldeMolerMolinoMomentoMomiaMonarcaMonedaMonjaMontoMo~oMoradaMorderMorenoMorirMorroMorsaMortalMoscaMostrarMotivoMoverMo/vilMozoMuchoMudarMuebleMuelaMuerteMuestraMugreMujerMulaMuletaMultaMundoMu~ecaMuralMuroMu/sculoMuseoMusgoMu/sicaMusloNa/carNacio/nNadarNaipeNaranjaNarizNarrarNasalNatalNativoNaturalNa/useaNavalNaveNavidadNecioNe/ctarNegarNegocioNegroNeo/nNervioNetoNeutroNevarNeveraNichoNidoNieblaNietoNi~ezNi~oNi/tidoNivelNoblezaNocheNo/minaNoriaNormaNorteNotaNoticiaNovatoNovelaNovioNubeNucaNu/cleoNudilloNudoNueraNueveNuezNuloNu/meroNutriaOasisObesoObispoObjetoObraObreroObservarObtenerObvioOcaOcasoOce/anoOchentaOchoOcioOcreOctavoOctubreOcultoOcuparOcurrirOdiarOdioOdiseaOesteOfensaOfertaOficioOfrecerOgroOi/doOi/rOjoOlaOleadaOlfatoOlivoOllaOlmoOlorOlvidoOmbligoOndaOnzaOpacoOpcio/nO/peraOpinarOponerOptarO/pticaOpuestoOracio/nOradorOralO/rbitaOrcaOrdenOrejaO/rganoOrgi/aOrgulloOrienteOrigenOrillaOroOrquestaOrugaOsadi/aOscuroOseznoOsoOstraOto~oOtroOvejaO/vuloO/xidoOxi/genoOyenteOzonoPactoPadrePaellaPa/ginaPagoPai/sPa/jaroPalabraPalcoPaletaPa/lidoPalmaPalomaPalparPanPanalPa/nicoPanteraPa~ueloPapa/PapelPapillaPaquetePararParcelaParedParirParoPa/rpadoParquePa/rrafoPartePasarPaseoPasio/nPasoPastaPataPatioPatriaPausaPautaPavoPayasoPeato/nPecadoPeceraPechoPedalPedirPegarPeinePelarPelda~oPeleaPeligroPellejoPeloPelucaPenaPensarPe~o/nPeo/nPeorPepinoPeque~oPeraPerchaPerderPerezaPerfilPericoPerlaPermisoPerroPersonaPesaPescaPe/simoPesta~aPe/taloPetro/leoPezPezu~aPicarPicho/nPiePiedraPiernaPiezaPijamaPilarPilotoPimientaPinoPintorPinzaPi~aPiojoPipaPirataPisarPiscinaPisoPistaPito/nPizcaPlacaPlanPlataPlayaPlazaPleitoPlenoPlomoPlumaPluralPobrePocoPoderPodioPoemaPoesi/aPoetaPolenPolici/aPolloPolvoPomadaPomeloPomoPompaPonerPorcio/nPortalPosadaPoseerPosiblePostePotenciaPotroPozoPradoPrecozPreguntaPremioPrensaPresoPrevioPrimoPri/ncipePrisio/nPrivarProaProbarProcesoProductoProezaProfesorProgramaProlePromesaProntoPropioPro/ximoPruebaPu/blicoPucheroPudorPuebloPuertaPuestoPulgaPulirPulmo/nPulpoPulsoPumaPuntoPu~alPu~oPupaPupilaPure/QuedarQuejaQuemarQuererQuesoQuietoQui/micaQuinceQuitarRa/banoRabiaRaboRacio/nRadicalRai/zRamaRampaRanchoRangoRapazRa/pidoRaptoRasgoRaspaRatoRayoRazaRazo/nReaccio/nRealidadReba~oReboteRecaerRecetaRechazoRecogerRecreoRectoRecursoRedRedondoReducirReflejoReformaRefra/nRefugioRegaloRegirReglaRegresoRehe/nReinoRei/rRejaRelatoRelevoRelieveRellenoRelojRemarRemedioRemoRencorRendirRentaRepartoRepetirReposoReptilResRescateResinaRespetoRestoResumenRetiroRetornoRetratoReunirReve/sRevistaReyRezarRicoRiegoRiendaRiesgoRifaRi/gidoRigorRinco/nRi~o/nRi/oRiquezaRisaRitmoRitoRizoRobleRoceRociarRodarRodeoRodillaRoerRojizoRojoRomeroRomperRonRoncoRondaRopaRoperoRosaRoscaRostroRotarRubi/RuborRudoRuedaRugirRuidoRuinaRuletaRuloRumboRumorRupturaRutaRutinaSa/badoSaberSabioSableSacarSagazSagradoSalaSaldoSaleroSalirSalmo/nSalo/nSalsaSaltoSaludSalvarSambaSancio/nSandi/aSanearSangreSanidadSanoSantoSapoSaqueSardinaSarte/nSastreSata/nSaunaSaxofo/nSeccio/nSecoSecretoSectaSedSeguirSeisSelloSelvaSemanaSemillaSendaSensorSe~alSe~orSepararSepiaSequi/aSerSerieSermo/nServirSesentaSesio/nSetaSetentaSeveroSexoSextoSidraSiestaSieteSigloSignoSi/labaSilbarSilencioSillaSi/mboloSimioSirenaSistemaSitioSituarSobreSocioSodioSolSolapaSoldadoSoledadSo/lidoSoltarSolucio/nSombraSondeoSonidoSonoroSonrisaSopaSoplarSoporteSordoSorpresaSorteoSoste/nSo/tanoSuaveSubirSucesoSudorSuegraSueloSue~oSuerteSufrirSujetoSulta/nSumarSuperarSuplirSuponerSupremoSurSurcoSure~oSurgirSustoSutilTabacoTabiqueTablaTabu/TacoTactoTajoTalarTalcoTalentoTallaTalo/nTama~oTamborTangoTanqueTapaTapeteTapiaTapo/nTaquillaTardeTareaTarifaTarjetaTarotTarroTartaTatuajeTauroTazaTazo/nTeatroTechoTeclaTe/cnicaTejadoTejerTejidoTelaTele/fonoTemaTemorTemploTenazTenderTenerTenisTensoTeori/aTerapiaTercoTe/rminoTernuraTerrorTesisTesoroTestigoTeteraTextoTezTibioTiburo/nTiempoTiendaTierraTiesoTigreTijeraTildeTimbreTi/midoTimoTintaTi/oTi/picoTipoTiraTiro/nTita/nTi/tereTi/tuloTizaToallaTobilloTocarTocinoTodoTogaToldoTomarTonoTontoToparTopeToqueTo/raxToreroTormentaTorneoToroTorpedoTorreTorsoTortugaTosToscoToserTo/xicoTrabajoTractorTraerTra/ficoTragoTrajeTramoTranceTratoTraumaTrazarTre/bolTreguaTreintaTrenTreparTresTribuTrigoTripaTristeTriunfoTrofeoTrompaTroncoTropaTroteTrozoTrucoTruenoTrufaTuberi/aTuboTuertoTumbaTumorTu/nelTu/nicaTurbinaTurismoTurnoTutorUbicarU/lceraUmbralUnidadUnirUniversoUnoUntarU~aUrbanoUrbeUrgenteUrnaUsarUsuarioU/tilUtopi/aUvaVacaVaci/oVacunaVagarVagoVainaVajillaValeVa/lidoValleValorVa/lvulaVampiroVaraVariarVaro/nVasoVecinoVectorVehi/culoVeinteVejezVelaVeleroVelozVenaVencerVendaVenenoVengarVenirVentaVenusVerVeranoVerboVerdeVeredaVerjaVersoVerterVi/aViajeVibrarVicioVi/ctimaVidaVi/deoVidrioViejoViernesVigorVilVillaVinagreVinoVi~edoVioli/nViralVirgoVirtudVisorVi/speraVistaVitaminaViudoVivazViveroVivirVivoVolca/nVolumenVolverVorazVotarVotoVozVueloVulgarYacerYateYeguaYemaYernoYesoYodoYogaYogurZafiroZanjaZapatoZarzaZonaZorroZumoZurdo";
var lookup = {};
var wordlist = null;
function dropDiacritic(word) {
    errors_1.checkNormalize();
    return utf8_1.toUtf8String(Array.prototype.filter.call(utf8_1.toUtf8Bytes(word.normalize('NFD').toLowerCase()), function (c) {
        return ((c >= 65 && c <= 90) || (c >= 97 && c <= 123));
    }));
}
function expand(word) {
    var output = [];
    Array.prototype.forEach.call(utf8_1.toUtf8Bytes(word), function (c) {
        // Acute accent
        if (c === 47) {
            output.push(204);
            output.push(129);
            // n-tilde
        }
        else if (c === 126) {
            output.push(110);
            output.push(204);
            output.push(131);
        }
        else {
            output.push(c);
        }
    });
    return utf8_1.toUtf8String(output);
}
function loadWords(lang) {
    if (wordlist != null) {
        return;
    }
    wordlist = words.replace(/([A-Z])/g, ' $1').toLowerCase().substring(1).split(' ').map(function (w) { return expand(w); });
    wordlist.forEach(function (word, index) {
        lookup[dropDiacritic(word)] = index;
    });
    if (wordlist_1.check(lang) !== '0xf74fb7092aeacdfbf8959557de22098da512207fb9f109cb526994938cf40300') {
        wordlist = null;
        throw new Error('BIP39 Wordlist for es (Spanish) FAILED');
    }
}
var LangEs = /** @class */ (function (_super) {
    __extends(LangEs, _super);
    function LangEs() {
        return _super.call(this, 'es') || this;
    }
    LangEs.prototype.getWord = function (index) {
        loadWords(this);
        return wordlist[index];
    };
    LangEs.prototype.getWordIndex = function (word) {
        loadWords(this);
        var index = lookup[dropDiacritic(word)];
        if (typeof (index) !== 'number') {
            return -1;
        }
        return index;
    };
    return LangEs;
}(wordlist_1.Wordlist));
var langEs = new LangEs();
exports.langEs = langEs;
wordlist_1.register(langEs);


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var wordlist_1 = __webpack_require__(21);
var utf8_1 = __webpack_require__(9);
var errors_1 = __webpack_require__(4);
var words = "";
var wordlist = null;
var lookup = {};
function dropDiacritic(word) {
    errors_1.checkNormalize();
    return utf8_1.toUtf8String(Array.prototype.filter.call(utf8_1.toUtf8Bytes(word.normalize('NFD').toLowerCase()), function (c) {
        return ((c >= 65 && c <= 90) || (c >= 97 && c <= 123));
    }));
}
function expand(word) {
    var output = [];
    Array.prototype.forEach.call(utf8_1.toUtf8Bytes(word), function (c) {
        // Acute accent
        if (c === 47) {
            output.push(204);
            output.push(129);
            // Grave accent
        }
        else if (c === 45) {
            output.push(204);
            output.push(128);
        }
        else {
            output.push(c);
        }
    });
    return utf8_1.toUtf8String(output);
}
function loadWords(lang) {
    if (wordlist != null) {
        return;
    }
    wordlist = words.replace(/([A-Z])/g, ' $1').toLowerCase().substring(1).split(' ').map(function (w) { return expand(w); });
    wordlist.forEach(function (word, index) {
        lookup[dropDiacritic(word)] = index;
    });
    if (wordlist_1.check(lang) !== '0x51deb7ae009149dc61a6bd18a918eb7ac78d2775726c68e598b92d002519b045') {
        wordlist = null;
        throw new Error('BIP39 Wordlist for fr (French) FAILED');
    }
}
var LangFr = /** @class */ (function (_super) {
    __extends(LangFr, _super);
    function LangFr() {
        return _super.call(this, 'fr') || this;
    }
    LangFr.prototype.getWord = function (index) {
        loadWords(this);
        return wordlist[index];
    };
    LangFr.prototype.getWordIndex = function (word) {
        loadWords(this);
        var index = lookup[dropDiacritic(word)];
        if (typeof (index) !== 'number') {
            return -1;
        }
        return index;
    };
    return LangFr;
}(wordlist_1.Wordlist));
var langFr = new LangFr();
exports.langFr = langFr;
wordlist_1.register(langFr);


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var wordlist_1 = __webpack_require__(21);
var bytes_1 = __webpack_require__(5);
var utf8_1 = __webpack_require__(9);
var errors = __importStar(__webpack_require__(4));
var data = [
    // 4-kana words
    'AQRASRAGBAGUAIRAHBAghAURAdBAdcAnoAMEAFBAFCBKFBQRBSFBCXBCDBCHBGFBEQBpBBpQBIkBHNBeOBgFBVCBhBBhNBmOBmRBiHBiFBUFBZDBvFBsXBkFBlcBjYBwDBMBBTBBTRBWBBWXXaQXaRXQWXSRXCFXYBXpHXOQXHRXhRXuRXmXXbRXlXXwDXTRXrCXWQXWGaBWaKcaYgasFadQalmaMBacAKaRKKBKKXKKjKQRKDRKCYKCRKIDKeVKHcKlXKjHKrYNAHNBWNaRNKcNIBNIONmXNsXNdXNnBNMBNRBNrXNWDNWMNFOQABQAHQBrQXBQXFQaRQKXQKDQKOQKFQNBQNDQQgQCXQCDQGBQGDQGdQYXQpBQpQQpHQLXQHuQgBQhBQhCQuFQmXQiDQUFQZDQsFQdRQkHQbRQlOQlmQPDQjDQwXQMBQMDQcFQTBQTHQrDDXQDNFDGBDGQDGRDpFDhFDmXDZXDbRDMYDRdDTRDrXSAhSBCSBrSGQSEQSHBSVRShYShkSyQSuFSiBSdcSoESocSlmSMBSFBSFKSFNSFdSFcCByCaRCKcCSBCSRCCrCGbCEHCYXCpBCpQCIBCIHCeNCgBCgFCVECVcCmkCmwCZXCZFCdRClOClmClFCjDCjdCnXCwBCwXCcRCFQCFjGXhGNhGDEGDMGCDGCHGIFGgBGVXGVEGVRGmXGsXGdYGoSGbRGnXGwXGwDGWRGFNGFLGFOGFdGFkEABEBDEBFEXOEaBEKSENBENDEYXEIgEIkEgBEgQEgHEhFEudEuFEiBEiHEiFEZDEvBEsXEsFEdXEdREkFEbBEbRElFEPCEfkEFNYAEYAhYBNYQdYDXYSRYCEYYoYgQYgRYuRYmCYZTYdBYbEYlXYjQYRbYWRpKXpQopQnpSFpCXpIBpISphNpdBpdRpbRpcZpFBpFNpFDpFopFrLADLBuLXQLXcLaFLCXLEhLpBLpFLHXLeVLhILdHLdRLoDLbRLrXIABIBQIBCIBsIBoIBMIBRIXaIaRIKYIKRINBINuICDIGBIIDIIkIgRIxFIyQIiHIdRIbYIbRIlHIwRIMYIcRIRVITRIFBIFNIFQOABOAFOBQOaFONBONMOQFOSFOCDOGBOEQOpBOLXOIBOIFOgQOgFOyQOycOmXOsXOdIOkHOMEOMkOWWHBNHXNHXWHNXHDuHDRHSuHSRHHoHhkHmRHdRHkQHlcHlRHwBHWcgAEgAggAkgBNgBQgBEgXOgYcgLXgHjgyQgiBgsFgdagMYgWSgFQgFEVBTVXEVKBVKNVKDVKYVKRVNBVNYVDBVDxVSBVSRVCjVGNVLXVIFVhBVhcVsXVdRVbRVlRhBYhKYhDYhGShxWhmNhdahdkhbRhjohMXhTRxAXxXSxKBxNBxEQxeNxeQxhXxsFxdbxlHxjcxFBxFNxFQxFOxFoyNYyYoybcyMYuBQuBRuBruDMuCouHBudQukkuoBulVuMXuFEmCYmCRmpRmeDmiMmjdmTFmFQiADiBOiaRiKRiNBiNRiSFiGkiGFiERipRiLFiIFihYibHijBijEiMXiWBiFBiFCUBQUXFUaRUNDUNcUNRUNFUDBUSHUCDUGBUGFUEqULNULoUIRUeEUeYUgBUhFUuRUiFUsXUdFUkHUbBUjSUjYUwXUMDUcHURdUTBUrBUrXUrQZAFZXZZaRZKFZNBZQFZCXZGBZYdZpBZLDZIFZHXZHNZeQZVRZVFZmXZiBZvFZdFZkFZbHZbFZwXZcCZcRZRBvBQvBGvBLvBWvCovMYsAFsBDsaRsKFsNFsDrsSHsSFsCXsCRsEBsEHsEfspBsLBsLDsIgsIRseGsbRsFBsFQsFSdNBdSRdCVdGHdYDdHcdVbdySduDdsXdlRdwXdWYdWcdWRkBMkXOkaRkNIkNFkSFkCFkYBkpRkeNkgBkhVkmXksFklVkMBkWDkFNoBNoaQoaFoNBoNXoNaoNEoSRoEroYXoYCoYbopRopFomXojkowXorFbBEbEIbdBbjYlaRlDElMXlFDjKjjSRjGBjYBjYkjpRjLXjIBjOFjeVjbRjwBnXQnSHnpFnLXnINnMBnTRwXBwXNwXYwNFwQFwSBwGFwLXwLDweNwgBwuHwjDwnXMBXMpFMIBMeNMTHcaQcNBcDHcSFcCXcpBcLXcLDcgFcuFcnXcwXccDcTQcrFTQErXNrCHrpFrgFrbFrTHrFcWNYWNbWEHWMXWTR',
    // 5-kana words
    'ABGHABIJAEAVAYJQALZJAIaRAHNXAHdcAHbRAZJMAZJRAZTRAdVJAklmAbcNAjdRAMnRAMWYAWpRAWgRAFgBAFhBAFdcBNJBBNJDBQKBBQhcBQlmBDEJBYJkBYJTBpNBBpJFBIJBBIJDBIcABOKXBOEJBOVJBOiJBOZJBepBBeLXBeIFBegBBgGJBVJXBuocBiJRBUJQBlXVBlITBwNFBMYVBcqXBTlmBWNFBWiJBWnRBFGHBFwXXKGJXNJBXNZJXDTTXSHSXSVRXSlHXCJDXGQJXEhXXYQJXYbRXOfXXeNcXVJFXhQJXhEJXdTRXjdXXMhBXcQTXRGBXTEBXTnQXFCXXFOFXFgFaBaFaBNJaBCJaBpBaBwXaNJKaNJDaQIBaDpRaEPDaHMFamDJalEJaMZJaFaFaFNBaFQJaFLDaFVHKBCYKBEBKBHDKXaFKXGdKXEJKXpHKXIBKXZDKXwXKKwLKNacKNYJKNJoKNWcKDGdKDTRKChXKGaRKGhBKGbRKEBTKEaRKEPTKLMDKLWRKOHDKVJcKdBcKlIBKlOPKFSBKFEPKFpFNBNJNJBQNBGHNBEPNBHXNBgFNBVXNBZDNBsXNBwXNNaRNNJDNNJENNJkNDCJNDVDNGJRNJiDNZJNNsCJNJFNNFSBNFCXNFEPNFLXNFIFQJBFQCaRQJEQQLJDQLJFQIaRQOqXQHaFQHHQQVJXQVJDQhNJQmEIQZJFQsJXQJrFQWbRDJABDBYJDXNFDXCXDXLXDXZDDXsJDQqXDSJFDJCXDEPkDEqXDYmQDpSJDOCkDOGQDHEIDVJDDuDuDWEBDJFgSBNDSBSFSBGHSBIBSBTQSKVYSJQNSJQiSJCXSEqXSJYVSIiJSOMYSHAHSHaQSeCFSepQSegBSHdHSHrFShSJSJuHSJUFSkNRSrSrSWEBSFaHSJFQSFCXSFGDSFYXSFODSFgBSFVXSFhBSFxFSFkFSFbBSFMFCADdCJXBCXaFCXKFCXNFCXCXCXGBCXEJCXYBCXLDCXIBCXOPCXHXCXgBCXhBCXiBCXlDCXcHCJNBCJNFCDCJCDGBCDVXCDhBCDiDCDJdCCmNCpJFCIaRCOqXCHCHCHZJCViJCuCuCmddCJiFCdNBCdHhClEJCnUJCreSCWlgCWTRCFBFCFNBCFYBCFVFCFhFCFdSCFTBCFWDGBNBGBQFGJBCGBEqGBpBGBgQGNBEGNJYGNkOGNJRGDUFGJpQGHaBGJeNGJeEGVBlGVKjGiJDGvJHGsVJGkEBGMIJGWjNGFBFGFCXGFGBGFYXGFpBGFMFEASJEAWpEJNFECJVEIXSEIQJEOqXEOcFEeNcEHEJEHlFEJgFEhlmEmDJEmZJEiMBEUqXEoSREPBFEPXFEPKFEPSFEPEFEPpFEPLXEPIBEJPdEPcFEPTBEJnXEqlHEMpREFCXEFODEFcFYASJYJAFYBaBYBVXYXpFYDhBYCJBYJGFYYbRYeNcYJeVYiIJYZJcYvJgYvJRYJsXYsJFYMYMYreVpBNHpBEJpBwXpQxFpYEJpeNDpJeDpeSFpeCHpHUJpHbBpHcHpmUJpiiJpUJrpsJuplITpFaBpFQqpFGBpFEfpFYBpFpBpFLJpFIDpFgBpFVXpFyQpFuFpFlFpFjDpFnXpFwXpJFMpFTBLXCJLXEFLXhFLXUJLXbFLalmLNJBLSJQLCLCLGJBLLDJLHaFLeNFLeSHLeCXLepFLhaRLZsJLsJDLsJrLocaLlLlLMdbLFNBLFSBLFEHLFkFIBBFIBXFIBaQIBKXIBSFIBpHIBLXIBgBIBhBIBuHIBmXIBiFIBZXIBvFIBbFIBjQIBwXIBWFIKTRIQUJIDGFICjQIYSRIINXIJeCIVaRImEkIZJFIvJRIsJXIdCJIJoRIbBQIjYBIcqXITFVIreVIFKFIFSFIFCJIFGFIFLDIFIBIJFOIFgBIFVXIJFhIFxFIFmXIFdHIFbBIJFrIJFWOBGBOQfXOOKjOUqXOfXBOqXEOcqXORVJOFIBOFlDHBIOHXiFHNTRHCJXHIaRHHJDHHEJHVbRHZJYHbIBHRsJHRkDHWlmgBKFgBSBgBCDgBGHgBpBgBIBgBVJgBuBgBvFgKDTgQVXgDUJgGSJgOqXgmUMgZIJgTUJgWIEgFBFgFNBgFDJgFSFgFGBgFYXgJFOgFgQgFVXgFhBgFbHgJFWVJABVQKcVDgFVOfXVeDFVhaRVmGdViJYVMaRVFNHhBNDhBCXhBEqhBpFhBLXhNJBhSJRheVXhhKEhxlmhZIJhdBQhkIJhbMNhMUJhMZJxNJgxQUJxDEkxDdFxSJRxplmxeSBxeCXxeGFxeYXxepQxegBxWVcxFEQxFLXxFIBxFgBxFxDxFZtxFdcxFbBxFwXyDJXyDlcuASJuDJpuDIBuCpJuGSJuIJFueEFuZIJusJXudWEuoIBuWGJuFBcuFKEuFNFuFQFuFDJuFGJuFVJuFUtuFdHuFTBmBYJmNJYmQhkmLJDmLJomIdXmiJYmvJRmsJRmklmmMBymMuCmclmmcnQiJABiJBNiJBDiBSFiBCJiBEFiBYBiBpFiBLXiBTHiJNciDEfiCZJiECJiJEqiOkHiHKFieNDiHJQieQcieDHieSFieCXieGFieEFieIHiegFihUJixNoioNXiFaBiFKFiFNDiFEPiFYXitFOitFHiFgBiFVEiFmXiFitiFbBiFMFiFrFUCXQUIoQUIJcUHQJUeCEUHwXUUJDUUqXUdWcUcqXUrnQUFNDUFSHUFCFUFEfUFLXUtFOZBXOZXSBZXpFZXVXZEQJZEJkZpDJZOqXZeNHZeCDZUqXZFBQZFEHZFLXvBAFvBKFvBCXvBEPvBpHvBIDvBgFvBuHvQNJvFNFvFGBvFIBvJFcsXCDsXLXsXsXsXlFsXcHsQqXsJQFsEqXseIFsFEHsFjDdBxOdNpRdNJRdEJbdpJRdhZJdnSJdrjNdFNJdFQHdFhNkNJDkYaRkHNRkHSRkVbRkuMRkjSJkcqDoSJFoEiJoYZJoOfXohEBoMGQocqXbBAFbBXFbBaFbBNDbBGBbBLXbBTBbBWDbGJYbIJHbFQqbFpQlDgQlOrFlVJRjGEBjZJRnXvJnXbBnEfHnOPDngJRnxfXnUJWwXEJwNpJwDpBwEfXwrEBMDCJMDGHMDIJMLJDcQGDcQpHcqXccqNFcqCXcFCJRBSBRBGBRBEJRBpQTBNFTBQJTBpBTBVXTFABTFSBTFCFTFGBTFMDrXCJrXLDrDNJrEfHrFQJrFitWNjdWNTR',
    // 6-kana words
    'AKLJMANOPFASNJIAEJWXAYJNRAIIbRAIcdaAeEfDAgidRAdjNYAMYEJAMIbRAFNJBAFpJFBBIJYBDZJFBSiJhBGdEBBEJfXBEJqXBEJWRBpaUJBLXrXBIYJMBOcfXBeEfFBestXBjNJRBcDJOBFEqXXNvJRXDMBhXCJNYXOAWpXONJWXHDEBXeIaRXhYJDXZJSJXMDJOXcASJXFVJXaBQqXaBZJFasXdQaFSJQaFEfXaFpJHaFOqXKBNSRKXvJBKQJhXKEJQJKEJGFKINJBKIJjNKgJNSKVElmKVhEBKiJGFKlBgJKjnUJKwsJYKMFIJKFNJDKFIJFKFOfXNJBSFNJBCXNBpJFNJBvQNJBMBNJLJXNJOqXNJeCXNJeGFNdsJCNbTKFNwXUJQNFEPQDiJcQDMSJQSFpBQGMQJQJeOcQyCJEQUJEBQJFBrQFEJqDXDJFDJXpBDJXIMDGiJhDIJGRDJeYcDHrDJDVXgFDkAWpDkIgRDjDEqDMvJRDJFNFDJFIBSKclmSJQOFSJQVHSJQjDSJGJBSJGJFSECJoSHEJqSJHTBSJVJDSViJYSZJNBSJsJDSFSJFSFEfXSJFLXCBUJVCJXSBCJXpBCXVJXCJXsXCJXdFCJNJHCLIJgCHiJFCVNJMChCJhCUHEJCsJTRCJdYcCoQJCCFEfXCFIJgCFUJxCFstFGJBaQGJBIDGQJqXGYJNRGJHKFGeQqDGHEJFGJeLXGHIiJGHdBlGUJEBGkIJTGFQPDGJFEqEAGegEJIJBEJVJXEhQJTEiJNcEJZJFEJoEqEjDEqEPDsXEPGJBEPOqXEPeQFEfDiDEJfEFEfepQEfMiJEqXNBEqDIDEqeSFEqVJXEMvJRYXNJDYXEJHYKVJcYYJEBYJeEcYJUqXYFpJFYFstXpAZJMpBSJFpNBNFpeQPDpHLJDpHIJFpHgJFpeitFpHZJFpJFADpFSJFpJFCJpFOqXpFitBpJFZJLXIJFLIJgRLVNJWLVHJMLwNpJLFGJBLFLJDLFOqXLJFUJIBDJXIBGJBIJBYQIJBIBIBOqXIBcqDIEGJFILNJTIIJEBIOiJhIJeNBIJeIBIhiJIIWoTRIJFAHIJFpBIJFuHIFUtFIJFTHOSBYJOEcqXOHEJqOvBpFOkVJrObBVJOncqDOcNJkHhNJRHuHJuHdMhBgBUqXgBsJXgONJBgHNJDgHHJQgJeitgHsJXgJyNagyDJBgZJDrgsVJQgkEJNgkjSJgJFAHgFCJDgFZtMVJXNFVXQfXVJXDJVXoQJVQVJQVDEfXVDvJHVEqNFVeQfXVHpJFVHxfXVVJSRVVmaRVlIJOhCXVJhHjYkhxCJVhWVUJhWiJcxBNJIxeEqDxfXBFxcFEPxFSJFxFYJXyBDQJydaUJyFOPDuYCJYuLvJRuHLJXuZJLDuFOPDuFZJHuFcqXmKHJdmCQJcmOsVJiJAGFitLCFieOfXiestXiZJMEikNJQirXzFiFQqXiFIJFiFZJFiFvtFUHpJFUteIcUteOcUVCJkUhdHcUbEJEUJqXQUMNJhURjYkUFitFZDGJHZJIxDZJVJXZJFDJZJFpQvBNJBvBSJFvJxBrseQqDsVFVJdFLJDkEJNBkmNJYkFLJDoQJOPoGsJRoEAHBoEJfFbBQqDbBZJHbFVJXlFIJBjYIrXjeitcjjCEBjWMNBwXQfXwXOaFwDsJXwCJTRwrCZJMDNJQcDDJFcqDOPRYiJFTBsJXTQIJBTFEfXTFLJDrXEJFrEJXMrFZJFWEJdEWYTlm',
    // 7-kana words
    'ABCDEFACNJTRAMBDJdAcNJVXBLNJEBXSIdWRXErNJkXYDJMBXZJCJaXMNJaYKKVJKcKDEJqXKDcNJhKVJrNYKbgJVXKFVJSBNBYBwDNJeQfXNJeEqXNhGJWENJFiJRQlIJbEQJfXxDQqXcfXQFNDEJQFwXUJDYcnUJDJIBgQDIUJTRDJFEqDSJQSJFSJQIJFSOPeZtSJFZJHCJXQfXCTDEqFGJBSJFGJBOfXGJBcqXGJHNJDGJRLiJEJfXEqEJFEJPEFpBEJYJBZJFYBwXUJYiJMEBYJZJyTYTONJXpQMFXFpeGIDdpJFstXpJFcPDLBVSJRLHQJqXLJFZJFIJBNJDIJBUqXIBkFDJIJEJPTIYJGWRIJeQPDIJeEfHIJFsJXOqGDSFHXEJqXgJCsJCgGQJqXgdQYJEgFMFNBgJFcqDVJwXUJVJFZJchIgJCCxOEJqXxOwXUJyDJBVRuscisciJBiJBieUtqXiJFDJkiFsJXQUGEZJcUJFsJXZtXIrXZDZJDrZJFNJDZJFstXvJFQqXvJFCJEsJXQJqkhkNGBbDJdTRbYJMEBlDwXUJMEFiJFcfXNJDRcNJWMTBLJXC',
    // 8-kana words
    'BraFUtHBFSJFdbNBLJXVJQoYJNEBSJBEJfHSJHwXUJCJdAZJMGjaFVJXEJPNJBlEJfFiJFpFbFEJqIJBVJCrIBdHiJhOPFChvJVJZJNJWxGFNIFLueIBQJqUHEJfUFstOZJDrlXEASJRlXVJXSFwVJNJWD',
    // 9-kana words
    'QJEJNNJDQJEJIBSFQJEJxegBQJEJfHEPSJBmXEJFSJCDEJqXLXNJFQqXIcQsFNJFIFEJqXUJgFsJXIJBUJEJfHNFvJxEqXNJnXUJFQqD',
    // 10-kana words
    'IJBEJqXZJ'
];
// Maps each character into its kana value (the index)
var mapping = "~~AzB~X~a~KN~Q~D~S~C~G~E~Y~p~L~I~O~eH~g~V~hxyumi~~U~~Z~~v~~s~~dkoblPjfnqwMcRTr~W~~~F~~~~~Jt";
var wordlist = null;
function hex(word) {
    return bytes_1.hexlify(utf8_1.toUtf8Bytes(word));
}
var KiYoKu = '0xe3818de38284e3818f';
var KyoKu = '0xe3818de38283e3818f';
function loadWords(lang) {
    if (wordlist !== null) {
        return;
    }
    wordlist = [];
    // Transforms for normalizing (sort is a not quite UTF-8)
    var transform = {};
    // Delete the diacritic marks
    transform[utf8_1.toUtf8String([227, 130, 154])] = false;
    transform[utf8_1.toUtf8String([227, 130, 153])] = false;
    // Some simple transforms that sort out most of the order
    transform[utf8_1.toUtf8String([227, 130, 133])] = utf8_1.toUtf8String([227, 130, 134]);
    transform[utf8_1.toUtf8String([227, 129, 163])] = utf8_1.toUtf8String([227, 129, 164]);
    transform[utf8_1.toUtf8String([227, 130, 131])] = utf8_1.toUtf8String([227, 130, 132]);
    transform[utf8_1.toUtf8String([227, 130, 135])] = utf8_1.toUtf8String([227, 130, 136]);
    // Normalize words using the transform
    function normalize(word) {
        var result = '';
        for (var i = 0; i < word.length; i++) {
            var kana = word[i];
            var target = transform[kana];
            if (target === false) {
                continue;
            }
            if (target) {
                kana = target;
            }
            result += kana;
        }
        return result;
    }
    // Sort how the Japanese list is sorted
    function sortJapanese(a, b) {
        a = normalize(a);
        b = normalize(b);
        if (a < b) {
            return -1;
        }
        if (a > b) {
            return 1;
        }
        return 0;
    }
    // Load all the words
    for (var length_1 = 3; length_1 <= 9; length_1++) {
        var d = data[length_1 - 3];
        for (var offset = 0; offset < d.length; offset += length_1) {
            var word = [];
            for (var i = 0; i < length_1; i++) {
                var k = mapping.indexOf(d[offset + i]);
                word.push(227);
                word.push((k & 0x40) ? 130 : 129);
                word.push((k & 0x3f) + 128);
            }
            wordlist.push(utf8_1.toUtf8String(word));
        }
    }
    wordlist.sort(sortJapanese);
    // For some reason kyoku and kiyoku are flipped in node (!!).
    // The order SHOULD be:
    //   - kyoku
    //   - kiyoku
    if (hex(wordlist[442]) === KiYoKu && hex(wordlist[443]) === KyoKu) {
        var tmp = wordlist[442];
        wordlist[442] = wordlist[443];
        wordlist[443] = tmp;
    }
    if (wordlist_1.check(lang) !== '0xcb36b09e6baa935787fd762ce65e80b0c6a8dabdfbc3a7f86ac0e2c4fd111600') {
        wordlist = null;
        throw new Error('BIP39 Wordlist for ja (Japanese) FAILED');
    }
}
var LangJa = /** @class */ (function (_super) {
    __extends(LangJa, _super);
    function LangJa() {
        return _super.call(this, 'ja') || this;
    }
    LangJa.prototype.getWord = function (index) {
        loadWords(this);
        return wordlist[index];
    };
    LangJa.prototype.getWordIndex = function (word) {
        loadWords(this);
        return wordlist.indexOf(word);
    };
    LangJa.prototype.split = function (mnemonic) {
        errors.checkNormalize();
        return mnemonic.split(/(?:\u3000| )+/g);
    };
    LangJa.prototype.join = function (words) {
        return words.join('\u3000');
    };
    return LangJa;
}(wordlist_1.Wordlist));
var langJa = new LangJa();
exports.langJa = langJa;
wordlist_1.register(langJa);


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var wordlist_1 = __webpack_require__(21);
var utf8_1 = __webpack_require__(9);
var data = [
    'OYAa',
    'ATAZoATBl3ATCTrATCl8ATDloATGg3ATHT8ATJT8ATJl3ATLlvATLn4ATMT8ATMX8ATMboATMgoAToLbAToMTATrHgATvHnAT3AnAT3JbAT3MTAT8DbAT8JTAT8LmAT8MYAT8MbAT#LnAUHT8AUHZvAUJXrAUJX8AULnrAXJnvAXLUoAXLgvAXMn6AXRg3AXrMbAX3JTAX3QbAYLn3AZLgvAZrSUAZvAcAZ8AaAZ8AbAZ8AnAZ8HnAZ8LgAZ8MYAZ8MgAZ8OnAaAboAaDTrAaFTrAaJTrAaJboAaLVoAaMXvAaOl8AaSeoAbAUoAbAg8AbAl4AbGnrAbMT8AbMXrAbMn4AbQb8AbSV8AbvRlAb8AUAb8AnAb8HgAb8JTAb8NTAb8RbAcGboAcLnvAcMT8AcMX8AcSToAcrAaAcrFnAc8AbAc8MgAfGgrAfHboAfJnvAfLV8AfLkoAfMT8AfMnoAfQb8AfScrAfSgrAgAZ8AgFl3AgGX8AgHZvAgHgrAgJXoAgJX8AgJboAgLZoAgLn4AgOX8AgoATAgoAnAgoCUAgoJgAgoLXAgoMYAgoSeAgrDUAgrJTAhrFnAhrLjAhrQgAjAgoAjJnrAkMX8AkOnoAlCTvAlCV8AlClvAlFg4AlFl6AlFn3AloSnAlrAXAlrAfAlrFUAlrFbAlrGgAlrOXAlvKnAlvMTAl3AbAl3MnAnATrAnAcrAnCZ3AnCl8AnDg8AnFboAnFl3AnHX4AnHbrAnHgrAnIl3AnJgvAnLXoAnLX4AnLbrAnLgrAnLhrAnMXoAnMgrAnOn3AnSbrAnSeoAnvLnAn3OnCTGgvCTSlvCTvAUCTvKnCTvNTCT3CZCT3GUCT3MTCT8HnCUCZrCULf8CULnvCU3HnCU3JUCY6NUCbDb8CbFZoCbLnrCboOTCboScCbrFnCbvLnCb8AgCb8HgCb$LnCkLfoClBn3CloDUDTHT8DTLl3DTSU8DTrAaDTrLXDTrLjDTrOYDTrOgDTvFXDTvFnDT3HUDT3LfDUCT9DUDT4DUFVoDUFV8DUFkoDUGgrDUJnrDULl8DUMT8DUMXrDUMX4DUMg8DUOUoDUOgvDUOg8DUSToDUSZ8DbDXoDbDgoDbGT8DbJn3DbLg3DbLn4DbMXrDbMg8DbOToDboJXGTClvGTDT8GTFZrGTLVoGTLlvGTLl3GTMg8GTOTvGTSlrGToCUGTrDgGTrJYGTrScGTtLnGTvAnGTvQgGUCZrGUDTvGUFZoGUHXrGULnvGUMT8GUoMgGXoLnGXrMXGXrMnGXvFnGYLnvGZOnvGZvOnGZ8LaGZ8LmGbAl3GbDYvGbDlrGbHX3GbJl4GbLV8GbLn3GbMn4GboJTGboRfGbvFUGb3GUGb4JnGgDX3GgFl$GgJlrGgLX6GgLZoGgLf8GgOXoGgrAgGgrJXGgrMYGgrScGgvATGgvOYGnAgoGnJgvGnLZoGnLg3GnLnrGnQn8GnSbrGnrMgHTClvHTDToHTFT3HTQT8HToJTHToJgHTrDUHTrMnHTvFYHTvRfHT8MnHT8SUHUAZ8HUBb4HUDTvHUoMYHXFl6HXJX6HXQlrHXrAUHXrMnHXrSbHXvFYHXvKXHX3LjHX3MeHYvQlHZrScHZvDbHbAcrHbFT3HbFl3HbJT8HbLTrHbMT8HbMXrHbMbrHbQb8HbSX3HboDbHboJTHbrFUHbrHgHbrJTHb8JTHb8MnHb8QgHgAlrHgDT3HgGgrHgHgrHgJTrHgJT8HgLX@HgLnrHgMT8HgMX8HgMboHgOnrHgQToHgRg3HgoHgHgrCbHgrFnHgrLVHgvAcHgvAfHnAloHnCTrHnCnvHnGTrHnGZ8HnGnvHnJT8HnLf8HnLkvHnMg8HnRTrITvFUITvFnJTAXrJTCV8JTFT3JTFT8JTFn4JTGgvJTHT8JTJT8JTJXvJTJl3JTJnvJTLX4JTLf8JTLhvJTMT8JTMXrJTMnrJTObrJTQT8JTSlvJT8DUJT8FkJT8MTJT8OXJT8OgJT8QUJT8RfJUHZoJXFT4JXFlrJXGZ8JXGnrJXLV8JXLgvJXMXoJXMX3JXNboJXPlvJXoJTJXoLkJXrAXJXrHUJXrJgJXvJTJXvOnJX4KnJYAl3JYJT8JYLhvJYQToJYrQXJY6NUJbAl3JbCZrJbDloJbGT8JbGgrJbJXvJbJboJbLf8JbLhrJbLl3JbMnvJbRg8JbSZ8JboDbJbrCZJbrSUJb3KnJb8LnJfRn8JgAXrJgCZrJgDTrJgGZrJgGZ8JgHToJgJT8JgJXoJgJgvJgLX4JgLZ3JgLZ8JgLn4JgMgrJgMn4JgOgvJgPX6JgRnvJgSToJgoCZJgoJbJgoMYJgrJXJgrJgJgrLjJg6MTJlCn3JlGgvJlJl8Jl4AnJl8FnJl8HgJnAToJnATrJnAbvJnDUoJnGnrJnJXrJnJXvJnLhvJnLnrJnLnvJnMToJnMT8JnMXvJnMX3JnMg8JnMlrJnMn4JnOX8JnST4JnSX3JnoAgJnoAnJnoJTJnoObJnrAbJnrAkJnrHnJnrJTJnrJYJnrOYJnrScJnvCUJnvFaJnvJgJnvJnJnvOYJnvQUJnvRUJn3FnJn3JTKnFl3KnLT6LTDlvLTMnoLTOn3LTRl3LTSb4LTSlrLToAnLToJgLTrAULTrAcLTrCULTrHgLTrMgLT3JnLULnrLUMX8LUoJgLVATrLVDTrLVLb8LVoJgLV8MgLV8RTLXDg3LXFlrLXrCnLXrLXLX3GTLX4GgLX4OYLZAXrLZAcrLZAgrLZAhrLZDXyLZDlrLZFbrLZFl3LZJX6LZJX8LZLc8LZLnrLZSU8LZoJTLZoJnLZrAgLZrAnLZrJYLZrLULZrMgLZrSkLZvAnLZvGULZvJeLZvOTLZ3FZLZ4JXLZ8STLZ8ScLaAT3LaAl3LaHT8LaJTrLaJT8LaJXrLaJgvLaJl4LaLVoLaMXrLaMXvLaMX8LbClvLbFToLbHlrLbJn4LbLZ3LbLhvLbMXrLbMnoLbvSULcLnrLc8HnLc8MTLdrMnLeAgoLeOgvLeOn3LfAl3LfLnvLfMl3LfOX8Lf8AnLf8JXLf8LXLgJTrLgJXrLgJl8LgMX8LgRZrLhCToLhrAbLhrFULhrJXLhvJYLjHTrLjHX4LjJX8LjLhrLjSX3LjSZ4LkFX4LkGZ8LkGgvLkJTrLkMXoLkSToLkSU8LkSZ8LkoOYLl3FfLl3MgLmAZrLmCbrLmGgrLmHboLmJnoLmJn3LmLfoLmLhrLmSToLnAX6LnAb6LnCZ3LnCb3LnDTvLnDb8LnFl3LnGnrLnHZvLnHgvLnITvLnJT8LnJX8LnJlvLnLf8LnLg6LnLhvLnLnoLnMXrLnMg8LnQlvLnSbrLnrAgLnrAnLnrDbLnrFkLnrJdLnrMULnrOYLnrSTLnvAnLnvDULnvHgLnvOYLnvOnLn3GgLn4DULn4JTLn4JnMTAZoMTAloMTDb8MTFT8MTJnoMTJnrMTLZrMTLhrMTLkvMTMX8MTRTrMToATMTrDnMTrOnMT3JnMT4MnMT8FUMT8FaMT8FlMT8GTMT8GbMT8GnMT8HnMT8JTMT8JbMT8OTMUCl8MUJTrMUJU8MUMX8MURTrMUSToMXAX6MXAb6MXCZoMXFXrMXHXrMXLgvMXOgoMXrAUMXrAnMXrHgMXrJYMXrJnMXrMTMXrMgMXrOYMXrSZMXrSgMXvDUMXvOTMX3JgMX3OTMX4JnMX8DbMX8FnMX8HbMX8HgMX8HnMX8LbMX8MnMX8OnMYAb8MYGboMYHTvMYHX4MYLTrMYLnvMYMToMYOgvMYRg3MYSTrMbAToMbAXrMbAl3MbAn8MbGZ8MbJT8MbJXrMbMXvMbMX8MbMnoMbrMUMb8AfMb8FbMb8FkMcJXoMeLnrMgFl3MgGTvMgGXoMgGgrMgGnrMgHT8MgHZrMgJnoMgLnrMgLnvMgMT8MgQUoMgrHnMgvAnMg8HgMg8JYMg8LfMloJnMl8ATMl8AXMl8JYMnAToMnAT4MnAZ8MnAl3MnAl4MnCl8MnHT8MnHg8MnJnoMnLZoMnLhrMnMXoMnMX3MnMnrMnOgvMnrFbMnrFfMnrFnMnrNTMnvJXNTMl8OTCT3OTFV8OTFn3OTHZvOTJXrOTOl3OT3ATOT3JUOT3LZOT3LeOT3MbOT8ATOT8AbOT8AgOT8MbOUCXvOUMX3OXHXvOXLl3OXrMUOXvDbOX6NUOX8JbOYFZoOYLbrOYLkoOYMg8OYSX3ObHTrObHT4ObJgrObLhrObMX3ObOX8Ob8FnOeAlrOeJT8OeJXrOeJnrOeLToOeMb8OgJXoOgLXoOgMnrOgOXrOgOloOgoAgOgoJbOgoMYOgoSTOg8AbOjLX4OjMnoOjSV8OnLVoOnrAgOn3DUPXQlrPXvFXPbvFTPdAT3PlFn3PnvFbQTLn4QToAgQToMTQULV8QURg8QUoJnQXCXvQbFbrQb8AaQb8AcQb8FbQb8MYQb8ScQeAlrQeLhrQjAn3QlFXoQloJgQloSnRTLnvRTrGURTrJTRUJZrRUoJlRUrQnRZrLmRZrMnRZrSnRZ8ATRZ8JbRZ8ScRbMT8RbST3RfGZrRfMX8RfMgrRfSZrRnAbrRnGT8RnvJgRnvLfRnvMTRn8AaSTClvSTJgrSTOXrSTRg3STRnvSToAcSToAfSToAnSToHnSToLjSToMTSTrAaSTrEUST3BYST8AgST8LmSUAZvSUAgrSUDT4SUDT8SUGgvSUJXoSUJXvSULTrSU8JTSU8LjSV8AnSV8JgSXFToSXLf8SYvAnSZrDUSZrMUSZrMnSZ8HgSZ8JTSZ8JgSZ8MYSZ8QUSaQUoSbCT3SbHToSbQYvSbSl4SboJnSbvFbSb8HbSb8JgSb8OTScGZrScHgrScJTvScMT8ScSToScoHbScrMTScvAnSeAZrSeAcrSeHboSeJUoSeLhrSeMT8SeMXrSe6JgSgHTrSkJnoSkLnvSk8CUSlFl3SlrSnSl8GnSmAboSmGT8SmJU8',
    'ATLnDlATrAZoATrJX4ATrMT8ATrMX4ATrRTrATvDl8ATvJUoATvMl8AT3AToAT3MX8AT8CT3AT8DT8AT8HZrAT8HgoAUAgFnAUCTFnAXoMX8AXrAT8AXrGgvAXrJXvAXrOgoAXvLl3AZvAgoAZvFbrAZvJXoAZvJl8AZvJn3AZvMX8AZvSbrAZ8FZoAZ8LZ8AZ8MU8AZ8OTvAZ8SV8AZ8SX3AbAgFZAboJnoAbvGboAb8ATrAb8AZoAb8AgrAb8Al4Ab8Db8Ab8JnoAb8LX4Ab8LZrAb8LhrAb8MT8Ab8OUoAb8Qb8Ab8ST8AcrAUoAcrAc8AcrCZ3AcrFT3AcrFZrAcrJl4AcrJn3AcrMX3AcrOTvAc8AZ8Ac8MT8AfAcJXAgoFn4AgoGgvAgoGnrAgoLc8AgoMXoAgrLnrAkrSZ8AlFXCTAloHboAlrHbrAlrLhrAlrLkoAl3CZrAl3LUoAl3LZrAnrAl4AnrMT8An3HT4BT3IToBX4MnvBb!Ln$CTGXMnCToLZ4CTrHT8CT3JTrCT3RZrCT#GTvCU6GgvCU8Db8CU8GZrCU8HT8CboLl3CbrGgrCbrMU8Cb8DT3Cb8GnrCb8LX4Cb8MT8Cb8ObrCgrGgvCgrKX4Cl8FZoDTrAbvDTrDboDTrGT6DTrJgrDTrMX3DTrRZrDTrRg8DTvAVvDTvFZoDT3DT8DT3Ln3DT4HZrDT4MT8DT8AlrDT8MT8DUAkGbDUDbJnDYLnQlDbDUOYDbMTAnDbMXSnDboAT3DboFn4DboLnvDj6JTrGTCgFTGTGgFnGTJTMnGTLnPlGToJT8GTrCT3GTrLVoGTrLnvGTrMX3GTrMboGTvKl3GZClFnGZrDT3GZ8DTrGZ8FZ8GZ8MXvGZ8On8GZ8ST3GbCnQXGbMbFnGboFboGboJg3GboMXoGb3JTvGb3JboGb3Mn6Gb3Qb8GgDXLjGgMnAUGgrDloGgrHX4GgrSToGgvAXrGgvAZvGgvFbrGgvLl3GgvMnvGnDnLXGnrATrGnrMboGnuLl3HTATMnHTAgCnHTCTCTHTrGTvHTrHTvHTrJX8HTrLl8HTrMT8HTrMgoHTrOTrHTuOn3HTvAZrHTvDTvHTvGboHTvJU8HTvLl3HTvMXrHTvQb4HT4GT6HT4JT8HT4Jb#HT8Al3HT8GZrHT8GgrHT8HX4HT8Jb8HT8JnoHT8LTrHT8LgvHT8SToHT8SV8HUoJUoHUoJX8HUoLnrHXrLZoHXvAl3HX3LnrHX4FkvHX4LhrHX4MXoHX4OnoHZrAZ8HZrDb8HZrGZ8HZrJnrHZvGZ8HZvLnvHZ8JnvHZ8LhrHbCXJlHbMTAnHboJl4HbpLl3HbrJX8HbrLnrHbrMnvHbvRYrHgoSTrHgrFV8HgrGZ8HgrJXoHgrRnvHgvBb!HgvGTrHgvHX4HgvHn!HgvLTrHgvSU8HnDnLbHnFbJbHnvDn8Hn6GgvHn!BTvJTCTLnJTQgFnJTrAnvJTrLX4JTrOUoJTvFn3JTvLnrJTvNToJT3AgoJT3Jn4JT3LhvJT3ObrJT8AcrJT8Al3JT8JT8JT8JnoJT8LX4JT8LnrJT8MX3JT8Rg3JT8Sc8JUoBTvJU8AToJU8GZ8JU8GgvJU8JTrJU8JXrJU8JnrJU8LnvJU8ScvJXHnJlJXrGgvJXrJU8JXrLhrJXrMT8JXrMXrJXrQUoJXvCTvJXvGZ8JXvGgrJXvQT8JX8Ab8JX8DT8JX8GZ8JX8HZvJX8LnrJX8MT8JX8MXoJX8MnvJX8ST3JYGnCTJbAkGbJbCTAnJbLTAcJboDT3JboLb6JbrAnvJbrCn3JbrDl8JbrGboJbrIZoJbrJnvJbrMnvJbrQb4Jb8RZrJeAbAnJgJnFbJgScAnJgrATrJgvHZ8JgvMn4JlJlFbJlLiQXJlLjOnJlRbOlJlvNXoJlvRl3Jl4AcrJl8AUoJl8MnrJnFnMlJnHgGbJnoDT8JnoFV8JnoGgvJnoIT8JnoQToJnoRg3JnrCZ3JnrGgrJnrHTvJnrLf8JnrOX8JnvAT3JnvFZoJnvGT8JnvJl4JnvMT8JnvMX8JnvOXrJnvPX6JnvSX3JnvSZrJn3MT8Jn3MX8Jn3RTrLTATKnLTJnLTLTMXKnLTRTQlLToGb8LTrAZ8LTrCZ8LTrDb8LTrHT8LT3PX6LT4FZoLT$CTvLT$GgrLUvHX3LVoATrLVoAgoLVoJboLVoMX3LVoRg3LV8CZ3LV8FZoLV8GTvLXrDXoLXrFbrLXvAgvLXvFlrLXvLl3LXvRn6LX4Mb8LX8GT8LYCXMnLYrMnrLZoSTvLZrAZvLZrAloLZrFToLZrJXvLZrJboLZrJl4LZrLnrLZrMT8LZrOgvLZrRnvLZrST4LZvMX8LZvSlvLZ8AgoLZ8CT3LZ8JT8LZ8LV8LZ8LZoLZ8Lg8LZ8SV8LZ8SbrLZ$HT8LZ$Mn4La6CTvLbFbMnLbRYFTLbSnFZLboJT8LbrAT9LbrGb3LbrQb8LcrJX8LcrMXrLerHTvLerJbrLerNboLgrDb8LgrGZ8LgrHTrLgrMXrLgrSU8LgvJTrLgvLl3Lg6Ll3LhrLnrLhrMT8LhvAl4LiLnQXLkoAgrLkoJT8LkoJn4LlrSU8Ll3FZoLl3HTrLl3JX8Ll3JnoLl3LToLmLeFbLnDUFbLnLVAnLnrATrLnrAZoLnrAb8LnrAlrLnrGgvLnrJU8LnrLZrLnrLhrLnrMb8LnrOXrLnrSZ8LnvAb4LnvDTrLnvDl8LnvHTrLnvHbrLnvJT8LnvJU8LnvJbrLnvLhvLnvMX8LnvMb8LnvNnoLnvSU8Ln3Al3Ln4FZoLn4GT6Ln4JgvLn4LhrLn4MT8Ln4SToMToCZrMToJX8MToLX4MToLf8MToRg3MTrEloMTvGb6MT3BTrMT3Lb6MT8AcrMT8AgrMT8GZrMT8JnoMT8LnrMT8MX3MUOUAnMXAbFnMXoAloMXoJX8MXoLf8MXoLl8MXrAb8MXrDTvMXrGT8MXrGgrMXrHTrMXrLf8MXrMU8MXrOXvMXrQb8MXvGT8MXvHTrMXvLVoMX3AX3MX3Jn3MX3LhrMX3MX3MX4AlrMX4OboMX8GTvMX8GZrMX8GgrMX8JT8MX8JX8MX8LhrMX8MT8MYDUFbMYMgDbMbGnFfMbvLX4MbvLl3Mb8Mb8Mb8ST4MgGXCnMg8ATrMg8AgoMg8CZrMg8DTrMg8DboMg8HTrMg8JgrMg8LT8MloJXoMl8AhrMl8JT8MnLgAUMnoJXrMnoLX4MnoLhrMnoMT8MnrAl4MnrDb8MnrOTvMnrOgvMnrQb8MnrSU8MnvGgrMnvHZ8Mn3MToMn4DTrMn4LTrMn4Mg8NnBXAnOTFTFnOToAToOTrGgvOTrJX8OT3JXoOT6MTrOT8GgrOT8HTpOT8MToOUoHT8OUoJT8OUoLn3OXrAgoOXrDg8OXrMT8OXvSToOX6CTvOX8CZrOX8OgrOb6HgvOb8AToOb8MT8OcvLZ8OgvAlrOgvHTvOgvJTrOgvJnrOgvLZrOgvLn4OgvMT8OgvRTrOg8AZoOg8DbvOnrOXoOnvJn4OnvLhvOnvRTrOn3GgoOn3JnvOn6JbvOn8OTrPTGYFTPbBnFnPbGnDnPgDYQTPlrAnvPlrETvPlrLnvPlrMXvPlvFX4QTMTAnQTrJU8QYCnJlQYJlQlQbGTQbQb8JnrQb8LZoQb8LnvQb8MT8Qb8Ml8Qb8ST4QloAl4QloHZvQloJX8QloMn8QnJZOlRTrAZvRTrDTrRTvJn4RTvLhvRT4Jb8RZrAZrRZ8AkrRZ8JU8RZ8LV8RZ8LnvRbJlQXRg3GboRg3MnvRg8AZ8Rg8JboRg8Jl4RnLTCbRnvFl3RnvQb8SToAl4SToCZrSToFZoSToHXrSToJU8SToJgvSToJl4SToLhrSToMX3STrAlvSTrCT9STrCgrSTrGgrSTrHXrSTrHboSTrJnoSTrNboSTvLnrST4AZoST8Ab8ST8JT8SUoJn3SU6HZ#SU6JTvSU8Db8SU8HboSU8LgrSV8JT8SZrAcrSZrAl3SZrJT8SZrJnvSZrMT8SZvLUoSZ4FZoSZ8JnoSZ8RZrScoLnrScoMT8ScoMX8ScrAT4ScrAZ8ScrLZ8ScrLkvScvDb8ScvLf8ScvNToSgrFZrShvKnrSloHUoSloLnrSlrMXoSl8HgrSmrJUoSn3BX6',
    'ATFlOn3ATLgrDYAT4MTAnAT8LTMnAYJnRTrAbGgJnrAbLV8LnAbvNTAnAeFbLg3AgOYMXoAlQbFboAnDboAfAnJgoJTBToDgAnBUJbAl3BboDUAnCTDlvLnCTFTrSnCYoQTLnDTwAbAnDUDTrSnDUHgHgrDX8LXFnDbJXAcrETvLTLnGTFTQbrGTMnGToGT3DUFbGUJlPX3GbQg8LnGboJbFnGb3GgAYGgAg8ScGgMbAXrGgvAbAnGnJTLnvGnvATFgHTDT6ATHTrDlJnHYLnMn8HZrSbJTHZ8LTFnHbFTJUoHgSeMT8HgrLjAnHgvAbAnHlFUrDlHnDgvAnHnHTFT3HnQTGnrJTAaMXvJTGbCn3JTOgrAnJXvAXMnJbMg8SnJbMnRg3Jb8LTMnJnAl3OnJnGYrQlJnJlQY3LTDlCn3LTJjLg3LTLgvFXLTMg3GTLV8HUOgLXFZLg3LXNXrMnLX8QXFnLX9AlMYLYLXPXrLZAbJU8LZDUJU8LZMXrSnLZ$AgFnLaPXrDULbFYrMnLbMn8LXLboJgJgLeFbLg3LgLZrSnLgOYAgoLhrRnJlLkCTrSnLkOnLhrLnFX%AYLnFZoJXLnHTvJbLnLloAbMTATLf8MTHgJn3MTMXrAXMT3MTFnMUITvFnMXFX%AYMXMXvFbMXrFTDbMYAcMX3MbLf8SnMb8JbFnMgMXrMTMgvAXFnMgvGgCmMnAloSnMnFnJTrOXvMXSnOX8HTMnObJT8ScObLZFl3ObMXCZoPTLgrQXPUFnoQXPU3RXJlPX3RkQXPbrJXQlPlrJbFnQUAhrDbQXGnCXvQYLnHlvQbLfLnvRTOgvJbRXJYrQlRYLnrQlRbLnrQlRlFT8JlRlFnrQXSTClCn3STHTrAnSTLZQlrSTMnGTrSToHgGbSTrGTDnSTvGXCnST3HgFbSU3HXAXSbAnJn3SbFT8LnScLfLnv',
    'AT3JgJX8AT8FZoSnAT8JgFV8AT8LhrDbAZ8JT8DbAb8GgLhrAb8SkLnvAe8MT8SnAlMYJXLVAl3GYDTvAl3LfLnvBUDTvLl3CTOn3HTrCT3DUGgrCU8MT8AbCbFTrJUoCgrDb8MTDTLV8JX8DTLnLXQlDT8LZrSnDUQb8FZ8DUST4JnvDb8ScOUoDj6GbJl4GTLfCYMlGToAXvFnGboAXvLnGgAcrJn3GgvFnSToGnLf8JnvGn#HTDToHTLnFXJlHTvATFToHTvHTDToHTvMTAgoHT3STClvHT4AlFl6HT8HTDToHUoDgJTrHUoScMX3HbRZrMXoHboJg8LTHgDb8JTrHgMToLf8HgvLnLnoHnHn3HT4Hn6MgvAnJTJU8ScvJT3AaQT8JT8HTrAnJXrRg8AnJbAloMXoJbrATFToJbvMnoSnJgDb6GgvJgDb8MXoJgSX3JU8JguATFToJlPYLnQlJlQkDnLbJlQlFYJlJl8Lf8OTJnCTFnLbJnLTHXMnJnLXGXCnJnoFfRg3JnrMYRg3Jn3HgFl3KT8Dg8LnLTRlFnPTLTvPbLbvLVoSbrCZLXMY6HT3LXNU7DlrLXNXDTATLX8DX8LnLZDb8JU8LZMnoLhrLZSToJU8LZrLaLnrLZvJn3SnLZ8LhrSnLaJnoMT8LbFlrHTvLbrFTLnrLbvATLlvLb6OTFn3LcLnJZOlLeAT6Mn4LeJT3ObrLg6LXFlrLhrJg8LnLhvDlPX4LhvLfLnvLj6JTFT3LnFbrMXoLnQluCTvLnrQXCY6LnvLfLnvLnvMgLnvLnvSeLf8MTMbrJn3MT3JgST3MT8AnATrMT8LULnrMUMToCZrMUScvLf8MXoDT8SnMX6ATFToMX8AXMT8MX8FkMT8MX8HTrDUMX8ScoSnMYJT6CTvMgAcrMXoMg8SToAfMlvAXLg3MnFl3AnvOT3AnFl3OUoATHT8OU3RnLXrOXrOXrSnObPbvFn6Og8HgrSnOg8OX8DbPTvAgoJgPU3RYLnrPXrDnJZrPb8CTGgvPlrLTDlvPlvFUJnoQUvFXrQlQeMnoAl3QlrQlrSnRTFTrJUoSTDlLiLXSTFg6HT3STJgoMn4STrFTJTrSTrLZFl3ST4FnMXoSUrDlHUoScvHTvSnSfLkvMXo',
    'AUoAcrMXoAZ8HboAg8AbOg6ATFgAg8AloMXoAl3AT8JTrAl8MX8MXoCT3SToJU8Cl8Db8MXoDT8HgrATrDboOT8MXoGTOTrATMnGT8LhrAZ8GnvFnGnQXHToGgvAcrHTvAXvLl3HbrAZoMXoHgBlFXLg3HgMnFXrSnHgrSb8JUoHn6HT8LgvITvATrJUoJUoLZrRnvJU8HT8Jb8JXvFX8QT8JXvLToJTrJYrQnGnQXJgrJnoATrJnoJU8ScvJnvMnvMXoLTCTLgrJXLTJlRTvQlLbRnJlQYvLbrMb8LnvLbvFn3RnoLdCVSTGZrLeSTvGXCnLg3MnoLn3MToLlrETvMT8SToAl3MbrDU6GTvMb8LX4LhrPlrLXGXCnSToLf8Rg3STrDb8LTrSTvLTHXMnSb3RYLnMnSgOg6ATFg',
    'HUDlGnrQXrJTrHgLnrAcJYMb8DULc8LTvFgGnCk3Mg8JbAnLX4QYvFYHnMXrRUoJnGnvFnRlvFTJlQnoSTrBXHXrLYSUJgLfoMT8Se8DTrHbDb',
    'AbDl8SToJU8An3RbAb8ST8DUSTrGnrAgoLbFU6Db8LTrMg8AaHT8Jb8ObDl8SToJU8Pb3RlvFYoJl'
];
var codes = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';
function getHangul(code) {
    if (code >= 40) {
        code = code + 168 - 40;
    }
    else if (code >= 19) {
        code = code + 97 - 19;
    }
    return utf8_1.toUtf8String([225, (code >> 6) + 132, (code & 0x3f) + 128]);
}
var wordlist = null;
function loadWords(lang) {
    if (wordlist != null) {
        return;
    }
    wordlist = [];
    data.forEach(function (data, length) {
        length += 4;
        for (var i = 0; i < data.length; i += length) {
            var word = '';
            for (var j = 0; j < length; j++) {
                word += getHangul(codes.indexOf(data[i + j]));
            }
            wordlist.push(word);
        }
    });
    wordlist.sort();
    if (wordlist_1.check(lang) !== '0xf9eddeace9c5d3da9c93cf7d3cd38f6a13ed3affb933259ae865714e8a3ae71a') {
        wordlist = null;
        throw new Error('BIP39 Wordlist for ko (Korean) FAILED');
    }
}
var LangKo = /** @class */ (function (_super) {
    __extends(LangKo, _super);
    function LangKo() {
        return _super.call(this, 'ko') || this;
    }
    LangKo.prototype.getWord = function (index) {
        loadWords(this);
        return wordlist[index];
    };
    LangKo.prototype.getWordIndex = function (word) {
        loadWords(this);
        return wordlist.indexOf(word);
    };
    return LangKo;
}(wordlist_1.Wordlist));
var langKo = new LangKo();
exports.langKo = langKo;
wordlist_1.register(langKo);


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var wordlist_1 = __webpack_require__(21);
var words = "AbacoAbbaglioAbbinatoAbeteAbissoAbolireAbrasivoAbrogatoAccadereAccennoAccusatoAcetoneAchilleAcidoAcquaAcreAcrilicoAcrobataAcutoAdagioAddebitoAddomeAdeguatoAderireAdipeAdottareAdulareAffabileAffettoAffissoAffrantoAforismaAfosoAfricanoAgaveAgenteAgevoleAggancioAgireAgitareAgonismoAgricoloAgrumetoAguzzoAlabardaAlatoAlbatroAlberatoAlboAlbumeAlceAlcolicoAlettoneAlfaAlgebraAlianteAlibiAlimentoAllagatoAllegroAllievoAllodolaAllusivoAlmenoAlogenoAlpacaAlpestreAltalenaAlternoAlticcioAltroveAlunnoAlveoloAlzareAmalgamaAmanitaAmarenaAmbitoAmbratoAmebaAmericaAmetistaAmicoAmmassoAmmendaAmmirareAmmonitoAmoreAmpioAmpliareAmuletoAnacardoAnagrafeAnalistaAnarchiaAnatraAncaAncellaAncoraAndareAndreaAnelloAngeloAngolareAngustoAnimaAnnegareAnnidatoAnnoAnnuncioAnonimoAnticipoAnziApaticoAperturaApodeApparireAppetitoAppoggioApprodoAppuntoAprileArabicaArachideAragostaAraldicaArancioAraturaArazzoArbitroArchivioArditoArenileArgentoArgineArgutoAriaArmoniaArneseArredatoArringaArrostoArsenicoArsoArteficeArzilloAsciuttoAscoltoAsepsiAsetticoAsfaltoAsinoAsolaAspiratoAsproAssaggioAsseAssolutoAssurdoAstaAstenutoAsticeAstrattoAtavicoAteismoAtomicoAtonoAttesaAttivareAttornoAttritoAttualeAusilioAustriaAutistaAutonomoAutunnoAvanzatoAvereAvvenireAvvisoAvvolgereAzioneAzotoAzzimoAzzurroBabeleBaccanoBacinoBacoBadessaBadilataBagnatoBaitaBalconeBaldoBalenaBallataBalzanoBambinoBandireBaraondaBarbaroBarcaBaritonoBarlumeBaroccoBasilicoBassoBatostaBattutoBauleBavaBavosaBeccoBeffaBelgioBelvaBendaBenevoleBenignoBenzinaBereBerlinaBetaBibitaBiciBidoneBifidoBigaBilanciaBimboBinocoloBiologoBipedeBipolareBirbanteBirraBiscottoBisestoBisnonnoBisonteBisturiBizzarroBlandoBlattaBollitoBonificoBordoBoscoBotanicoBottinoBozzoloBraccioBradipoBramaBrancaBravuraBretellaBrevettoBrezzaBrigliaBrillanteBrindareBroccoloBrodoBronzinaBrulloBrunoBubboneBucaBudinoBuffoneBuioBulboBuonoBurloneBurrascaBussolaBustaCadettoCaducoCalamaroCalcoloCalesseCalibroCalmoCaloriaCambusaCamerataCamiciaCamminoCamolaCampaleCanapaCandelaCaneCaninoCanottoCantinaCapaceCapelloCapitoloCapogiroCapperoCapraCapsulaCarapaceCarcassaCardoCarismaCarovanaCarrettoCartolinaCasaccioCascataCasermaCasoCassoneCastelloCasualeCatastaCatenaCatrameCautoCavilloCedibileCedrataCefaloCelebreCellulareCenaCenoneCentesimoCeramicaCercareCertoCerumeCervelloCesoiaCespoCetoChelaChiaroChiccaChiedereChimeraChinaChirurgoChitarraCiaoCiclismoCifrareCignoCilindroCiottoloCircaCirrosiCitricoCittadinoCiuffoCivettaCivileClassicoClinicaCloroCoccoCodardoCodiceCoerenteCognomeCollareColmatoColoreColposoColtivatoColzaComaCometaCommandoComodoComputerComuneConcisoCondurreConfermaCongelareConiugeConnessoConoscereConsumoContinuoConvegnoCopertoCopioneCoppiaCopricapoCorazzaCordataCoricatoCorniceCorollaCorpoCorredoCorsiaCorteseCosmicoCostanteCotturaCovatoCratereCravattaCreatoCredereCremosoCrescitaCretaCricetoCrinaleCrisiCriticoCroceCronacaCrostataCrucialeCruscaCucireCuculoCuginoCullatoCupolaCuratoreCursoreCurvoCuscinoCustodeDadoDainoDalmataDamerinoDanielaDannosoDanzareDatatoDavantiDavveroDebuttoDecennioDecisoDeclinoDecolloDecretoDedicatoDefinitoDeformeDegnoDelegareDelfinoDelirioDeltaDemenzaDenotatoDentroDepositoDerapataDerivareDerogaDescrittoDesertoDesiderioDesumereDetersivoDevotoDiametroDicembreDiedroDifesoDiffusoDigerireDigitaleDiluvioDinamicoDinnanziDipintoDiplomaDipoloDiradareDireDirottoDirupoDisagioDiscretoDisfareDisgeloDispostoDistanzaDisumanoDitoDivanoDiveltoDividereDivoratoDobloneDocenteDoganaleDogmaDolceDomatoDomenicaDominareDondoloDonoDormireDoteDottoreDovutoDozzinaDragoDruidoDubbioDubitareDucaleDunaDuomoDupliceDuraturoEbanoEccessoEccoEclissiEconomiaEderaEdicolaEdileEditoriaEducareEgemoniaEgliEgoismoEgregioElaboratoElargireEleganteElencatoElettoElevareElficoElicaElmoElsaElusoEmanatoEmblemaEmessoEmiroEmotivoEmozioneEmpiricoEmuloEndemicoEnduroEnergiaEnfasiEnotecaEntrareEnzimaEpatiteEpilogoEpisodioEpocaleEppureEquatoreErarioErbaErbosoEredeEremitaErigereErmeticoEroeErosivoErranteEsagonoEsameEsanimeEsaudireEscaEsempioEsercitoEsibitoEsigenteEsistereEsitoEsofagoEsortatoEsosoEspansoEspressoEssenzaEssoEstesoEstimareEstoniaEstrosoEsultareEtilicoEtnicoEtruscoEttoEuclideoEuropaEvasoEvidenzaEvitatoEvolutoEvvivaFabbricaFaccendaFachiroFalcoFamigliaFanaleFanfaraFangoFantasmaFareFarfallaFarinosoFarmacoFasciaFastosoFasulloFaticareFatoFavolosoFebbreFecolaFedeFegatoFelpaFeltroFemminaFendereFenomenoFermentoFerroFertileFessuraFestivoFettaFeudoFiabaFiduciaFifaFiguratoFiloFinanzaFinestraFinireFioreFiscaleFisicoFiumeFlaconeFlamencoFleboFlemmaFloridoFluenteFluoroFobicoFocacciaFocosoFoderatoFoglioFolataFolcloreFolgoreFondenteFoneticoFoniaFontanaForbitoForchettaForestaFormicaFornaioForoFortezzaForzareFosfatoFossoFracassoFranaFrassinoFratelloFreccettaFrenataFrescoFrigoFrollinoFrondeFrugaleFruttaFucilataFucsiaFuggenteFulmineFulvoFumanteFumettoFumosoFuneFunzioneFuocoFurboFurgoneFuroreFusoFutileGabbianoGaffeGalateoGallinaGaloppoGamberoGammaGaranziaGarboGarofanoGarzoneGasdottoGasolioGastricoGattoGaudioGazeboGazzellaGecoGelatinaGelsoGemelloGemmatoGeneGenitoreGennaioGenotipoGergoGhepardoGhiaccioGhisaGialloGildaGineproGiocareGioielloGiornoGioveGiratoGironeGittataGiudizioGiuratoGiustoGlobuloGlutineGnomoGobbaGolfGomitoGommoneGonfioGonnaGovernoGracileGradoGraficoGrammoGrandeGrattareGravosoGraziaGrecaGreggeGrifoneGrigioGrinzaGrottaGruppoGuadagnoGuaioGuantoGuardareGufoGuidareIbernatoIconaIdenticoIdillioIdoloIdraIdricoIdrogenoIgieneIgnaroIgnoratoIlareIllesoIllogicoIlludereImballoImbevutoImboccoImbutoImmaneImmersoImmolatoImpaccoImpetoImpiegoImportoImprontaInalareInarcareInattivoIncantoIncendioInchinoIncisivoInclusoIncontroIncrocioIncuboIndagineIndiaIndoleIneditoInfattiInfilareInflittoIngaggioIngegnoIngleseIngordoIngrossoInnescoInodoreInoltrareInondatoInsanoInsettoInsiemeInsonniaInsulinaIntasatoInteroIntonacoIntuitoInumidireInvalidoInveceInvitoIperboleIpnoticoIpotesiIppicaIrideIrlandaIronicoIrrigatoIrrorareIsolatoIsotopoIstericoIstitutoIstriceItaliaIterareLabbroLabirintoLaccaLaceratoLacrimaLacunaLaddoveLagoLampoLancettaLanternaLardosoLargaLaringeLastraLatenzaLatinoLattugaLavagnaLavoroLegaleLeggeroLemboLentezzaLenzaLeoneLepreLesivoLessatoLestoLetteraleLevaLevigatoLiberoLidoLievitoLillaLimaturaLimitareLimpidoLineareLinguaLiquidoLiraLiricaLiscaLiteLitigioLivreaLocandaLodeLogicaLombareLondraLongevoLoquaceLorenzoLotoLotteriaLuceLucidatoLumacaLuminosoLungoLupoLuppoloLusingaLussoLuttoMacabroMacchinaMaceroMacinatoMadamaMagicoMagliaMagneteMagroMaiolicaMalafedeMalgradoMalintesoMalsanoMaltoMalumoreManaManciaMandorlaMangiareManifestoMannaroManovraMansardaMantideManubrioMappaMaratonaMarcireMarettaMarmoMarsupioMascheraMassaiaMastinoMaterassoMatricolaMattoneMaturoMazurcaMeandroMeccanicoMecenateMedesimoMeditareMegaMelassaMelisMelodiaMeningeMenoMensolaMercurioMerendaMerloMeschinoMeseMessereMestoloMetalloMetodoMettereMiagolareMicaMicelioMicheleMicroboMidolloMieleMiglioreMilanoMiliteMimosaMineraleMiniMinoreMirinoMirtilloMiscelaMissivaMistoMisurareMitezzaMitigareMitraMittenteMnemonicoModelloModificaModuloMoganoMogioMoleMolossoMonasteroMoncoMondinaMonetarioMonileMonotonoMonsoneMontatoMonvisoMoraMordereMorsicatoMostroMotivatoMotosegaMottoMovenzaMovimentoMozzoMuccaMucosaMuffaMughettoMugnaioMulattoMulinelloMultiploMummiaMuntoMuovereMuraleMusaMuscoloMusicaMutevoleMutoNababboNaftaNanometroNarcisoNariceNarratoNascereNastrareNaturaleNauticaNaviglioNebulosaNecrosiNegativoNegozioNemmenoNeofitaNerettoNervoNessunoNettunoNeutraleNeveNevroticoNicchiaNinfaNitidoNobileNocivoNodoNomeNominaNordicoNormaleNorvegeseNostranoNotareNotiziaNotturnoNovellaNucleoNullaNumeroNuovoNutrireNuvolaNuzialeOasiObbedireObbligoObeliscoOblioOboloObsoletoOccasioneOcchioOccidenteOccorrereOccultareOcraOculatoOdiernoOdorareOffertaOffrireOffuscatoOggettoOggiOgnunoOlandeseOlfattoOliatoOlivaOlogrammaOltreOmaggioOmbelicoOmbraOmegaOmissioneOndosoOnereOniceOnnivoroOnorevoleOntaOperatoOpinioneOppostoOracoloOrafoOrdineOrecchinoOreficeOrfanoOrganicoOrigineOrizzonteOrmaOrmeggioOrnativoOrologioOrrendoOrribileOrtensiaOrticaOrzataOrzoOsareOscurareOsmosiOspedaleOspiteOssaOssidareOstacoloOsteOtiteOtreOttagonoOttimoOttobreOvaleOvestOvinoOviparoOvocitoOvunqueOvviareOzioPacchettoPacePacificoPadellaPadronePaesePagaPaginaPalazzinaPalesarePallidoPaloPaludePandoroPannelloPaoloPaonazzoPapricaParabolaParcellaParerePargoloPariParlatoParolaPartireParvenzaParzialePassivoPasticcaPataccaPatologiaPattumePavonePeccatoPedalarePedonalePeggioPelosoPenarePendicePenisolaPennutoPenombraPensarePentolaPepePepitaPerbenePercorsoPerdonatoPerforarePergamenaPeriodoPermessoPernoPerplessoPersuasoPertugioPervasoPesatorePesistaPesoPestiferoPetaloPettinePetulantePezzoPiacerePiantaPiattinoPiccinoPicozzaPiegaPietraPifferoPigiamaPigolioPigroPilaPiliferoPillolaPilotaPimpantePinetaPinnaPinoloPioggiaPiomboPiramidePireticoPiritePirolisiPitonePizzicoPlaceboPlanarePlasmaPlatanoPlenarioPochezzaPoderosoPodismoPoesiaPoggiarePolentaPoligonoPollicePolmonitePolpettaPolsoPoltronaPolverePomicePomodoroPontePopolosoPorfidoPorosoPorporaPorrePortataPosaPositivoPossessoPostulatoPotassioPoterePranzoPrassiPraticaPreclusoPredicaPrefissoPregiatoPrelievoPremerePrenotarePreparatoPresenzaPretestoPrevalsoPrimaPrincipePrivatoProblemaProcuraProdurreProfumoProgettoProlungaPromessaPronomePropostaProrogaProtesoProvaPrudentePrugnaPruritoPsichePubblicoPudicaPugilatoPugnoPulcePulitoPulsantePuntarePupazzoPupillaPuroQuadroQualcosaQuasiQuerelaQuotaRaccoltoRaddoppioRadicaleRadunatoRafficaRagazzoRagioneRagnoRamarroRamingoRamoRandagioRantolareRapatoRapinaRappresoRasaturaRaschiatoRasenteRassegnaRastrelloRataRavvedutoRealeRecepireRecintoReclutaReconditoRecuperoRedditoRedimereRegalatoRegistroRegolaRegressoRelazioneRemareRemotoRennaReplicaReprimereReputareResaResidenteResponsoRestauroReteRetinaRetoricaRettificaRevocatoRiassuntoRibadireRibelleRibrezzoRicaricaRiccoRicevereRiciclatoRicordoRicredutoRidicoloRidurreRifasareRiflessoRiformaRifugioRigareRigettatoRighelloRilassatoRilevatoRimanereRimbalzoRimedioRimorchioRinascitaRincaroRinforzoRinnovoRinomatoRinsavitoRintoccoRinunciaRinvenireRiparatoRipetutoRipienoRiportareRipresaRipulireRisataRischioRiservaRisibileRisoRispettoRistoroRisultatoRisvoltoRitardoRitegnoRitmicoRitrovoRiunioneRivaRiversoRivincitaRivoltoRizomaRobaRoboticoRobustoRocciaRocoRodaggioRodereRoditoreRogitoRollioRomanticoRompereRonzioRosolareRospoRotanteRotondoRotulaRovescioRubizzoRubricaRugaRullinoRumineRumorosoRuoloRupeRussareRusticoSabatoSabbiareSabotatoSagomaSalassoSaldaturaSalgemmaSalivareSalmoneSaloneSaltareSalutoSalvoSapereSapidoSaporitoSaracenoSarcasmoSartoSassosoSatelliteSatiraSatolloSaturnoSavanaSavioSaziatoSbadiglioSbalzoSbancatoSbarraSbattereSbavareSbendareSbirciareSbloccatoSbocciatoSbrinareSbruffoneSbuffareScabrosoScadenzaScalaScambiareScandaloScapolaScarsoScatenareScavatoSceltoScenicoScettroSchedaSchienaSciarpaScienzaScindereScippoSciroppoScivoloSclerareScodellaScolpitoScompartoSconfortoScoprireScortaScossoneScozzeseScribaScrollareScrutinioScuderiaScultoreScuolaScuroScusareSdebitareSdoganareSeccaturaSecondoSedanoSeggiolaSegnalatoSegregatoSeguitoSelciatoSelettivoSellaSelvaggioSemaforoSembrareSemeSeminatoSempreSensoSentireSepoltoSequenzaSerataSerbatoSerenoSerioSerpenteSerraglioServireSestinaSetolaSettimanaSfaceloSfaldareSfamatoSfarzosoSfaticatoSferaSfidaSfilatoSfingeSfocatoSfoderareSfogoSfoltireSforzatoSfrattoSfruttatoSfuggitoSfumareSfusoSgabelloSgarbatoSgonfiareSgorbioSgrassatoSguardoSibiloSiccomeSierraSiglaSignoreSilenzioSillabaSimboloSimpaticoSimulatoSinfoniaSingoloSinistroSinoSintesiSinusoideSiparioSismaSistoleSituatoSlittaSlogaturaSlovenoSmarritoSmemoratoSmentitoSmeraldoSmilzoSmontareSmottatoSmussatoSnellireSnervatoSnodoSobbalzoSobrioSoccorsoSocialeSodaleSoffittoSognoSoldatoSolenneSolidoSollazzoSoloSolubileSolventeSomaticoSommaSondaSonettoSonniferoSopireSoppesoSopraSorgereSorpassoSorrisoSorsoSorteggioSorvolatoSospiroSostaSottileSpadaSpallaSpargereSpatolaSpaventoSpazzolaSpecieSpedireSpegnereSpelaturaSperanzaSpessoreSpettraleSpezzatoSpiaSpigolosoSpillatoSpinosoSpiraleSplendidoSportivoSposoSprangaSprecareSpronatoSpruzzoSpuntinoSquilloSradicareSrotolatoStabileStaccoStaffaStagnareStampatoStantioStarnutoStaseraStatutoSteloSteppaSterzoStilettoStimaStirpeStivaleStizzosoStonatoStoricoStrappoStregatoStriduloStrozzareStruttoStuccareStufoStupendoSubentroSuccosoSudoreSuggeritoSugoSultanoSuonareSuperboSupportoSurgelatoSurrogatoSussurroSuturaSvagareSvedeseSveglioSvelareSvenutoSveziaSviluppoSvistaSvizzeraSvoltaSvuotareTabaccoTabulatoTacciareTaciturnoTaleTalismanoTamponeTanninoTaraTardivoTargatoTariffaTarpareTartarugaTastoTatticoTavernaTavolataTazzaTecaTecnicoTelefonoTemerarioTempoTemutoTendoneTeneroTensioneTentacoloTeoremaTermeTerrazzoTerzettoTesiTesseratoTestatoTetroTettoiaTifareTigellaTimbroTintoTipicoTipografoTiraggioTiroTitanioTitoloTitubanteTizioTizzoneToccareTollerareToltoTombolaTomoTonfoTonsillaTopazioTopologiaToppaTorbaTornareTorroneTortoraToscanoTossireTostaturaTotanoTraboccoTracheaTrafilaTragediaTralcioTramontoTransitoTrapanoTrarreTraslocoTrattatoTraveTrecciaTremolioTrespoloTributoTrichecoTrifoglioTrilloTrinceaTrioTristezzaTrituratoTrivellaTrombaTronoTroppoTrottolaTrovareTruccatoTubaturaTuffatoTulipanoTumultoTunisiaTurbareTurchinoTutaTutelaUbicatoUccelloUccisoreUdireUditivoUffaUfficioUgualeUlisseUltimatoUmanoUmileUmorismoUncinettoUngereUnghereseUnicornoUnificatoUnisonoUnitarioUnteUovoUpupaUraganoUrgenzaUrloUsanzaUsatoUscitoUsignoloUsuraioUtensileUtilizzoUtopiaVacanteVaccinatoVagabondoVagliatoValangaValgoValicoVallettaValorosoValutareValvolaVampataVangareVanitosoVanoVantaggioVanveraVaporeVaranoVarcatoVarianteVascaVedettaVedovaVedutoVegetaleVeicoloVelcroVelinaVellutoVeloceVenatoVendemmiaVentoVeraceVerbaleVergognaVerificaVeroVerrucaVerticaleVescicaVessilloVestaleVeteranoVetrinaVetustoViandanteVibranteVicendaVichingoVicinanzaVidimareVigiliaVignetoVigoreVileVillanoViminiVincitoreViolaViperaVirgolaVirologoVirulentoViscosoVisioneVispoVissutoVisuraVitaVitelloVittimaVivandaVividoViziareVoceVogaVolatileVolereVolpeVoragineVulcanoZampognaZannaZappatoZatteraZavorraZefiroZelanteZeloZenzeroZerbinoZibettoZincoZirconeZittoZollaZoticoZuccheroZufoloZuluZuppa";
var wordlist = null;
function loadWords(lang) {
    if (wordlist != null) {
        return;
    }
    wordlist = words.replace(/([A-Z])/g, ' $1').toLowerCase().substring(1).split(' ');
    if (wordlist_1.check(lang) !== '0x5c1362d88fd4cf614a96f3234941d29f7d37c08c5292fde03bf62c2db6ff7620') {
        wordlist = null;
        throw new Error('BIP39 Wordlist for it (Italian) FAILED');
    }
}
var LangIt = /** @class */ (function (_super) {
    __extends(LangIt, _super);
    function LangIt() {
        return _super.call(this, 'it') || this;
    }
    LangIt.prototype.getWord = function (index) {
        loadWords(this);
        return wordlist[index];
    };
    LangIt.prototype.getWordIndex = function (word) {
        loadWords(this);
        return wordlist.indexOf(word);
    };
    return LangIt;
}(wordlist_1.Wordlist));
var langIt = new LangIt();
exports.langIt = langIt;
wordlist_1.register(langIt);


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var wordlist_1 = __webpack_require__(21);
var utf8_1 = __webpack_require__(9);
var data = "}aE#4A=Yv&co#4N#6G=cJ&SM#66|/Z#4t&kn~46#4K~4q%b9=IR#7l,mB#7W_X2*dl}Uo~7s}Uf&Iw#9c&cw~6O&H6&wx&IG%v5=IQ~8a&Pv#47$PR&50%Ko&QM&3l#5f,D9#4L|/H&tQ;v0~6n]nN<di,AM=W5%QO&ka&ua,hM^tm=zV=JA=wR&+X]7P&NB#4J#5L|/b[dA}tJ<Do&6m&u2[U1&Kb.HM&mC=w0&MW<rY,Hq#6M}QG,13&wP}Jp]Ow%ue&Kg<HP<D9~4k~9T&I2_c6$9T#9/[C5~7O~4a=cs&O7=KK=An&l9$6U$8A&uD&QI|/Y&bg}Ux&F2#6b}E2&JN&kW&kp=U/&bb=Xl<Cj}k+~5J#6L&5z&9i}b4&Fo,ho(X0_g3~4O$Fz&QE<HN=Ww]6/%GF-Vw=tj&/D&PN#9g=YO}cL&Of&PI~5I&Ip=vU=IW#9G;0o-wU}ss&QR<BT&R9=tk$PY_dh&Pq-yh]7T,nj.Xu=EP&76=cI&Fs*Xg}z7$Gb&+I=DF,AF=cA}rL#7j=Dz&3y<Aa$52=PQ}b0(iY$Fa}oL&xV#6U=ec=WZ,xh%RY<dp#9N&Fl&44=WH*A7=sh&TB&8P=07;u+&PK}uh}J5#72)V/=xC,AB$k0&f6;1E|+5=1B,3v]6n&wR%b+&xx]7f=Ol}fl;+D^wG]7E;nB;uh^Ir&l5=JL,nS=cf=g5;u6|/Q$Gc=MH%Hg#5d%M6^86=U+$Gz,l/,ir^5y&Ba&/F-IY&FI&be%IZ#77&PW_Nu$kE(Yf&NX]7Z,Jy&FJ(Xo&Nz#/d=y7&MX<Ag}Z+;nE]Dt(iG#4D=13&Pj~4c%v8&Zo%OL&/X#4W<HR&ie~6J_1O(Y2=y5=Ad*cv_eB#6k&PX:BU#7A;uk&Ft&Fx_dD=U2;vB=U5=4F}+O&GN.HH:9s=b0%NV(jO&IH=JT}Z9=VZ<Af,Kx^4m&uJ%c6,6r;9m#+L}cf%Kh&F3~4H=vP}bu,Hz|++,1w]nv}k6;uu$jw*Kl*WX&uM[x7&Fr[m7$NO&QN]hu=JN}nR^8g#/h(ps|KC;vd}xz=V0}p6&FD$G1#7K<bG_4p~8g&cf;u4=tl}+k%5/}fz;uw<cA=u1}gU}VM=LJ=eX&+L&Pr#4U}p2:nC,2K]7H:jF&9x}uX#9O=MB<fz~8X~5m&4D&kN&u5%E/(h7(ZF&VG<de(qM|/e-Wt=3x(a+,/R]f/&ND$Ro&nU}0g=KA%kH&NK$Ke<dS}cB&IX~5g$TN]6m=Uv,Is&Py=Ef%Kz#+/%bi&+A<F4$OG&4C&FL#9V<Zk=2I_eE&6c]nw&kq$HG}y+&A8$P3}OH=XP]70%IS(AJ_gH%GZ&tY&AZ=vb~6y&/r=VI=Wv<Zi=fl=xf&eL}c8}OL=MJ=g8$F7=YT}9u=0+^xC}JH&nL^N0~4T]K2,Cy%OC#6s;vG(AC^xe^cG&MF}Br#9P;wD-7h$O/&xA}Fn^PC]6i]7G&8V$Qs;vl(TB~73~4l<mW&6V=2y&uY&+3)aP}XF;LP&kx$wU=t7;uy<FN&lz)7E=Oo*Y+;wI}9q}le;J6&Ri&4t&Qr#8B=cb&vG=J5|Ql(h5<Yy~4+}QD,Lx=wn%K/&RK=dO&Pw,Q9=co%4u;9u}g0@6a^4I%b0=zo|/c&tX=dQ=OS#+b=yz_AB&wB&Pm=W9$HP_gR=62=AO=ti=hI,oA&jr&dH=tm&b6$P2(x8=zi;nG~7F;05]0n[Ix&3m}rg=Xp=cd&uz]7t;97=cN;vV<jf&FF&F1=6Q&Ik*Kk&P4,2z=fQ]7D&3u,H0=d/}Uw<ZN<7R}Kv;0f$H7,MD]7n$F0#88~9Z%da=by;+T#/u=VF&fO&kr^kf<AB]sU,I5$Ng&Pz;0i&QD&vM=Yl:BM;nJ_xJ]U7&Kf&30,3f|Z9*dC)je_jA&Q4&Kp$NH(Yz#6S&Id%Ib=KX,AD=KV%dP}tW&Pk^+E_Ni=cq,3R}VZ(Si=b+}rv;0j}rZ]uA,/w(Sx&Jv$w9&4d&wE,NJ$Gy=J/]Ls#7k<ZQ<Y/&uj]Ov$PM;v3,2F&+u:up=On&3e,Jv;90=J+&Qm]6q}bK#+d~8Y(h2]hA;99&AS=I/}qB&dQ}yJ-VM}Vl&ui,iB&G3|Dc]7d=eQ%dX%JC_1L~4d^NP;vJ&/1)ZI#7N]9X[bQ&PL=0L(UZ,Lm&kc&IR}n7(iR<AQ<dg=33=vN}ft}au]7I,Ba=x9=dR~6R&Tq=Xi,3d$Nr&Bc}DI&ku&vf]Dn,/F&iD,Ll&Nw=0y&I7=Ls=/A&tU=Qe}Ua&uk&+F=g4=gh=Vj#+1&Qn}Uy*44#5F,Pc&Rz*Xn=oh=5W;0n_Nf(iE<Y7=vr=Zu]oz#5Z%mI=kN=Bv_Jp(T2;vt_Ml<FS&uI=L/&6P]64$M7}86<bo%QX(SI%IY&VK=Al&Ux;vv;ut*E/%uh<ZE|O3,M2(yc]yu=Wk&tp:Ex}hr,Cl&WE)+Z=8U}I2_4Q,hA_si=iw=OM=tM=yZ%Ia=U7;wT}b+;uo=Za}yS!5x}HD}fb#5O_dA;Nv%uB(yB;01(Sf}Fk;v7}Pt#8v<mZ#7L,/r&Pl~4w&f5=Ph$Fw_LF&8m,bL=yJ&BH}p/*Jn}tU~5Q;wB(h6]Df]8p^+B;E4&Wc=d+;Ea&bw$8C&FN,DM=Yf}mP~5w=fT#6V=mC=Fi=AV}jB&AN}lW}aH#/D)dZ;hl;vE}/7,CJ;31&w8,hj%u9_Js=jJ&4M~8k=TN&eC}nL&uc-wi&lX}dj=Mv=e2#6u=cr$uq$6G]8W}Jb:nm=Yg<b3(UA;vX&6n&xF=KT,jC,De&R8&oY=Zv&oB]7/=Z2&Oa}bf,hh(4h^tZ&72&Nx;D2&xL~5h~40)ZG)h+=OJ&RA]Bv$yB=Oq=df,AQ%Jn}OJ;11,3z&Tl&tj;v+^Hv,Dh(id=s+]7N&N3)9Q~8f,S4=uW=w4&uX,LX&3d]CJ&yp&8x<b2_do&lP=y/<cy_dG=Oi=7R(VH(lt_1T,Iq_AA;12^6T%k6#8K[B1{oO<AU[Bt;1b$9S&Ps<8T=St{bY,jB(Zp&63&Uv$9V,PM]6v&Af}zW[bW_oq}sm}nB&Kq&gC&ff_eq_2m&5F&TI}rf}Gf;Zr_z9;ER&jk}iz_sn<BN~+n&vo=Vi%97|ZR=Wc,WE&6t]6z%85(ly#84=KY)6m_5/=aX,N3}Tm&he&6K]tR_B2-I3;u/&hU&lH<AP=iB&IA=XL;/5&Nh=wv<BH#79=vS=zl<AA=0X_RG}Bw&9p$NW,AX&kP_Lp&/Z(Tc]Mu}hs#6I}5B&cI<bq&H9#6m=K9}vH(Y1(Y0#4B&w6,/9&gG<bE,/O=zb}I4_l8<B/;wL%Qo<HO[Mq=XX}0v&BP&F4(mG}0i}nm,EC=9u{I3,xG&/9=JY*DK&hR)BX=EI=cx=b/{6k}yX%A+&wa}Xb=la;wi^lL;0t}jo&Qb=xg=XB}iO<qo{bR=NV&8f=a0&Jy;0v=uK)HK;vN#6h&jB(h/%ud&NI%wY.X7=Pt}Cu-uL&Gs_hl%mH,tm]78=Lb^Q0#7Y=1u<Bt&+Q=Co_RH,w3;1e}ux<aU;ui}U3&Q5%bt]63&UQ|0l&uL}O7&3o,AV&dm|Nj(Xt*5+(Uu&Hh(p7(UF=VR=Bp^Jl&Hd[ix)9/=Iq]C8<67]66}mB%6f}bb}JI]8T$HA}db=YM&pa=2J}tS&Y0=PS&y4=cX$6E,hX,XP&nR;04,FQ&l0&Vm_Dv#5Y~8Z=Bi%MA]6x=JO:+p,Az&9q,Hj~6/}SD=K1:EJ}nA;Qo#/E]9R,Ie&6X%W3]61&v4=xX_MC=0q;06(Xq=fs}IG}Dv=0l}o7$iZ;9v&LH&DP-7a&OY,SZ,Kz,Cv&dh=fx|Nh,F/~7q=XF&w+;9n&Gw;0h}Z7<7O&JK(S7&LS<AD<ac=wo<Dt&zw%4B=4v#8P;9o~6p*vV=Tm,Or&I6=1q}nY=P0=gq&Bl&Uu,Ch%yb}UY=zh}dh}rl(T4_xk(YA#8R*xH,IN}Jn]7V}C4&Ty}j3]7p=cL=3h&wW%Qv<Z3=f0&RI&+S(ic_zq}oN&/Y=z1;Td=LW=0e=OI(Vc,+b^ju(UL;0r:Za%8v=Rp=zw&58&73&wK}qX]6y&8E)a2}WR=wP^ur&nQ<cH}Re=Aq&wk}Q0&+q=PP,Gc|/d^k5,Fw]8Y}Pg]p3=ju=ed}r5_yf&Cs]7z$/G<Cm&Jp&54_1G_gP_Ll}JZ;0u]k8_7k(Sg]65{9i=LN&Sx&WK,iW&fD&Lk{9a}Em-9c#8N&io=sy]8d&nT&IK(lx#7/$lW(Td<s8~49,3o<7Y=MW(T+_Jr&Wd,iL}Ct=xh&5V;v4&8n%Kx=iF&l2_0B{B+,If(J0,Lv;u8=Kx-vB=HC&vS=Z6&fU&vE^xK;3D=4h=MR#45:Jw;0d}iw=LU}I5=I0]gB*im,K9}GU,1k_4U&Tt=Vs(iX&lU(TF#7y,ZO}oA&m5#5P}PN}Uz=hM<B1&FB<aG,e6~7T<tP(UQ_ZT=wu&F8)aQ]iN,1r_Lo&/g:CD}84{J1_Ki&Na&3n$jz&FE=dc;uv;va}in}ll=fv(h1&3h}fp=Cy}BM(+E~8m}lo%v7=hC(T6$cj=BQ=Bw(DR,2j=Ks,NS|F+;00=fU=70}Mb(YU;+G&m7&hr=Sk%Co]t+(X5_Jw}0r}gC(AS-IP&QK<Z2#8Q$WC]WX}T2&pG_Ka,HC=R4&/N;Z+;ch(C7,D4$3p_Mk&B2$8D=n9%Ky#5z(CT&QJ#7B]DC]gW}nf~5M;Iw#80}Tc_1F#4Z-aC}Hl=ph=fz,/3=aW}JM}nn;DG;vm}wn,4P}T3;wx&RG$u+}zK=0b;+J_Ek{re<aZ=AS}yY#5D]7q,Cp}xN=VP*2C}GZ}aG~+m_Cs=OY#6r]6g<GS}LC(UB=3A=Bo}Jy<c4}Is;1P<AG}Op<Z1}ld}nS=1Z,yM&95&98=CJ(4t:2L$Hk=Zo}Vc;+I}np&N1}9y=iv}CO*7p=jL)px]tb^zh&GS&Vl%v/;vR=14=zJ&49|/f]hF}WG;03=8P}o/&Gg&rp;DB,Kv}Ji&Pb;aA^ll(4j%yt}+K$Ht#4y&hY]7Y<F1,eN}bG(Uh%6Z]t5%G7;+F_RE;it}tL=LS&Da=Xx(S+(4f=8G=yI}cJ}WP=37=jS}pX}hd)fp<A8=Jt~+o$HJ=M6}iX=g9}CS=dv=Cj(mP%Kd,xq|+9&LD(4/=Xm&QP=Lc}LX&fL;+K=Op(lu=Qs.qC:+e&L+=Jj#8w;SL]7S(b+#4I=c1&nG_Lf&uH;+R)ZV<bV%B/,TE&0H&Jq&Ah%OF&Ss(p2,Wv&I3=Wl}Vq;1L&lJ#9b_1H=8r=b8=JH(SZ=hD=J2#7U,/U#/X~6P,FU<eL=jx,mG=hG=CE&PU=Se(qX&LY=X6=y4&tk&QQ&tf=4g&xI}W+&mZ=Dc#7w}Lg;DA;wQ_Kb(cJ=hR%yX&Yb,hw{bX_4X;EP;1W_2M}Uc=b5(YF,CM&Tp^OJ{DD]6s=vF=Yo~8q}XH}Fu%P5(SJ=Qt;MO]s8<F3&B3&8T(Ul-BS*dw&dR<87}/8]62$PZ]Lx<Au}9Q]7c=ja=KR,Go,Us&v6(qk}pG&G2=ev^GM%w4&H4]7F&dv]J6}Ew:9w=sj-ZL}Ym$+h(Ut(Um~4n=Xs(U7%eE=Qc_JR<CA#6t<Fv|/I,IS,EG<F2(Xy$/n<Fa(h9}+9_2o&N4#7X<Zq|+f_Dp=dt&na,Ca=NJ)jY=8C=YG=s6&Q+<DO}D3=xB&R1(lw;Qn<bF(Cu|/B}HV=SS&n7,10&u0]Dm%A6^4Q=WR(TD=Xo<GH,Rj(l8)bP&n/=LM&CF,F5&ml=PJ;0k=LG=tq,Rh,D6@4i=1p&+9=YC%er_Mh;nI;0q=Fw]80=xq=FM$Gv;v6&nc;wK%H2&Kj;vs,AA=YP,66}bI(qR~5U=6q~4b$Ni=K5.X3$So&Iu(p+]8G=Cf=RY(TS_O3(iH&57=fE=Dg_Do#9z#7H;FK{qd_2k%JR}en&gh_z8;Rx}9p<cN_Ne,DO;LN_7o~/p=NF=5Y}gN<ce<C1,QE]Wv=3u<BC}GK]yq}DY&u/_hj=II(pz&rC,jV&+Z}ut=NQ;Cg-SR_ZS,+o=u/;Oy_RK_QF(Fx&xP}Wr&TA,Uh&g1=yr{ax[VF$Pg(YB;Ox=Vy;+W(Sp}XV%dd&33(l/]l4#4Y}OE=6c=bw(A7&9t%wd&N/&mo,JH&Qe)fm=Ao}fu=tH";
var deltaData = "FAZDC6BALcLZCA+GBARCW8wNCcDDZ8LVFBOqqDUiou+M42TFAyERXFb7EjhP+vmBFpFrUpfDV2F7eB+eCltCHJFWLFCED+pWTojEIHFXc3aFn4F68zqjEuKidS1QBVPDEhE7NA4mhMF7oThD49ot3FgtzHFCK0acW1x8DH1EmLoIlrWFBLE+y5+NA3Cx65wJHTaEZVaK1mWAmPGxgYCdxwOjTDIt/faOEhTl1vqNsKtJCOhJWuio2g07KLZEQsFBUpNtwEByBgxFslFheFbiEPvi61msDvApxCzB6rBCzox7joYA5UdDc+Cb4FSgIabpXFAj3bjkmFAxCZE+mD/SFf/0ELecYCt3nLoxC6WEZf2tKDB4oZvrEmqFkKk7BwILA7gtYBpsTq//D4jD0F0wEB9pyQ1BD5Ba0oYHDI+sbDFhvrHXdDHfgFEIJLi5r8qercNFBgFLC4bo5ERJtamWBDFy73KCEb6M8VpmEt330ygCTK58EIIFkYgF84gtGA9Uyh3m68iVrFbWFbcbqiCYHZ9J1jeRPbL8yswhMiDbhEhdNoSwFbZrLT740ABEqgCkO8J1BLd1VhKKR4sD1yUo0z+FF59Mvg71CFbyEhbHSFBKEIKyoQNgQppq9T0KAqePu0ZFGrXOHdKJqkoTFhYvpDNyuuznrN84thJbsCoO6Cu6Xlvntvy0QYuAExQEYtTUBf3CoCqwgGFZ4u1HJFzDVwEy3cjcpV4QvsPaBC3rCGyCF23o4K3pp2gberGgFEJEHo4nHICtyKH2ZqyxhN05KBBJIQlKh/Oujv/DH32VrlqFdIFC7Fz9Ct4kaqFME0UETLprnN9kfy+kFmtQBB0+5CFu0N9Ij8l/VvJDh2oq3hT6EzjTHKFN7ZjZwoTsAZ4Exsko6Fpa6WC+sduz8jyrLpegTv2h1EBeYpLpm2czQW0KoCcS0bCVXCmuWJDBjN1nQNLdF58SFJ0h7i3pC3oEOKy/FjBklL70XvBEEIWp2yZ04xObzAWDDJG7f+DbqBEA7LyiR95j7MDVdDViz2RE5vWlBMv5e4+VfhP3aXNPhvLSynb9O2x4uFBV+3jqu6d5pCG28/sETByvmu/+IJ0L3wb4rj9DNOLBF6XPIODr4L19U9RRofAG6Nxydi8Bki8BhGJbBAJKzbJxkZSlF9Q2Cu8oKqggB9hBArwLLqEBWEtFowy8XK8bEyw9snT+BeyFk1ZCSrdmgfEwFePTgCjELBEnIbjaDDPJm36rG9pztcEzT8dGk23SBhXBB1H4z+OWze0ooFzz8pDBYFvp9j9tvFByf9y4EFdVnz026CGR5qMr7fxMHN8UUdlyJAzlTBDRC28k+L4FB8078ljyD91tUj1ocnTs8vdEf7znbzm+GIjEZnoZE5rnLL700Xc7yHfz05nWxy03vBB9YGHYOWxgMQGBCR24CVYNE1hpfKxN0zKnfJDmmMgMmBWqNbjfSyFCBWSCGCgR8yFXiHyEj+VtD1FB3FpC1zI0kFbzifiKTLm9yq5zFmur+q8FHqjoOBWsBPiDbnCC2ErunV6cJ6TygXFYHYp7MKN9RUlSIS8/xBAGYLzeqUnBF4QbsTuUkUqGs6CaiDWKWjQK9EJkjpkTmNCPYXL";
// @TODO: Load lazily
var wordlist = {
    zh_cn: null,
    zh_tw: null
};
var Checks = {
    zh_cn: '0x17bcc4d8547e5a7135e365d1ab443aaae95e76d8230c2782c67305d4f21497a1',
    zh_tw: '0x51e720e90c7b87bec1d70eb6e74a21a449bd3ec9c020b01d3a40ed991b60ce5d'
};
var codes = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var style = "~!@#$%^&*_-=[]{}|;:,.()<>?";
function loadWords(lang) {
    if (wordlist[lang.locale] !== null) {
        return;
    }
    wordlist[lang.locale] = [];
    var deltaOffset = 0;
    for (var i = 0; i < 2048; i++) {
        var s = style.indexOf(data[i * 3]);
        var bytes = [
            228 + (s >> 2),
            128 + codes.indexOf(data[i * 3 + 1]),
            128 + codes.indexOf(data[i * 3 + 2]),
        ];
        if (lang.locale === 'zh_tw') {
            var common = s % 4;
            for (var i_1 = common; i_1 < 3; i_1++) {
                bytes[i_1] = codes.indexOf(deltaData[deltaOffset++]) + ((i_1 == 0) ? 228 : 128);
            }
        }
        wordlist[lang.locale].push(utf8_1.toUtf8String(bytes));
    }
    if (wordlist_1.check(lang) !== Checks[lang.locale]) {
        wordlist[lang.locale] = null;
        throw new Error('BIP39 Wordlist for ' + lang.locale + ' (Chinese) FAILED');
    }
}
var LangZh = /** @class */ (function (_super) {
    __extends(LangZh, _super);
    function LangZh(country) {
        return _super.call(this, 'zh_' + country) || this;
    }
    LangZh.prototype.getWord = function (index) {
        loadWords(this);
        return wordlist[this.locale][index];
    };
    LangZh.prototype.getWordIndex = function (word) {
        loadWords(this);
        return wordlist[this.locale].indexOf(word);
    };
    LangZh.prototype.split = function (mnemonic) {
        mnemonic = mnemonic.replace(/(?:\u3000| )+/g, '');
        return mnemonic.split('');
    };
    return LangZh;
}(wordlist_1.Wordlist));
var langZhCn = new LangZh('cn');
exports.langZhCn = langZhCn;
wordlist_1.register(langZhCn);
wordlist_1.register(langZhCn, 'zh');
var langZhTw = new LangZh('tw');
exports.langZhTw = langZhTw;
wordlist_1.register(langZhTw);


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* no shims for node */
Object.defineProperty(exports, "__esModule", { value: true });
exports.platform = 'node';


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() {
  return this || (typeof self === "object" && self);
})() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = __webpack_require__(163);

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}


/***/ }),
/* 163 */
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() {
    return this || (typeof self === "object" && self);
  })() || Function("return this")()
);


/***/ }),
/* 164 */
/***/ (function(module, exports) {

module.exports = function (scope) {
  return (func, ...args) => {
    return (function (func, ...args) {
      return new Promise((resolve, reject) => {
        func(...args, (err, res) => {
          if (err) {
            reject(err)
          } else {
            resolve(res)
          }
        })
      })
    })(func.bind(scope), ...args)
  }
}


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithoutHoles = __webpack_require__(166);

var iterableToArray = __webpack_require__(167);

var nonIterableSpread = __webpack_require__(168);

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
}

module.exports = _toConsumableArray;

/***/ }),
/* 166 */
/***/ (function(module, exports) {

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

module.exports = _arrayWithoutHoles;

/***/ }),
/* 167 */
/***/ (function(module, exports) {

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

module.exports = _iterableToArray;

/***/ }),
/* 168 */
/***/ (function(module, exports) {

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

module.exports = _nonIterableSpread;

/***/ }),
/* 169 */
/***/ (function(module, exports) {

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

module.exports = _arrayWithHoles;

/***/ }),
/* 170 */
/***/ (function(module, exports) {

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

module.exports = _iterableToArrayLimit;

/***/ }),
/* 171 */
/***/ (function(module, exports) {

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

module.exports = _nonIterableRest;

/***/ }),
/* 172 */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BigNumber", function() { return BigNumber; });
/*
 *      bignumber.js v7.2.1
 *      A JavaScript library for arbitrary-precision arithmetic.
 *      https://github.com/MikeMcl/bignumber.js
 *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>
 *      MIT Licensed.
 *
 *      BigNumber.prototype methods     |  BigNumber methods
 *                                      |
 *      absoluteValue            abs    |  clone
 *      comparedTo                      |  config               set
 *      decimalPlaces            dp     |      DECIMAL_PLACES
 *      dividedBy                div    |      ROUNDING_MODE
 *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
 *      exponentiatedBy          pow    |      RANGE
 *      integerValue                    |      CRYPTO
 *      isEqualTo                eq     |      MODULO_MODE
 *      isFinite                        |      POW_PRECISION
 *      isGreaterThan            gt     |      FORMAT
 *      isGreaterThanOrEqualTo   gte    |      ALPHABET
 *      isInteger                       |  isBigNumber
 *      isLessThan               lt     |  maximum              max
 *      isLessThanOrEqualTo      lte    |  minimum              min
 *      isNaN                           |  random
 *      isNegative                      |
 *      isPositive                      |
 *      isZero                          |
 *      minus                           |
 *      modulo                   mod    |
 *      multipliedBy             times  |
 *      negated                         |
 *      plus                            |
 *      precision                sd     |
 *      shiftedBy                       |
 *      squareRoot               sqrt   |
 *      toExponential                   |
 *      toFixed                         |
 *      toFormat                        |
 *      toFraction                      |
 *      toJSON                          |
 *      toNumber                        |
 *      toPrecision                     |
 *      toString                        |
 *      valueOf                         |
 *
 */


var isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,

  mathceil = Math.ceil,
  mathfloor = Math.floor,

  bignumberError = '[BigNumber Error] ',
  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

  BASE = 1e14,
  LOG_BASE = 14,
  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
  SQRT_BASE = 1e7,

  // EDITABLE
  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
  // the arguments to toExponential, toFixed, toFormat, and toPrecision.
  MAX = 1E9;                                   // 0 to MAX_INT32


/*
 * Create and return a BigNumber constructor.
 */
function clone(configObject) {
  var div, convertBase, parseNumeric,
    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },
    ONE = new BigNumber(1),


    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


    // The default values below must be integers within the inclusive ranges stated.
    // The values can also be changed at run-time using BigNumber.set.

    // The maximum number of decimal places for operations involving division.
    DECIMAL_PLACES = 20,                     // 0 to MAX

    // The rounding mode used when rounding to the above decimal places, and when using
    // toExponential, toFixed, toFormat and toPrecision, and round (default value).
    // UP         0 Away from zero.
    // DOWN       1 Towards zero.
    // CEIL       2 Towards +Infinity.
    // FLOOR      3 Towards -Infinity.
    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
    ROUNDING_MODE = 4,                       // 0 to 8

    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

    // The exponent value at and beneath which toString returns exponential notation.
    // Number type: -7
    TO_EXP_NEG = -7,                         // 0 to -MAX

    // The exponent value at and above which toString returns exponential notation.
    // Number type: 21
    TO_EXP_POS = 21,                         // 0 to MAX

    // RANGE : [MIN_EXP, MAX_EXP]

    // The minimum exponent value, beneath which underflow to zero occurs.
    // Number type: -324  (5e-324)
    MIN_EXP = -1e7,                          // -1 to -MAX

    // The maximum exponent value, above which overflow to Infinity occurs.
    // Number type:  308  (1.7976931348623157e+308)
    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
    MAX_EXP = 1e7,                           // 1 to MAX

    // Whether to use cryptographically-secure random number generation, if available.
    CRYPTO = false,                          // true or false

    // The modulo mode used when calculating the modulus: a mod n.
    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
    // The remainder (r) is calculated as: r = a - n * q.
    //
    // UP        0 The remainder is positive if the dividend is negative, else is negative.
    // DOWN      1 The remainder has the same sign as the dividend.
    //             This modulo mode is commonly known as 'truncated division' and is
    //             equivalent to (a % n) in JavaScript.
    // FLOOR     3 The remainder has the same sign as the divisor (Python %).
    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
    //             The remainder is always positive.
    //
    // The truncated division, floored division, Euclidian division and IEEE 754 remainder
    // modes are commonly used for the modulus operation.
    // Although the other rounding modes can also be used, they may not give useful results.
    MODULO_MODE = 1,                         // 0 to 9

    // The maximum number of significant digits of the result of the exponentiatedBy operation.
    // If POW_PRECISION is 0, there will be unlimited significant digits.
    POW_PRECISION = 0,                    // 0 to MAX

    // The format specification used by the BigNumber.prototype.toFormat method.
    FORMAT = {
      decimalSeparator: '.',
      groupSeparator: ',',
      groupSize: 3,
      secondaryGroupSize: 0,
      fractionGroupSeparator: '\xA0',      // non-breaking space
      fractionGroupSize: 0
    },

    // The alphabet used for base conversion.
    // It must be at least 2 characters long, with no '.' or repeated character.
    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';


  //------------------------------------------------------------------------------------------


  // CONSTRUCTOR


  /*
   * The BigNumber constructor and exported function.
   * Create and return a new instance of a BigNumber object.
   *
   * n {number|string|BigNumber} A numeric value.
   * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.
   */
  function BigNumber(n, b) {
    var alphabet, c, caseChanged, e, i, isNum, len, str,
      x = this;

    // Enable constructor usage without new.
    if (!(x instanceof BigNumber)) {

      // Don't throw on constructor call without new (#81).
      // '[BigNumber Error] Constructor call without new: {n}'
      //throw Error(bignumberError + ' Constructor call without new: ' + n);
      return new BigNumber(n, b);
    }

    if (b == null) {

      // Duplicate.
      if (n instanceof BigNumber) {
        x.s = n.s;
        x.e = n.e;
        x.c = (n = n.c) ? n.slice() : n;
        return;
      }

      isNum = typeof n == 'number';

      if (isNum && n * 0 == 0) {

        // Use `1 / n` to handle minus zero also.
        x.s = 1 / n < 0 ? (n = -n, -1) : 1;

        // Faster path for integers.
        if (n === ~~n) {
          for (e = 0, i = n; i >= 10; i /= 10, e++);
          x.e = e;
          x.c = [n];
          return;
        }

        str = n + '';
      } else {
        if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, isNum);
        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
      }

      // Decimal point?
        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

        // Exponential form?
        if ((i = str.search(/e/i)) > 0) {

          // Determine exponent.
          if (e < 0) e = i;
          e += +str.slice(i + 1);
          str = str.substring(0, i);
        } else if (e < 0) {

          // Integer.
          e = str.length;
        }

    } else {

      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
      intCheck(b, 2, ALPHABET.length, 'Base');
      str = n + '';

      // Allow exponential notation to be used with base 10 argument, while
      // also rounding to DECIMAL_PLACES as with other bases.
      if (b == 10) {
        x = new BigNumber(n instanceof BigNumber ? n : str);
        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
      }

      isNum = typeof n == 'number';

      if (isNum) {

        // Avoid potential interpretation of Infinity and NaN as base 44+ values.
        if (n * 0 != 0) return parseNumeric(x, str, isNum, b);

        x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;

        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
        if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
          throw Error
           (tooManyDigits + n);
        }

        // Prevent later check for length on converted number.
        isNum = false;
      } else {
        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
      }

      alphabet = ALPHABET.slice(0, b);
      e = i = 0;

      // Check that str is a valid base b number.
      // Don't use RegExp so alphabet can contain special characters.
      for (len = str.length; i < len; i++) {
        if (alphabet.indexOf(c = str.charAt(i)) < 0) {
          if (c == '.') {

            // If '.' is not the first character and it has not be found before.
            if (i > e) {
              e = len;
              continue;
            }
          } else if (!caseChanged) {

            // Allow e.g. hexadecimal 'FF' as well as 'ff'.
            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||
                str == str.toLowerCase() && (str = str.toUpperCase())) {
              caseChanged = true;
              i = -1;
              e = 0;
              continue;
            }
          }

          return parseNumeric(x, n + '', isNum, b);
        }
      }

      str = convertBase(str, b, 10, x.s);

      // Decimal point?
      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
      else e = str.length;
    }

    // Determine leading zeros.
    for (i = 0; str.charCodeAt(i) === 48; i++);

    // Determine trailing zeros.
    for (len = str.length; str.charCodeAt(--len) === 48;);

    str = str.slice(i, ++len);

    if (str) {
      len -= i;

      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
      if (isNum && BigNumber.DEBUG &&
        len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {
          throw Error
           (tooManyDigits + (x.s * n));
      }

      e = e - i - 1;

       // Overflow?
      if (e > MAX_EXP) {

        // Infinity.
        x.c = x.e = null;

      // Underflow?
      } else if (e < MIN_EXP) {

        // Zero.
        x.c = [x.e = 0];
      } else {
        x.e = e;
        x.c = [];

        // Transform base

        // e is the base 10 exponent.
        // i is where to slice str to get the first element of the coefficient array.
        i = (e + 1) % LOG_BASE;
        if (e < 0) i += LOG_BASE;

        if (i < len) {
          if (i) x.c.push(+str.slice(0, i));

          for (len -= LOG_BASE; i < len;) {
            x.c.push(+str.slice(i, i += LOG_BASE));
          }

          str = str.slice(i);
          i = LOG_BASE - str.length;
        } else {
          i -= len;
        }

        for (; i--; str += '0');
        x.c.push(+str);
      }
    } else {

      // Zero.
      x.c = [x.e = 0];
    }
  }


  // CONSTRUCTOR PROPERTIES


  BigNumber.clone = clone;

  BigNumber.ROUND_UP = 0;
  BigNumber.ROUND_DOWN = 1;
  BigNumber.ROUND_CEIL = 2;
  BigNumber.ROUND_FLOOR = 3;
  BigNumber.ROUND_HALF_UP = 4;
  BigNumber.ROUND_HALF_DOWN = 5;
  BigNumber.ROUND_HALF_EVEN = 6;
  BigNumber.ROUND_HALF_CEIL = 7;
  BigNumber.ROUND_HALF_FLOOR = 8;
  BigNumber.EUCLID = 9;


  /*
   * Configure infrequently-changing library-wide settings.
   *
   * Accept an object with the following optional properties (if the value of a property is
   * a number, it must be an integer within the inclusive range stated):
   *
   *   DECIMAL_PLACES   {number}           0 to MAX
   *   ROUNDING_MODE    {number}           0 to 8
   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
   *   CRYPTO           {boolean}          true or false
   *   MODULO_MODE      {number}           0 to 9
   *   POW_PRECISION       {number}           0 to MAX
   *   ALPHABET         {string}           A string of two or more unique characters which does
   *                                     not contain '.'.
   *   FORMAT           {object}           An object with some of the following properties:
   *      decimalSeparator       {string}
   *      groupSeparator         {string}
   *      groupSize              {number}
   *      secondaryGroupSize     {number}
   *      fractionGroupSeparator {string}
   *      fractionGroupSize      {number}
   *
   * (The values assigned to the above FORMAT object properties are not checked for validity.)
   *
   * E.g.
   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
   *
   * Ignore properties/parameters set to null or undefined, except for ALPHABET.
   *
   * Return an object with the properties current values.
   */
  BigNumber.config = BigNumber.set = function (obj) {
    var p, v;

    if (obj != null) {

      if (typeof obj == 'object') {

        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
          v = obj[p];
          intCheck(v, 0, MAX, p);
          DECIMAL_PLACES = v;
        }

        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
          v = obj[p];
          intCheck(v, 0, 8, p);
          ROUNDING_MODE = v;
        }

        // EXPONENTIAL_AT {number|number[]}
        // Integer, -MAX to MAX inclusive or
        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
          v = obj[p];
          if (isArray(v)) {
            intCheck(v[0], -MAX, 0, p);
            intCheck(v[1], 0, MAX, p);
            TO_EXP_NEG = v[0];
            TO_EXP_POS = v[1];
          } else {
            intCheck(v, -MAX, MAX, p);
            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
          }
        }

        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
        if (obj.hasOwnProperty(p = 'RANGE')) {
          v = obj[p];
          if (isArray(v)) {
            intCheck(v[0], -MAX, -1, p);
            intCheck(v[1], 1, MAX, p);
            MIN_EXP = v[0];
            MAX_EXP = v[1];
          } else {
            intCheck(v, -MAX, MAX, p);
            if (v) {
              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
            } else {
              throw Error
               (bignumberError + p + ' cannot be zero: ' + v);
            }
          }
        }

        // CRYPTO {boolean} true or false.
        // '[BigNumber Error] CRYPTO not true or false: {v}'
        // '[BigNumber Error] crypto unavailable'
        if (obj.hasOwnProperty(p = 'CRYPTO')) {
          v = obj[p];
          if (v === !!v) {
            if (v) {
              if (typeof crypto != 'undefined' && crypto &&
               (crypto.getRandomValues || crypto.randomBytes)) {
                CRYPTO = v;
              } else {
                CRYPTO = !v;
                throw Error
                 (bignumberError + 'crypto unavailable');
              }
            } else {
              CRYPTO = v;
            }
          } else {
            throw Error
             (bignumberError + p + ' not true or false: ' + v);
          }
        }

        // MODULO_MODE {number} Integer, 0 to 9 inclusive.
        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
          v = obj[p];
          intCheck(v, 0, 9, p);
          MODULO_MODE = v;
        }

        // POW_PRECISION {number} Integer, 0 to MAX inclusive.
        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
          v = obj[p];
          intCheck(v, 0, MAX, p);
          POW_PRECISION = v;
        }

        // FORMAT {object}
        // '[BigNumber Error] FORMAT not an object: {v}'
        if (obj.hasOwnProperty(p = 'FORMAT')) {
          v = obj[p];
          if (typeof v == 'object') FORMAT = v;
          else throw Error
           (bignumberError + p + ' not an object: ' + v);
        }

        // ALPHABET {string}
        // '[BigNumber Error] ALPHABET invalid: {v}'
        if (obj.hasOwnProperty(p = 'ALPHABET')) {
          v = obj[p];

          // Disallow if only one character, or contains '.' or a repeated character.
          if (typeof v == 'string' && !/^.$|\.|(.).*\1/.test(v)) {
            ALPHABET = v;
          } else {
            throw Error
             (bignumberError + p + ' invalid: ' + v);
          }
        }

      } else {

        // '[BigNumber Error] Object expected: {v}'
        throw Error
         (bignumberError + 'Object expected: ' + obj);
      }
    }

    return {
      DECIMAL_PLACES: DECIMAL_PLACES,
      ROUNDING_MODE: ROUNDING_MODE,
      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
      RANGE: [MIN_EXP, MAX_EXP],
      CRYPTO: CRYPTO,
      MODULO_MODE: MODULO_MODE,
      POW_PRECISION: POW_PRECISION,
      FORMAT: FORMAT,
      ALPHABET: ALPHABET
    };
  };


  /*
   * Return true if v is a BigNumber instance, otherwise return false.
   *
   * v {any}
   */
  BigNumber.isBigNumber = function (v) {
    return v instanceof BigNumber || v && v._isBigNumber === true || false;
  };


  /*
   * Return a new BigNumber whose value is the maximum of the arguments.
   *
   * arguments {number|string|BigNumber}
   */
  BigNumber.maximum = BigNumber.max = function () {
    return maxOrMin(arguments, P.lt);
  };


  /*
   * Return a new BigNumber whose value is the minimum of the arguments.
   *
   * arguments {number|string|BigNumber}
   */
  BigNumber.minimum = BigNumber.min = function () {
    return maxOrMin(arguments, P.gt);
  };


  /*
   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
   * zeros are produced).
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
   * '[BigNumber Error] crypto unavailable'
   */
  BigNumber.random = (function () {
    var pow2_53 = 0x20000000000000;

    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
    // Check if Math.random() produces more than 32 bits of randomness.
    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
     ? function () { return mathfloor(Math.random() * pow2_53); }
     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
       (Math.random() * 0x800000 | 0); };

    return function (dp) {
      var a, b, e, k, v,
        i = 0,
        c = [],
        rand = new BigNumber(ONE);

      if (dp == null) dp = DECIMAL_PLACES;
      else intCheck(dp, 0, MAX);

      k = mathceil(dp / LOG_BASE);

      if (CRYPTO) {

        // Browsers supporting crypto.getRandomValues.
        if (crypto.getRandomValues) {

          a = crypto.getRandomValues(new Uint32Array(k *= 2));

          for (; i < k;) {

            // 53 bits:
            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
            // 11111 11111111 11111111 11111111 11100000 00000000 00000000
            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
            //                                     11111 11111111 11111111
            // 0x20000 is 2^21.
            v = a[i] * 0x20000 + (a[i + 1] >>> 11);

            // Rejection sampling:
            // 0 <= v < 9007199254740992
            // Probability that v >= 9e15, is
            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
            if (v >= 9e15) {
              b = crypto.getRandomValues(new Uint32Array(2));
              a[i] = b[0];
              a[i + 1] = b[1];
            } else {

              // 0 <= v <= 8999999999999999
              // 0 <= (v % 1e14) <= 99999999999999
              c.push(v % 1e14);
              i += 2;
            }
          }
          i = k / 2;

        // Node.js supporting crypto.randomBytes.
        } else if (crypto.randomBytes) {

          // buffer
          a = crypto.randomBytes(k *= 7);

          for (; i < k;) {

            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
            // 0x100000000 is 2^32, 0x1000000 is 2^24
            // 11111 11111111 11111111 11111111 11111111 11111111 11111111
            // 0 <= v < 9007199254740992
            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

            if (v >= 9e15) {
              crypto.randomBytes(7).copy(a, i);
            } else {

              // 0 <= (v % 1e14) <= 99999999999999
              c.push(v % 1e14);
              i += 7;
            }
          }
          i = k / 7;
        } else {
          CRYPTO = false;
          throw Error
           (bignumberError + 'crypto unavailable');
        }
      }

      // Use Math.random.
      if (!CRYPTO) {

        for (; i < k;) {
          v = random53bitInt();
          if (v < 9e15) c[i++] = v % 1e14;
        }
      }

      k = c[--i];
      dp %= LOG_BASE;

      // Convert trailing digits to zeros according to dp.
      if (k && dp) {
        v = POWS_TEN[LOG_BASE - dp];
        c[i] = mathfloor(k / v) * v;
      }

      // Remove trailing elements which are zero.
      for (; c[i] === 0; c.pop(), i--);

      // Zero?
      if (i < 0) {
        c = [e = 0];
      } else {

        // Remove leading elements which are zero and adjust exponent accordingly.
        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

        // Count the digits of the first element of c to determine leading zeros, and...
        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

        // adjust the exponent accordingly.
        if (i < LOG_BASE) e -= LOG_BASE - i;
      }

      rand.e = e;
      rand.c = c;
      return rand;
    };
  })();


  // PRIVATE FUNCTIONS


  // Called by BigNumber and BigNumber.prototype.toString.
  convertBase = (function () {
    var decimal = '0123456789';

    /*
     * Convert string of baseIn to an array of numbers of baseOut.
     * Eg. toBaseOut('255', 10, 16) returns [15, 15].
     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
     */
    function toBaseOut(str, baseIn, baseOut, alphabet) {
      var j,
        arr = [0],
        arrL,
        i = 0,
        len = str.length;

      for (; i < len;) {
        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

        arr[0] += alphabet.indexOf(str.charAt(i++));

        for (j = 0; j < arr.length; j++) {

          if (arr[j] > baseOut - 1) {
            if (arr[j + 1] == null) arr[j + 1] = 0;
            arr[j + 1] += arr[j] / baseOut | 0;
            arr[j] %= baseOut;
          }
        }
      }

      return arr.reverse();
    }

    // Convert a numeric string of baseIn to a numeric string of baseOut.
    // If the caller is toString, we are converting from base 10 to baseOut.
    // If the caller is BigNumber, we are converting from baseIn to base 10.
    return function (str, baseIn, baseOut, sign, callerIsToString) {
      var alphabet, d, e, k, r, x, xc, y,
        i = str.indexOf('.'),
        dp = DECIMAL_PLACES,
        rm = ROUNDING_MODE;

      // Non-integer.
      if (i >= 0) {
        k = POW_PRECISION;

        // Unlimited precision.
        POW_PRECISION = 0;
        str = str.replace('.', '');
        y = new BigNumber(baseIn);
        x = y.pow(str.length - i);
        POW_PRECISION = k;

        // Convert str as if an integer, then restore the fraction part by dividing the
        // result by its base raised to a power.

        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),
         10, baseOut, decimal);
        y.e = y.c.length;
      }

      // Convert the number as integer.

      xc = toBaseOut(str, baseIn, baseOut, callerIsToString
       ? (alphabet = ALPHABET, decimal)
       : (alphabet = decimal, ALPHABET));

      // xc now represents str as an integer and converted to baseOut. e is the exponent.
      e = k = xc.length;

      // Remove trailing zeros.
      for (; xc[--k] == 0; xc.pop());

      // Zero?
      if (!xc[0]) return alphabet.charAt(0);

      // Does str represent an integer? If so, no need for the division.
      if (i < 0) {
        --e;
      } else {
        x.c = xc;
        x.e = e;

        // The sign is needed for correct rounding.
        x.s = sign;
        x = div(x, y, dp, rm, baseOut);
        xc = x.c;
        r = x.r;
        e = x.e;
      }

      // xc now represents str converted to baseOut.

      // THe index of the rounding digit.
      d = e + dp + 1;

      // The rounding digit: the digit to the right of the digit that may be rounded up.
      i = xc[d];

      // Look at the rounding digits and mode to determine whether to round up.

      k = baseOut / 2;
      r = r || d < 0 || xc[d + 1] != null;

      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
             rm == (x.s < 0 ? 8 : 7));

      // If the index of the rounding digit is not greater than zero, or xc represents
      // zero, then the result of the base conversion is zero or, if rounding up, a value
      // such as 0.00001.
      if (d < 1 || !xc[0]) {

        // 1^-dp or 0
        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0))
            : alphabet.charAt(0);
      } else {

        // Truncate xc to the required number of decimal places.
        xc.length = d;

        // Round up?
        if (r) {

          // Rounding up may mean the previous digit has to be rounded up and so on.
          for (--baseOut; ++xc[--d] > baseOut;) {
            xc[d] = 0;

            if (!d) {
              ++e;
              xc = [1].concat(xc);
            }
          }
        }

        // Determine trailing zeros.
        for (k = xc.length; !xc[--k];);

        // E.g. [4, 11, 15] becomes 4bf.
        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));

        // Add leading zeros, decimal point and trailing zeros as required.
        str = toFixedPoint(str, e, alphabet.charAt(0));
      }

      // The caller will add the sign.
      return str;
    };
  })();


  // Perform division in the specified base. Called by div and convertBase.
  div = (function () {

    // Assume non-zero x and k.
    function multiply(x, k, base) {
      var m, temp, xlo, xhi,
        carry = 0,
        i = x.length,
        klo = k % SQRT_BASE,
        khi = k / SQRT_BASE | 0;

      for (x = x.slice(); i--;) {
        xlo = x[i] % SQRT_BASE;
        xhi = x[i] / SQRT_BASE | 0;
        m = khi * xlo + xhi * klo;
        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
        x[i] = temp % base;
      }

      if (carry) x = [carry].concat(x);

      return x;
    }

    function compare(a, b, aL, bL) {
      var i, cmp;

      if (aL != bL) {
        cmp = aL > bL ? 1 : -1;
      } else {

        for (i = cmp = 0; i < aL; i++) {

          if (a[i] != b[i]) {
            cmp = a[i] > b[i] ? 1 : -1;
            break;
          }
        }
      }

      return cmp;
    }

    function subtract(a, b, aL, base) {
      var i = 0;

      // Subtract b from a.
      for (; aL--;) {
        a[aL] -= i;
        i = a[aL] < b[aL] ? 1 : 0;
        a[aL] = i * base + a[aL] - b[aL];
      }

      // Remove leading zeros.
      for (; !a[0] && a.length > 1; a.splice(0, 1));
    }

    // x: dividend, y: divisor.
    return function (x, y, dp, rm, base) {
      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
        yL, yz,
        s = x.s == y.s ? 1 : -1,
        xc = x.c,
        yc = y.c;

      // Either NaN, Infinity or 0?
      if (!xc || !xc[0] || !yc || !yc[0]) {

        return new BigNumber(

         // Return NaN if either NaN, or both Infinity or 0.
         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
          xc && xc[0] == 0 || !yc ? s * 0 : s / 0
       );
      }

      q = new BigNumber(s);
      qc = q.c = [];
      e = x.e - y.e;
      s = dp + e + 1;

      if (!base) {
        base = BASE;
        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
        s = s / LOG_BASE | 0;
      }

      // Result exponent may be one less then the current value of e.
      // The coefficients of the BigNumbers from convertBase may have trailing zeros.
      for (i = 0; yc[i] == (xc[i] || 0); i++);

      if (yc[i] > (xc[i] || 0)) e--;

      if (s < 0) {
        qc.push(1);
        more = true;
      } else {
        xL = xc.length;
        yL = yc.length;
        i = 0;
        s += 2;

        // Normalise xc and yc so highest order digit of yc is >= base / 2.

        n = mathfloor(base / (yc[0] + 1));

        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
        if (n > 1) {
          yc = multiply(yc, n, base);
          xc = multiply(xc, n, base);
          yL = yc.length;
          xL = xc.length;
        }

        xi = yL;
        rem = xc.slice(0, yL);
        remL = rem.length;

        // Add zeros to make remainder as long as divisor.
        for (; remL < yL; rem[remL++] = 0);
        yz = yc.slice();
        yz = [0].concat(yz);
        yc0 = yc[0];
        if (yc[1] >= base / 2) yc0++;
        // Not necessary, but to prevent trial digit n > base, when using base 3.
        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

        do {
          n = 0;

          // Compare divisor and remainder.
          cmp = compare(yc, rem, yL, remL);

          // If divisor < remainder.
          if (cmp < 0) {

            // Calculate trial digit, n.

            rem0 = rem[0];
            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

            // n is how many times the divisor goes into the current remainder.
            n = mathfloor(rem0 / yc0);

            //  Algorithm:
            //  product = divisor multiplied by trial digit (n).
            //  Compare product and remainder.
            //  If product is greater than remainder:
            //    Subtract divisor from product, decrement trial digit.
            //  Subtract product from remainder.
            //  If product was less than remainder at the last compare:
            //    Compare new remainder and divisor.
            //    If remainder is greater than divisor:
            //      Subtract divisor from remainder, increment trial digit.

            if (n > 1) {

              // n may be > base only when base is 3.
              if (n >= base) n = base - 1;

              // product = divisor * trial digit.
              prod = multiply(yc, n, base);
              prodL = prod.length;
              remL = rem.length;

              // Compare product and remainder.
              // If product > remainder then trial digit n too high.
              // n is 1 too high about 5% of the time, and is not known to have
              // ever been more than 1 too high.
              while (compare(prod, rem, prodL, remL) == 1) {
                n--;

                // Subtract divisor from product.
                subtract(prod, yL < prodL ? yz : yc, prodL, base);
                prodL = prod.length;
                cmp = 1;
              }
            } else {

              // n is 0 or 1, cmp is -1.
              // If n is 0, there is no need to compare yc and rem again below,
              // so change cmp to 1 to avoid it.
              // If n is 1, leave cmp as -1, so yc and rem are compared again.
              if (n == 0) {

                // divisor < remainder, so n must be at least 1.
                cmp = n = 1;
              }

              // product = divisor
              prod = yc.slice();
              prodL = prod.length;
            }

            if (prodL < remL) prod = [0].concat(prod);

            // Subtract product from remainder.
            subtract(rem, prod, remL, base);
            remL = rem.length;

             // If product was < remainder.
            if (cmp == -1) {

              // Compare divisor and new remainder.
              // If divisor < new remainder, subtract divisor from remainder.
              // Trial digit n too low.
              // n is 1 too low about 5% of the time, and very rarely 2 too low.
              while (compare(yc, rem, yL, remL) < 1) {
                n++;

                // Subtract divisor from remainder.
                subtract(rem, yL < remL ? yz : yc, remL, base);
                remL = rem.length;
              }
            }
          } else if (cmp === 0) {
            n++;
            rem = [0];
          } // else cmp === 1 and n will be 0

          // Add the next digit, n, to the result array.
          qc[i++] = n;

          // Update the remainder.
          if (rem[0]) {
            rem[remL++] = xc[xi] || 0;
          } else {
            rem = [xc[xi]];
            remL = 1;
          }
        } while ((xi++ < xL || rem[0] != null) && s--);

        more = rem[0] != null;

        // Leading zero?
        if (!qc[0]) qc.splice(0, 1);
      }

      if (base == BASE) {

        // To calculate q.e, first get the number of digits of qc[0].
        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

      // Caller is convertBase.
      } else {
        q.e = e;
        q.r = +more;
      }

      return q;
    };
  })();


  /*
   * Return a string representing the value of BigNumber n in fixed-point or exponential
   * notation rounded to the specified decimal places or significant digits.
   *
   * n: a BigNumber.
   * i: the index of the last digit required (i.e. the digit that may be rounded up).
   * rm: the rounding mode.
   * id: 1 (toExponential) or 2 (toPrecision).
   */
  function format(n, i, rm, id) {
    var c0, e, ne, len, str;

    if (rm == null) rm = ROUNDING_MODE;
    else intCheck(rm, 0, 8);

    if (!n.c) return n.toString();

    c0 = n.c[0];
    ne = n.e;

    if (i == null) {
      str = coeffToString(n.c);
      str = id == 1 || id == 2 && ne <= TO_EXP_NEG
       ? toExponential(str, ne)
       : toFixedPoint(str, ne, '0');
    } else {
      n = round(new BigNumber(n), i, rm);

      // n.e may have changed if the value was rounded up.
      e = n.e;

      str = coeffToString(n.c);
      len = str.length;

      // toPrecision returns exponential notation if the number of significant digits
      // specified is less than the number of digits necessary to represent the integer
      // part of the value in fixed-point notation.

      // Exponential notation.
      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {

        // Append zeros?
        for (; len < i; str += '0', len++);
        str = toExponential(str, e);

      // Fixed-point notation.
      } else {
        i -= ne;
        str = toFixedPoint(str, e, '0');

        // Append zeros?
        if (e + 1 > len) {
          if (--i > 0) for (str += '.'; i--; str += '0');
        } else {
          i += e - len;
          if (i > 0) {
            if (e + 1 == len) str += '.';
            for (; i--; str += '0');
          }
        }
      }
    }

    return n.s < 0 && c0 ? '-' + str : str;
  }


  // Handle BigNumber.max and BigNumber.min.
  function maxOrMin(args, method) {
    var m, n,
      i = 0;

    if (isArray(args[0])) args = args[0];
    m = new BigNumber(args[0]);

    for (; ++i < args.length;) {
      n = new BigNumber(args[i]);

      // If any number is NaN, return NaN.
      if (!n.s) {
        m = n;
        break;
      } else if (method.call(m, n)) {
        m = n;
      }
    }

    return m;
  }


  /*
   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
   * Called by minus, plus and times.
   */
  function normalise(n, c, e) {
    var i = 1,
      j = c.length;

     // Remove trailing zeros.
    for (; !c[--j]; c.pop());

    // Calculate the base 10 exponent. First get the number of digits of c[0].
    for (j = c[0]; j >= 10; j /= 10, i++);

    // Overflow?
    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

      // Infinity.
      n.c = n.e = null;

    // Underflow?
    } else if (e < MIN_EXP) {

      // Zero.
      n.c = [n.e = 0];
    } else {
      n.e = e;
      n.c = c;
    }

    return n;
  }


  // Handle values that fail the validity test in BigNumber.
  parseNumeric = (function () {
    var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
      dotAfter = /^([^.]+)\.$/,
      dotBefore = /^\.([^.]+)$/,
      isInfinityOrNaN = /^-?(Infinity|NaN)$/,
      whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

    return function (x, str, isNum, b) {
      var base,
        s = isNum ? str : str.replace(whitespaceOrPlus, '');

      // No exception on ±Infinity or NaN.
      if (isInfinityOrNaN.test(s)) {
        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
        x.c = x.e = null;
      } else {
        if (!isNum) {

          // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
          s = s.replace(basePrefix, function (m, p1, p2) {
            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
            return !b || b == base ? p1 : m;
          });

          if (b) {
            base = b;

            // E.g. '1.' to '1', '.1' to '0.1'
            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
          }

          if (str != s) return new BigNumber(s, base);
        }

        // '[BigNumber Error] Not a number: {n}'
        // '[BigNumber Error] Not a base {b} number: {n}'
        if (BigNumber.DEBUG) {
          throw Error
            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
        }

        // NaN
        x.c = x.e = x.s = null;
      }
    }
  })();


  /*
   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
   * If r is truthy, it is known that there are more digits after the rounding digit.
   */
  function round(x, sd, rm, r) {
    var d, i, j, k, n, ni, rd,
      xc = x.c,
      pows10 = POWS_TEN;

    // if x is not Infinity or NaN...
    if (xc) {

      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
      // n is a base 1e14 number, the value of the element of array x.c containing rd.
      // ni is the index of n within x.c.
      // d is the number of digits of n.
      // i is the index of rd within n including leading zeros.
      // j is the actual index of rd within n (if < 0, rd is a leading zero).
      out: {

        // Get the number of digits of the first element of xc.
        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
        i = sd - d;

        // If the rounding digit is in the first element of xc...
        if (i < 0) {
          i += LOG_BASE;
          j = sd;
          n = xc[ni = 0];

          // Get the rounding digit at index j of n.
          rd = n / pows10[d - j - 1] % 10 | 0;
        } else {
          ni = mathceil((i + 1) / LOG_BASE);

          if (ni >= xc.length) {

            if (r) {

              // Needed by sqrt.
              for (; xc.length <= ni; xc.push(0));
              n = rd = 0;
              d = 1;
              i %= LOG_BASE;
              j = i - LOG_BASE + 1;
            } else {
              break out;
            }
          } else {
            n = k = xc[ni];

            // Get the number of digits of n.
            for (d = 1; k >= 10; k /= 10, d++);

            // Get the index of rd within n.
            i %= LOG_BASE;

            // Get the index of rd within n, adjusted for leading zeros.
            // The number of leading zeros of n is given by LOG_BASE - d.
            j = i - LOG_BASE + d;

            // Get the rounding digit at index j of n.
            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
          }
        }

        r = r || sd < 0 ||

        // Are there any non-zero digits after the rounding digit?
        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

        r = rm < 4
         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

          // Check whether the digit to the left of the rounding digit is odd.
          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
           rm == (x.s < 0 ? 8 : 7));

        if (sd < 1 || !xc[0]) {
          xc.length = 0;

          if (r) {

            // Convert sd to decimal places.
            sd -= x.e + 1;

            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
            x.e = -sd || 0;
          } else {

            // Zero.
            xc[0] = x.e = 0;
          }

          return x;
        }

        // Remove excess digits.
        if (i == 0) {
          xc.length = ni;
          k = 1;
          ni--;
        } else {
          xc.length = ni + 1;
          k = pows10[LOG_BASE - i];

          // E.g. 56700 becomes 56000 if 7 is the rounding digit.
          // j > 0 means i > number of leading zeros of n.
          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
        }

        // Round up?
        if (r) {

          for (; ;) {

            // If the digit to be rounded up is in the first element of xc...
            if (ni == 0) {

              // i will be the length of xc[0] before k is added.
              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
              j = xc[0] += k;
              for (k = 1; j >= 10; j /= 10, k++);

              // if i != k the length has increased.
              if (i != k) {
                x.e++;
                if (xc[0] == BASE) xc[0] = 1;
              }

              break;
            } else {
              xc[ni] += k;
              if (xc[ni] != BASE) break;
              xc[ni--] = 0;
              k = 1;
            }
          }
        }

        // Remove trailing zeros.
        for (i = xc.length; xc[--i] === 0; xc.pop());
      }

      // Overflow? Infinity.
      if (x.e > MAX_EXP) {
        x.c = x.e = null;

      // Underflow? Zero.
      } else if (x.e < MIN_EXP) {
        x.c = [x.e = 0];
      }
    }

    return x;
  }


  // PROTOTYPE/INSTANCE METHODS


  /*
   * Return a new BigNumber whose value is the absolute value of this BigNumber.
   */
  P.absoluteValue = P.abs = function () {
    var x = new BigNumber(this);
    if (x.s < 0) x.s = 1;
    return x;
  };


  /*
   * Return
   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
   *   0 if they have the same value,
   *   or null if the value of either is NaN.
   */
  P.comparedTo = function (y, b) {
    return compare(this, new BigNumber(y, b));
  };


  /*
   * If dp is undefined or null or true or false, return the number of decimal places of the
   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
   *
   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
   * ROUNDING_MODE if rm is omitted.
   *
   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
   */
  P.decimalPlaces = P.dp = function (dp, rm) {
    var c, n, v,
      x = this;

    if (dp != null) {
      intCheck(dp, 0, MAX);
      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);

      return round(new BigNumber(x), dp + x.e + 1, rm);
    }

    if (!(c = x.c)) return null;
    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

    // Subtract the number of trailing zeros of the last number.
    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
    if (n < 0) n = 0;

    return n;
  };


  /*
   *  n / 0 = I
   *  n / N = N
   *  n / I = 0
   *  0 / n = 0
   *  0 / 0 = N
   *  0 / N = N
   *  0 / I = 0
   *  N / n = N
   *  N / 0 = N
   *  N / N = N
   *  N / I = N
   *  I / n = I
   *  I / 0 = I
   *  I / N = N
   *  I / I = N
   *
   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
   */
  P.dividedBy = P.div = function (y, b) {
    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
  };


  /*
   * Return a new BigNumber whose value is the integer part of dividing the value of this
   * BigNumber by the value of BigNumber(y, b).
   */
  P.dividedToIntegerBy = P.idiv = function (y, b) {
    return div(this, new BigNumber(y, b), 0, 1);
  };


  /*
   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
   *
   * If m is present, return the result modulo m.
   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
   *
   * The modular power operation works efficiently when x, n, and m are integers, otherwise it
   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
   *
   * n {number|string|BigNumber} The exponent. An integer.
   * [m] {number|string|BigNumber} The modulus.
   *
   * '[BigNumber Error] Exponent not an integer: {n}'
   */
  P.exponentiatedBy = P.pow = function (n, m) {
    var half, isModExp, k, more, nIsBig, nIsNeg, nIsOdd, y,
      x = this;

    n = new BigNumber(n);

    // Allow NaN and ±Infinity, but not other non-integers.
    if (n.c && !n.isInteger()) {
      throw Error
        (bignumberError + 'Exponent not an integer: ' + n);
    }

    if (m != null) m = new BigNumber(m);

    // Exponent of MAX_SAFE_INTEGER is 15.
    nIsBig = n.e > 14;

    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {

      // The sign of the result of pow when x is negative depends on the evenness of n.
      // If +n overflows to ±Infinity, the evenness of n would be not be known.
      y = new BigNumber(Math.pow(+x.valueOf(), nIsBig ? 2 - isOdd(n) : +n));
      return m ? y.mod(m) : y;
    }

    nIsNeg = n.s < 0;

    if (m) {

      // x % m returns NaN if abs(m) is zero, or m is NaN.
      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

      isModExp = !nIsNeg && x.isInteger() && m.isInteger();

      if (isModExp) x = x.mod(m);

    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
      // [1, 240000000]
      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
      // [80000000000000]  [99999750000000]
      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {

      // If x is negative and n is odd, k = -0, else k = 0.
      k = x.s < 0 && isOdd(n) ? -0 : 0;

      // If x >= 1, k = ±Infinity.
      if (x.e > -1) k = 1 / k;

      // If n is negative return ±0, else return ±Infinity.
      return new BigNumber(nIsNeg ? 1 / k : k);

    } else if (POW_PRECISION) {

      // Truncating each coefficient array to a length of k after each multiplication
      // equates to truncating significant digits to POW_PRECISION + [28, 41],
      // i.e. there will be a minimum of 28 guard digits retained.
      k = mathceil(POW_PRECISION / LOG_BASE + 2);
    }

    if (nIsBig) {
      half = new BigNumber(0.5);
      nIsOdd = isOdd(n);
    } else {
      nIsOdd = n % 2;
    }

    if (nIsNeg) n.s = 1;

    y = new BigNumber(ONE);

    // Performs 54 loop iterations for n of 9007199254740991.
    for (; ;) {

      if (nIsOdd) {
        y = y.times(x);
        if (!y.c) break;

        if (k) {
          if (y.c.length > k) y.c.length = k;
        } else if (isModExp) {
          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
        }
      }

      if (nIsBig) {
        n = n.times(half);
        round(n, n.e + 1, 1);
        if (!n.c[0]) break;
        nIsBig = n.e > 14;
        nIsOdd = isOdd(n);
      } else {
        n = mathfloor(n / 2);
        if (!n) break;
        nIsOdd = n % 2;
      }

      x = x.times(x);

      if (k) {
        if (x.c && x.c.length > k) x.c.length = k;
      } else if (isModExp) {
        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
      }
    }

    if (isModExp) return y;
    if (nIsNeg) y = ONE.div(y);

    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
  };


  /*
   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
   *
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
   */
  P.integerValue = function (rm) {
    var n = new BigNumber(this);
    if (rm == null) rm = ROUNDING_MODE;
    else intCheck(rm, 0, 8);
    return round(n, n.e + 1, rm);
  };


  /*
   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
   * otherwise return false.
   */
  P.isEqualTo = P.eq = function (y, b) {
    return compare(this, new BigNumber(y, b)) === 0;
  };


  /*
   * Return true if the value of this BigNumber is a finite number, otherwise return false.
   */
  P.isFinite = function () {
    return !!this.c;
  };


  /*
   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
   * otherwise return false.
   */
  P.isGreaterThan = P.gt = function (y, b) {
    return compare(this, new BigNumber(y, b)) > 0;
  };


  /*
   * Return true if the value of this BigNumber is greater than or equal to the value of
   * BigNumber(y, b), otherwise return false.
   */
  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;

  };


  /*
   * Return true if the value of this BigNumber is an integer, otherwise return false.
   */
  P.isInteger = function () {
    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
  };


  /*
   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
   * otherwise return false.
   */
  P.isLessThan = P.lt = function (y, b) {
    return compare(this, new BigNumber(y, b)) < 0;
  };


  /*
   * Return true if the value of this BigNumber is less than or equal to the value of
   * BigNumber(y, b), otherwise return false.
   */
  P.isLessThanOrEqualTo = P.lte = function (y, b) {
    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
  };


  /*
   * Return true if the value of this BigNumber is NaN, otherwise return false.
   */
  P.isNaN = function () {
    return !this.s;
  };


  /*
   * Return true if the value of this BigNumber is negative, otherwise return false.
   */
  P.isNegative = function () {
    return this.s < 0;
  };


  /*
   * Return true if the value of this BigNumber is positive, otherwise return false.
   */
  P.isPositive = function () {
    return this.s > 0;
  };


  /*
   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
   */
  P.isZero = function () {
    return !!this.c && this.c[0] == 0;
  };


  /*
   *  n - 0 = n
   *  n - N = N
   *  n - I = -I
   *  0 - n = -n
   *  0 - 0 = 0
   *  0 - N = N
   *  0 - I = -I
   *  N - n = N
   *  N - 0 = N
   *  N - N = N
   *  N - I = N
   *  I - n = I
   *  I - 0 = I
   *  I - N = N
   *  I - I = N
   *
   * Return a new BigNumber whose value is the value of this BigNumber minus the value of
   * BigNumber(y, b).
   */
  P.minus = function (y, b) {
    var i, j, t, xLTy,
      x = this,
      a = x.s;

    y = new BigNumber(y, b);
    b = y.s;

    // Either NaN?
    if (!a || !b) return new BigNumber(NaN);

    // Signs differ?
    if (a != b) {
      y.s = -b;
      return x.plus(y);
    }

    var xe = x.e / LOG_BASE,
      ye = y.e / LOG_BASE,
      xc = x.c,
      yc = y.c;

    if (!xe || !ye) {

      // Either Infinity?
      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

      // Either zero?
      if (!xc[0] || !yc[0]) {

        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
         ROUNDING_MODE == 3 ? -0 : 0);
      }
    }

    xe = bitFloor(xe);
    ye = bitFloor(ye);
    xc = xc.slice();

    // Determine which is the bigger number.
    if (a = xe - ye) {

      if (xLTy = a < 0) {
        a = -a;
        t = xc;
      } else {
        ye = xe;
        t = yc;
      }

      t.reverse();

      // Prepend zeros to equalise exponents.
      for (b = a; b--; t.push(0));
      t.reverse();
    } else {

      // Exponents equal. Check digit by digit.
      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

      for (a = b = 0; b < j; b++) {

        if (xc[b] != yc[b]) {
          xLTy = xc[b] < yc[b];
          break;
        }
      }
    }

    // x < y? Point xc to the array of the bigger number.
    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

    b = (j = yc.length) - (i = xc.length);

    // Append zeros to xc if shorter.
    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
    if (b > 0) for (; b--; xc[i++] = 0);
    b = BASE - 1;

    // Subtract yc from xc.
    for (; j > a;) {

      if (xc[--j] < yc[j]) {
        for (i = j; i && !xc[--i]; xc[i] = b);
        --xc[i];
        xc[j] += BASE;
      }

      xc[j] -= yc[j];
    }

    // Remove leading zeros and adjust exponent accordingly.
    for (; xc[0] == 0; xc.splice(0, 1), --ye);

    // Zero?
    if (!xc[0]) {

      // Following IEEE 754 (2008) 6.3,
      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
      y.s = ROUNDING_MODE == 3 ? -1 : 1;
      y.c = [y.e = 0];
      return y;
    }

    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
    // for finite x and y.
    return normalise(y, xc, ye);
  };


  /*
   *   n % 0 =  N
   *   n % N =  N
   *   n % I =  n
   *   0 % n =  0
   *  -0 % n = -0
   *   0 % 0 =  N
   *   0 % N =  N
   *   0 % I =  0
   *   N % n =  N
   *   N % 0 =  N
   *   N % N =  N
   *   N % I =  N
   *   I % n =  N
   *   I % 0 =  N
   *   I % N =  N
   *   I % I =  N
   *
   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
   * BigNumber(y, b). The result depends on the value of MODULO_MODE.
   */
  P.modulo = P.mod = function (y, b) {
    var q, s,
      x = this;

    y = new BigNumber(y, b);

    // Return NaN if x is Infinity or NaN, or y is NaN or zero.
    if (!x.c || !y.s || y.c && !y.c[0]) {
      return new BigNumber(NaN);

    // Return x if y is Infinity or x is zero.
    } else if (!y.c || x.c && !x.c[0]) {
      return new BigNumber(x);
    }

    if (MODULO_MODE == 9) {

      // Euclidian division: q = sign(y) * floor(x / abs(y))
      // r = x - qy    where  0 <= r < abs(y)
      s = y.s;
      y.s = 1;
      q = div(x, y, 0, 3);
      y.s = s;
      q.s *= s;
    } else {
      q = div(x, y, 0, MODULO_MODE);
    }

    y = x.minus(q.times(y));

    // To match JavaScript %, ensure sign of zero is sign of dividend.
    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

    return y;
  };


  /*
   *  n * 0 = 0
   *  n * N = N
   *  n * I = I
   *  0 * n = 0
   *  0 * 0 = 0
   *  0 * N = N
   *  0 * I = N
   *  N * n = N
   *  N * 0 = N
   *  N * N = N
   *  N * I = N
   *  I * n = I
   *  I * 0 = N
   *  I * N = N
   *  I * I = I
   *
   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
   * of BigNumber(y, b).
   */
  P.multipliedBy = P.times = function (y, b) {
    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
      base, sqrtBase,
      x = this,
      xc = x.c,
      yc = (y = new BigNumber(y, b)).c;

    // Either NaN, ±Infinity or ±0?
    if (!xc || !yc || !xc[0] || !yc[0]) {

      // Return NaN if either is NaN, or one is 0 and the other is Infinity.
      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
        y.c = y.e = y.s = null;
      } else {
        y.s *= x.s;

        // Return ±Infinity if either is ±Infinity.
        if (!xc || !yc) {
          y.c = y.e = null;

        // Return ±0 if either is ±0.
        } else {
          y.c = [0];
          y.e = 0;
        }
      }

      return y;
    }

    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
    y.s *= x.s;
    xcL = xc.length;
    ycL = yc.length;

    // Ensure xc points to longer array and xcL to its length.
    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

    // Initialise the result array with zeros.
    for (i = xcL + ycL, zc = []; i--; zc.push(0));

    base = BASE;
    sqrtBase = SQRT_BASE;

    for (i = ycL; --i >= 0;) {
      c = 0;
      ylo = yc[i] % sqrtBase;
      yhi = yc[i] / sqrtBase | 0;

      for (k = xcL, j = i + k; j > i;) {
        xlo = xc[--k] % sqrtBase;
        xhi = xc[k] / sqrtBase | 0;
        m = yhi * xlo + xhi * ylo;
        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
        zc[j--] = xlo % base;
      }

      zc[j] = c;
    }

    if (c) {
      ++e;
    } else {
      zc.splice(0, 1);
    }

    return normalise(y, zc, e);
  };


  /*
   * Return a new BigNumber whose value is the value of this BigNumber negated,
   * i.e. multiplied by -1.
   */
  P.negated = function () {
    var x = new BigNumber(this);
    x.s = -x.s || null;
    return x;
  };


  /*
   *  n + 0 = n
   *  n + N = N
   *  n + I = I
   *  0 + n = n
   *  0 + 0 = 0
   *  0 + N = N
   *  0 + I = I
   *  N + n = N
   *  N + 0 = N
   *  N + N = N
   *  N + I = N
   *  I + n = I
   *  I + 0 = I
   *  I + N = N
   *  I + I = I
   *
   * Return a new BigNumber whose value is the value of this BigNumber plus the value of
   * BigNumber(y, b).
   */
  P.plus = function (y, b) {
    var t,
      x = this,
      a = x.s;

    y = new BigNumber(y, b);
    b = y.s;

    // Either NaN?
    if (!a || !b) return new BigNumber(NaN);

    // Signs differ?
     if (a != b) {
      y.s = -b;
      return x.minus(y);
    }

    var xe = x.e / LOG_BASE,
      ye = y.e / LOG_BASE,
      xc = x.c,
      yc = y.c;

    if (!xe || !ye) {

      // Return ±Infinity if either ±Infinity.
      if (!xc || !yc) return new BigNumber(a / 0);

      // Either zero?
      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
    }

    xe = bitFloor(xe);
    ye = bitFloor(ye);
    xc = xc.slice();

    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
    if (a = xe - ye) {
      if (a > 0) {
        ye = xe;
        t = yc;
      } else {
        a = -a;
        t = xc;
      }

      t.reverse();
      for (; a--; t.push(0));
      t.reverse();
    }

    a = xc.length;
    b = yc.length;

    // Point xc to the longer array, and b to the shorter length.
    if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
    for (a = 0; b;) {
      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
    }

    if (a) {
      xc = [a].concat(xc);
      ++ye;
    }

    // No need to check for zero, as +x + +y != 0 && -x + -y != 0
    // ye = MAX_EXP + 1 possible
    return normalise(y, xc, ye);
  };


  /*
   * If sd is undefined or null or true or false, return the number of significant digits of
   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
   * If sd is true include integer-part trailing zeros in the count.
   *
   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
   * ROUNDING_MODE if rm is omitted.
   *
   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
   *                     boolean: whether to count integer-part trailing zeros: true or false.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
   */
  P.precision = P.sd = function (sd, rm) {
    var c, n, v,
      x = this;

    if (sd != null && sd !== !!sd) {
      intCheck(sd, 1, MAX);
      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);

      return round(new BigNumber(x), sd, rm);
    }

    if (!(c = x.c)) return null;
    v = c.length - 1;
    n = v * LOG_BASE + 1;

    if (v = c[v]) {

      // Subtract the number of trailing zeros of the last element.
      for (; v % 10 == 0; v /= 10, n--);

      // Add the number of digits of the first element.
      for (v = c[0]; v >= 10; v /= 10, n++);
    }

    if (sd && x.e + 1 > n) n = x.e + 1;

    return n;
  };


  /*
   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
   *
   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
   */
  P.shiftedBy = function (k) {
    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
    return this.times('1e' + k);
  };


  /*
   *  sqrt(-n) =  N
   *  sqrt(N) =  N
   *  sqrt(-I) =  N
   *  sqrt(I) =  I
   *  sqrt(0) =  0
   *  sqrt(-0) = -0
   *
   * Return a new BigNumber whose value is the square root of the value of this BigNumber,
   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
   */
  P.squareRoot = P.sqrt = function () {
    var m, n, r, rep, t,
      x = this,
      c = x.c,
      s = x.s,
      e = x.e,
      dp = DECIMAL_PLACES + 4,
      half = new BigNumber('0.5');

    // Negative/NaN/Infinity/zero?
    if (s !== 1 || !c || !c[0]) {
      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
    }

    // Initial estimate.
    s = Math.sqrt(+x);

    // Math.sqrt underflow/overflow?
    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
    if (s == 0 || s == 1 / 0) {
      n = coeffToString(c);
      if ((n.length + e) % 2 == 0) n += '0';
      s = Math.sqrt(n);
      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

      if (s == 1 / 0) {
        n = '1e' + e;
      } else {
        n = s.toExponential();
        n = n.slice(0, n.indexOf('e') + 1) + e;
      }

      r = new BigNumber(n);
    } else {
      r = new BigNumber(s + '');
    }

    // Check for zero.
    // r could be zero if MIN_EXP is changed after the this value was created.
    // This would cause a division by zero (x/t) and hence Infinity below, which would cause
    // coeffToString to throw.
    if (r.c[0]) {
      e = r.e;
      s = e + dp;
      if (s < 3) s = 0;

      // Newton-Raphson iteration.
      for (; ;) {
        t = r;
        r = half.times(t.plus(div(x, t, dp, 1)));

        if (coeffToString(t.c  ).slice(0, s) === (n =
           coeffToString(r.c)).slice(0, s)) {

          // The exponent of r may here be one less than the final result exponent,
          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
          // are indexed correctly.
          if (r.e < e) --s;
          n = n.slice(s - 3, s + 1);

          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
          // iteration.
          if (n == '9999' || !rep && n == '4999') {

            // On the first iteration only, check to see if rounding up gives the
            // exact result as the nines may infinitely repeat.
            if (!rep) {
              round(t, t.e + DECIMAL_PLACES + 2, 0);

              if (t.times(t).eq(x)) {
                r = t;
                break;
              }
            }

            dp += 4;
            s += 4;
            rep = 1;
          } else {

            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
            // result. If not, then there are further digits and m will be truthy.
            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

              // Truncate to the first rounding digit.
              round(r, r.e + DECIMAL_PLACES + 2, 1);
              m = !r.times(r).eq(x);
            }

            break;
          }
        }
      }
    }

    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
  };


  /*
   * Return a string representing the value of this BigNumber in exponential notation and
   * rounded using ROUNDING_MODE to dp fixed decimal places.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
   */
  P.toExponential = function (dp, rm) {
    if (dp != null) {
      intCheck(dp, 0, MAX);
      dp++;
    }
    return format(this, dp, rm, 1);
  };


  /*
   * Return a string representing the value of this BigNumber in fixed-point notation rounding
   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
   *
   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
   * but e.g. (-0.00001).toFixed(0) is '-0'.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
   */
  P.toFixed = function (dp, rm) {
    if (dp != null) {
      intCheck(dp, 0, MAX);
      dp = dp + this.e + 1;
    }
    return format(this, dp, rm);
  };


  /*
   * Return a string representing the value of this BigNumber in fixed-point notation rounded
   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
   * of the FORMAT object (see BigNumber.set).
   *
   * FORMAT = {
   *      decimalSeparator : '.',
   *      groupSeparator : ',',
   *      groupSize : 3,
   *      secondaryGroupSize : 0,
   *      fractionGroupSeparator : '\xA0',    // non-breaking space
   *      fractionGroupSize : 0
   * };
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
   */
  P.toFormat = function (dp, rm) {
    var str = this.toFixed(dp, rm);

    if (this.c) {
      var i,
        arr = str.split('.'),
        g1 = +FORMAT.groupSize,
        g2 = +FORMAT.secondaryGroupSize,
        groupSeparator = FORMAT.groupSeparator,
        intPart = arr[0],
        fractionPart = arr[1],
        isNeg = this.s < 0,
        intDigits = isNeg ? intPart.slice(1) : intPart,
        len = intDigits.length;

      if (g2) i = g1, g1 = g2, g2 = i, len -= i;

      if (g1 > 0 && len > 0) {
        i = len % g1 || g1;
        intPart = intDigits.substr(0, i);

        for (; i < len; i += g1) {
          intPart += groupSeparator + intDigits.substr(i, g1);
        }

        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
        if (isNeg) intPart = '-' + intPart;
      }

      str = fractionPart
       ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize)
        ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
         '$&' + FORMAT.fractionGroupSeparator)
        : fractionPart)
       : intPart;
    }

    return str;
  };


  /*
   * Return a string array representing the value of this BigNumber as a simple fraction with
   * an integer numerator and an integer denominator. The denominator will be a positive
   * non-zero value less than or equal to the specified maximum denominator. If a maximum
   * denominator is not specified, the denominator will be the lowest value necessary to
   * represent the number exactly.
   *
   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
   *
   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
   */
  P.toFraction = function (md) {
    var arr, d, d0, d1, d2, e, exp, n, n0, n1, q, s,
      x = this,
      xc = x.c;

    if (md != null) {
      n = new BigNumber(md);

      // Throw if md is less than one or is not an integer, unless it is Infinity.
      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
        throw Error
          (bignumberError + 'Argument ' +
            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + md);
      }
    }

    if (!xc) return x.toString();

    d = new BigNumber(ONE);
    n1 = d0 = new BigNumber(ONE);
    d1 = n0 = new BigNumber(ONE);
    s = coeffToString(xc);

    // Determine initial denominator.
    // d is a power of 10 and the minimum max denominator that specifies the value exactly.
    e = d.e = s.length - x.e - 1;
    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;

    exp = MAX_EXP;
    MAX_EXP = 1 / 0;
    n = new BigNumber(s);

    // n0 = d1 = 0
    n0.c[0] = 0;

    for (; ;)  {
      q = div(n, d, 0, 1);
      d2 = d0.plus(q.times(d1));
      if (d2.comparedTo(md) == 1) break;
      d0 = d1;
      d1 = d2;
      n1 = n0.plus(q.times(d2 = n1));
      n0 = d2;
      d = n.minus(q.times(d2 = d));
      n = d2;
    }

    d2 = div(md.minus(d0), d1, 0, 1);
    n0 = n0.plus(d2.times(n1));
    d0 = d0.plus(d2.times(d1));
    n0.s = n1.s = x.s;
    e *= 2;

    // Determine which fraction is closer to x, n0/d0 or n1/d1
    arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
       div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1
        ? [n1.toString(), d1.toString()]
        : [n0.toString(), d0.toString()];

    MAX_EXP = exp;
    return arr;
  };


  /*
   * Return the value of this BigNumber converted to a number primitive.
   */
  P.toNumber = function () {
    return +this;
  };


  /*
   * Return a string representing the value of this BigNumber rounded to sd significant digits
   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
   * necessary to represent the integer part of the value in fixed-point notation, then use
   * exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
   */
  P.toPrecision = function (sd, rm) {
    if (sd != null) intCheck(sd, 1, MAX);
    return format(this, sd, rm, 2);
  };


  /*
   * Return a string representing the value of this BigNumber in base b, or base 10 if b is
   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
   * TO_EXP_NEG, return exponential notation.
   *
   * [b] {number} Integer, 2 to ALPHABET.length inclusive.
   *
   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
   */
  P.toString = function (b) {
    var str,
      n = this,
      s = n.s,
      e = n.e;

    // Infinity or NaN?
    if (e === null) {

      if (s) {
        str = 'Infinity';
        if (s < 0) str = '-' + str;
      } else {
        str = 'NaN';
      }
    } else {
      str = coeffToString(n.c);

      if (b == null) {
        str = e <= TO_EXP_NEG || e >= TO_EXP_POS
         ? toExponential(str, e)
         : toFixedPoint(str, e, '0');
      } else {
        intCheck(b, 2, ALPHABET.length, 'Base');
        str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);
      }

      if (s < 0 && n.c[0]) str = '-' + str;
    }

    return str;
  };


  /*
   * Return as toString, but do not accept a base argument, and include the minus sign for
   * negative zero.
   */
  P.valueOf = P.toJSON = function () {
    var str,
      n = this,
      e = n.e;

    if (e === null) return n.toString();

    str = coeffToString(n.c);

    str = e <= TO_EXP_NEG || e >= TO_EXP_POS
      ? toExponential(str, e)
      : toFixedPoint(str, e, '0');

    return n.s < 0 ? '-' + str : str;
  };


  P._isBigNumber = true;

  if (configObject != null) BigNumber.set(configObject);

  return BigNumber;
}


// PRIVATE HELPER FUNCTIONS


function bitFloor(n) {
  var i = n | 0;
  return n > 0 || n === i ? i : i - 1;
}


// Return a coefficient array as a string of base 10 digits.
function coeffToString(a) {
  var s, z,
    i = 1,
    j = a.length,
    r = a[0] + '';

  for (; i < j;) {
    s = a[i++] + '';
    z = LOG_BASE - s.length;
    for (; z--; s = '0' + s);
    r += s;
  }

  // Determine trailing zeros.
  for (j = r.length; r.charCodeAt(--j) === 48;);
  return r.slice(0, j + 1 || 1);
}


// Compare the value of BigNumbers x and y.
function compare(x, y) {
  var a, b,
    xc = x.c,
    yc = y.c,
    i = x.s,
    j = y.s,
    k = x.e,
    l = y.e;

  // Either NaN?
  if (!i || !j) return null;

  a = xc && !xc[0];
  b = yc && !yc[0];

  // Either zero?
  if (a || b) return a ? b ? 0 : -j : i;

  // Signs differ?
  if (i != j) return i;

  a = i < 0;
  b = k == l;

  // Either Infinity?
  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

  // Compare exponents.
  if (!b) return k > l ^ a ? 1 : -1;

  j = (k = xc.length) < (l = yc.length) ? k : l;

  // Compare digit by digit.
  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

  // Compare lengths.
  return k == l ? 0 : k > l ^ a ? 1 : -1;
}


/*
 * Check that n is a primitive number, an integer, and in range, otherwise throw.
 */
function intCheck(n, min, max, name) {
  if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {
    throw Error
     (bignumberError + (name || 'Argument') + (typeof n == 'number'
       ? n < min || n > max ? ' out of range: ' : ' not an integer: '
       : ' not a primitive number: ') + n);
  }
}


function isArray(obj) {
  return Object.prototype.toString.call(obj) == '[object Array]';
}


// Assumes finite n.
function isOdd(n) {
  var k = n.c.length - 1;
  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
}


function toExponential(str, e) {
  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
   (e < 0 ? 'e' : 'e+') + e;
}


function toFixedPoint(str, e, z) {
  var len, zs;

  // Negative exponent?
  if (e < 0) {

    // Prepend zeros.
    for (zs = z + '.'; ++e; zs += z);
    str = zs + str;

  // Positive exponent
  } else {
    len = str.length;

    // Append zeros.
    if (++e > len) {
      for (zs = z, e -= len; --e; zs += z);
      str += zs;
    } else if (e < len) {
      str = str.slice(0, e) + '.' + str.slice(e);
    }
  }

  return str;
}


// EXPORTS


var BigNumber = clone();

/* harmony default export */ __webpack_exports__["default"] = (BigNumber);


/***/ }),
/* 173 */
/***/ (function(module, exports) {

exports = module.exports = SemVer

var debug
/* istanbul ignore next */
if (typeof process === 'object' &&
    process.env &&
    process.env.NODE_DEBUG &&
    /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
  debug = function () {
    var args = Array.prototype.slice.call(arguments, 0)
    args.unshift('SEMVER')
    console.log.apply(console, args)
  }
} else {
  debug = function () {}
}

// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
exports.SEMVER_SPEC_VERSION = '2.0.0'

var MAX_LENGTH = 256
var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
  /* istanbul ignore next */ 9007199254740991

// Max safe segment length for coercion.
var MAX_SAFE_COMPONENT_LENGTH = 16

// The actual regexps go on exports.re
var re = exports.re = []
var src = exports.src = []
var R = 0

// The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.

// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.

var NUMERICIDENTIFIER = R++
src[NUMERICIDENTIFIER] = '0|[1-9]\\d*'
var NUMERICIDENTIFIERLOOSE = R++
src[NUMERICIDENTIFIERLOOSE] = '[0-9]+'

// ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.

var NONNUMERICIDENTIFIER = R++
src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*'

// ## Main Version
// Three dot-separated numeric identifiers.

var MAINVERSION = R++
src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                   '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                   '(' + src[NUMERICIDENTIFIER] + ')'

var MAINVERSIONLOOSE = R++
src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')'

// ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.

var PRERELEASEIDENTIFIER = R++
src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +
                            '|' + src[NONNUMERICIDENTIFIER] + ')'

var PRERELEASEIDENTIFIERLOOSE = R++
src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +
                                 '|' + src[NONNUMERICIDENTIFIER] + ')'

// ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.

var PRERELEASE = R++
src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +
                  '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))'

var PRERELEASELOOSE = R++
src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +
                       '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))'

// ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.

var BUILDIDENTIFIER = R++
src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+'

// ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.

var BUILD = R++
src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] +
             '(?:\\.' + src[BUILDIDENTIFIER] + ')*))'

// ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.

// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.

var FULL = R++
var FULLPLAIN = 'v?' + src[MAINVERSION] +
                src[PRERELEASE] + '?' +
                src[BUILD] + '?'

src[FULL] = '^' + FULLPLAIN + '$'

// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.
var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] +
                 src[PRERELEASELOOSE] + '?' +
                 src[BUILD] + '?'

var LOOSE = R++
src[LOOSE] = '^' + LOOSEPLAIN + '$'

var GTLT = R++
src[GTLT] = '((?:<|>)?=?)'

// Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.
var XRANGEIDENTIFIERLOOSE = R++
src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*'
var XRANGEIDENTIFIER = R++
src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*'

var XRANGEPLAIN = R++
src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:' + src[PRERELEASE] + ')?' +
                   src[BUILD] + '?' +
                   ')?)?'

var XRANGEPLAINLOOSE = R++
src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:' + src[PRERELEASELOOSE] + ')?' +
                        src[BUILD] + '?' +
                        ')?)?'

var XRANGE = R++
src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$'
var XRANGELOOSE = R++
src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$'

// Coercion.
// Extract anything that could conceivably be a part of a valid semver
var COERCE = R++
src[COERCE] = '(?:^|[^\\d])' +
              '(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +
              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
              '(?:$|[^\\d])'

// Tilde ranges.
// Meaning is "reasonably at or greater than"
var LONETILDE = R++
src[LONETILDE] = '(?:~>?)'

var TILDETRIM = R++
src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+'
re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g')
var tildeTrimReplace = '$1~'

var TILDE = R++
src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$'
var TILDELOOSE = R++
src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$'

// Caret ranges.
// Meaning is "at least and backwards compatible with"
var LONECARET = R++
src[LONECARET] = '(?:\\^)'

var CARETTRIM = R++
src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+'
re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g')
var caretTrimReplace = '$1^'

var CARET = R++
src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$'
var CARETLOOSE = R++
src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$'

// A simple gt/lt/eq thing, or just "" to indicate "any version"
var COMPARATORLOOSE = R++
src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$'
var COMPARATOR = R++
src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$'

// An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`
var COMPARATORTRIM = R++
src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] +
                      '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')'

// this one has to use the /g flag
re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g')
var comparatorTrimReplace = '$1$2$3'

// Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.
var HYPHENRANGE = R++
src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' +
                   '\\s+-\\s+' +
                   '(' + src[XRANGEPLAIN] + ')' +
                   '\\s*$'

var HYPHENRANGELOOSE = R++
src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' +
                        '\\s+-\\s+' +
                        '(' + src[XRANGEPLAINLOOSE] + ')' +
                        '\\s*$'

// Star ranges basically just allow anything at all.
var STAR = R++
src[STAR] = '(<|>)?=?\\s*\\*'

// Compile to actual regexp objects.
// All are flag-free, unless they were created above with a flag.
for (var i = 0; i < R; i++) {
  debug(i, src[i])
  if (!re[i]) {
    re[i] = new RegExp(src[i])
  }
}

exports.parse = parse
function parse (version, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }

  if (version instanceof SemVer) {
    return version
  }

  if (typeof version !== 'string') {
    return null
  }

  if (version.length > MAX_LENGTH) {
    return null
  }

  var r = options.loose ? re[LOOSE] : re[FULL]
  if (!r.test(version)) {
    return null
  }

  try {
    return new SemVer(version, options)
  } catch (er) {
    return null
  }
}

exports.valid = valid
function valid (version, options) {
  var v = parse(version, options)
  return v ? v.version : null
}

exports.clean = clean
function clean (version, options) {
  var s = parse(version.trim().replace(/^[=v]+/, ''), options)
  return s ? s.version : null
}

exports.SemVer = SemVer

function SemVer (version, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }
  if (version instanceof SemVer) {
    if (version.loose === options.loose) {
      return version
    } else {
      version = version.version
    }
  } else if (typeof version !== 'string') {
    throw new TypeError('Invalid Version: ' + version)
  }

  if (version.length > MAX_LENGTH) {
    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')
  }

  if (!(this instanceof SemVer)) {
    return new SemVer(version, options)
  }

  debug('SemVer', version, options)
  this.options = options
  this.loose = !!options.loose

  var m = version.trim().match(options.loose ? re[LOOSE] : re[FULL])

  if (!m) {
    throw new TypeError('Invalid Version: ' + version)
  }

  this.raw = version

  // these are actually numbers
  this.major = +m[1]
  this.minor = +m[2]
  this.patch = +m[3]

  if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
    throw new TypeError('Invalid major version')
  }

  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
    throw new TypeError('Invalid minor version')
  }

  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
    throw new TypeError('Invalid patch version')
  }

  // numberify any prerelease numeric ids
  if (!m[4]) {
    this.prerelease = []
  } else {
    this.prerelease = m[4].split('.').map(function (id) {
      if (/^[0-9]+$/.test(id)) {
        var num = +id
        if (num >= 0 && num < MAX_SAFE_INTEGER) {
          return num
        }
      }
      return id
    })
  }

  this.build = m[5] ? m[5].split('.') : []
  this.format()
}

SemVer.prototype.format = function () {
  this.version = this.major + '.' + this.minor + '.' + this.patch
  if (this.prerelease.length) {
    this.version += '-' + this.prerelease.join('.')
  }
  return this.version
}

SemVer.prototype.toString = function () {
  return this.version
}

SemVer.prototype.compare = function (other) {
  debug('SemVer.compare', this.version, this.options, other)
  if (!(other instanceof SemVer)) {
    other = new SemVer(other, this.options)
  }

  return this.compareMain(other) || this.comparePre(other)
}

SemVer.prototype.compareMain = function (other) {
  if (!(other instanceof SemVer)) {
    other = new SemVer(other, this.options)
  }

  return compareIdentifiers(this.major, other.major) ||
         compareIdentifiers(this.minor, other.minor) ||
         compareIdentifiers(this.patch, other.patch)
}

SemVer.prototype.comparePre = function (other) {
  if (!(other instanceof SemVer)) {
    other = new SemVer(other, this.options)
  }

  // NOT having a prerelease is > having one
  if (this.prerelease.length && !other.prerelease.length) {
    return -1
  } else if (!this.prerelease.length && other.prerelease.length) {
    return 1
  } else if (!this.prerelease.length && !other.prerelease.length) {
    return 0
  }

  var i = 0
  do {
    var a = this.prerelease[i]
    var b = other.prerelease[i]
    debug('prerelease compare', i, a, b)
    if (a === undefined && b === undefined) {
      return 0
    } else if (b === undefined) {
      return 1
    } else if (a === undefined) {
      return -1
    } else if (a === b) {
      continue
    } else {
      return compareIdentifiers(a, b)
    }
  } while (++i)
}

// preminor will bump the version up to the next minor release, and immediately
// down to pre-release. premajor and prepatch work the same way.
SemVer.prototype.inc = function (release, identifier) {
  switch (release) {
    case 'premajor':
      this.prerelease.length = 0
      this.patch = 0
      this.minor = 0
      this.major++
      this.inc('pre', identifier)
      break
    case 'preminor':
      this.prerelease.length = 0
      this.patch = 0
      this.minor++
      this.inc('pre', identifier)
      break
    case 'prepatch':
      // If this is already a prerelease, it will bump to the next version
      // drop any prereleases that might already exist, since they are not
      // relevant at this point.
      this.prerelease.length = 0
      this.inc('patch', identifier)
      this.inc('pre', identifier)
      break
    // If the input is a non-prerelease version, this acts the same as
    // prepatch.
    case 'prerelease':
      if (this.prerelease.length === 0) {
        this.inc('patch', identifier)
      }
      this.inc('pre', identifier)
      break

    case 'major':
      // If this is a pre-major version, bump up to the same major version.
      // Otherwise increment major.
      // 1.0.0-5 bumps to 1.0.0
      // 1.1.0 bumps to 2.0.0
      if (this.minor !== 0 ||
          this.patch !== 0 ||
          this.prerelease.length === 0) {
        this.major++
      }
      this.minor = 0
      this.patch = 0
      this.prerelease = []
      break
    case 'minor':
      // If this is a pre-minor version, bump up to the same minor version.
      // Otherwise increment minor.
      // 1.2.0-5 bumps to 1.2.0
      // 1.2.1 bumps to 1.3.0
      if (this.patch !== 0 || this.prerelease.length === 0) {
        this.minor++
      }
      this.patch = 0
      this.prerelease = []
      break
    case 'patch':
      // If this is not a pre-release version, it will increment the patch.
      // If it is a pre-release it will bump up to the same patch version.
      // 1.2.0-5 patches to 1.2.0
      // 1.2.0 patches to 1.2.1
      if (this.prerelease.length === 0) {
        this.patch++
      }
      this.prerelease = []
      break
    // This probably shouldn't be used publicly.
    // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
    case 'pre':
      if (this.prerelease.length === 0) {
        this.prerelease = [0]
      } else {
        var i = this.prerelease.length
        while (--i >= 0) {
          if (typeof this.prerelease[i] === 'number') {
            this.prerelease[i]++
            i = -2
          }
        }
        if (i === -1) {
          // didn't increment anything
          this.prerelease.push(0)
        }
      }
      if (identifier) {
        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
        if (this.prerelease[0] === identifier) {
          if (isNaN(this.prerelease[1])) {
            this.prerelease = [identifier, 0]
          }
        } else {
          this.prerelease = [identifier, 0]
        }
      }
      break

    default:
      throw new Error('invalid increment argument: ' + release)
  }
  this.format()
  this.raw = this.version
  return this
}

exports.inc = inc
function inc (version, release, loose, identifier) {
  if (typeof (loose) === 'string') {
    identifier = loose
    loose = undefined
  }

  try {
    return new SemVer(version, loose).inc(release, identifier).version
  } catch (er) {
    return null
  }
}

exports.diff = diff
function diff (version1, version2) {
  if (eq(version1, version2)) {
    return null
  } else {
    var v1 = parse(version1)
    var v2 = parse(version2)
    var prefix = ''
    if (v1.prerelease.length || v2.prerelease.length) {
      prefix = 'pre'
      var defaultResult = 'prerelease'
    }
    for (var key in v1) {
      if (key === 'major' || key === 'minor' || key === 'patch') {
        if (v1[key] !== v2[key]) {
          return prefix + key
        }
      }
    }
    return defaultResult // may be undefined
  }
}

exports.compareIdentifiers = compareIdentifiers

var numeric = /^[0-9]+$/
function compareIdentifiers (a, b) {
  var anum = numeric.test(a)
  var bnum = numeric.test(b)

  if (anum && bnum) {
    a = +a
    b = +b
  }

  return a === b ? 0
    : (anum && !bnum) ? -1
    : (bnum && !anum) ? 1
    : a < b ? -1
    : 1
}

exports.rcompareIdentifiers = rcompareIdentifiers
function rcompareIdentifiers (a, b) {
  return compareIdentifiers(b, a)
}

exports.major = major
function major (a, loose) {
  return new SemVer(a, loose).major
}

exports.minor = minor
function minor (a, loose) {
  return new SemVer(a, loose).minor
}

exports.patch = patch
function patch (a, loose) {
  return new SemVer(a, loose).patch
}

exports.compare = compare
function compare (a, b, loose) {
  return new SemVer(a, loose).compare(new SemVer(b, loose))
}

exports.compareLoose = compareLoose
function compareLoose (a, b) {
  return compare(a, b, true)
}

exports.rcompare = rcompare
function rcompare (a, b, loose) {
  return compare(b, a, loose)
}

exports.sort = sort
function sort (list, loose) {
  return list.sort(function (a, b) {
    return exports.compare(a, b, loose)
  })
}

exports.rsort = rsort
function rsort (list, loose) {
  return list.sort(function (a, b) {
    return exports.rcompare(a, b, loose)
  })
}

exports.gt = gt
function gt (a, b, loose) {
  return compare(a, b, loose) > 0
}

exports.lt = lt
function lt (a, b, loose) {
  return compare(a, b, loose) < 0
}

exports.eq = eq
function eq (a, b, loose) {
  return compare(a, b, loose) === 0
}

exports.neq = neq
function neq (a, b, loose) {
  return compare(a, b, loose) !== 0
}

exports.gte = gte
function gte (a, b, loose) {
  return compare(a, b, loose) >= 0
}

exports.lte = lte
function lte (a, b, loose) {
  return compare(a, b, loose) <= 0
}

exports.cmp = cmp
function cmp (a, op, b, loose) {
  switch (op) {
    case '===':
      if (typeof a === 'object')
        a = a.version
      if (typeof b === 'object')
        b = b.version
      return a === b

    case '!==':
      if (typeof a === 'object')
        a = a.version
      if (typeof b === 'object')
        b = b.version
      return a !== b

    case '':
    case '=':
    case '==':
      return eq(a, b, loose)

    case '!=':
      return neq(a, b, loose)

    case '>':
      return gt(a, b, loose)

    case '>=':
      return gte(a, b, loose)

    case '<':
      return lt(a, b, loose)

    case '<=':
      return lte(a, b, loose)

    default:
      throw new TypeError('Invalid operator: ' + op)
  }
}

exports.Comparator = Comparator
function Comparator (comp, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }

  if (comp instanceof Comparator) {
    if (comp.loose === !!options.loose) {
      return comp
    } else {
      comp = comp.value
    }
  }

  if (!(this instanceof Comparator)) {
    return new Comparator(comp, options)
  }

  debug('comparator', comp, options)
  this.options = options
  this.loose = !!options.loose
  this.parse(comp)

  if (this.semver === ANY) {
    this.value = ''
  } else {
    this.value = this.operator + this.semver.version
  }

  debug('comp', this)
}

var ANY = {}
Comparator.prototype.parse = function (comp) {
  var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR]
  var m = comp.match(r)

  if (!m) {
    throw new TypeError('Invalid comparator: ' + comp)
  }

  this.operator = m[1]
  if (this.operator === '=') {
    this.operator = ''
  }

  // if it literally is just '>' or '' then allow anything.
  if (!m[2]) {
    this.semver = ANY
  } else {
    this.semver = new SemVer(m[2], this.options.loose)
  }
}

Comparator.prototype.toString = function () {
  return this.value
}

Comparator.prototype.test = function (version) {
  debug('Comparator.test', version, this.options.loose)

  if (this.semver === ANY) {
    return true
  }

  if (typeof version === 'string') {
    version = new SemVer(version, this.options)
  }

  return cmp(version, this.operator, this.semver, this.options)
}

Comparator.prototype.intersects = function (comp, options) {
  if (!(comp instanceof Comparator)) {
    throw new TypeError('a Comparator is required')
  }

  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }

  var rangeTmp

  if (this.operator === '') {
    rangeTmp = new Range(comp.value, options)
    return satisfies(this.value, rangeTmp, options)
  } else if (comp.operator === '') {
    rangeTmp = new Range(this.value, options)
    return satisfies(comp.semver, rangeTmp, options)
  }

  var sameDirectionIncreasing =
    (this.operator === '>=' || this.operator === '>') &&
    (comp.operator === '>=' || comp.operator === '>')
  var sameDirectionDecreasing =
    (this.operator === '<=' || this.operator === '<') &&
    (comp.operator === '<=' || comp.operator === '<')
  var sameSemVer = this.semver.version === comp.semver.version
  var differentDirectionsInclusive =
    (this.operator === '>=' || this.operator === '<=') &&
    (comp.operator === '>=' || comp.operator === '<=')
  var oppositeDirectionsLessThan =
    cmp(this.semver, '<', comp.semver, options) &&
    ((this.operator === '>=' || this.operator === '>') &&
    (comp.operator === '<=' || comp.operator === '<'))
  var oppositeDirectionsGreaterThan =
    cmp(this.semver, '>', comp.semver, options) &&
    ((this.operator === '<=' || this.operator === '<') &&
    (comp.operator === '>=' || comp.operator === '>'))

  return sameDirectionIncreasing || sameDirectionDecreasing ||
    (sameSemVer && differentDirectionsInclusive) ||
    oppositeDirectionsLessThan || oppositeDirectionsGreaterThan
}

exports.Range = Range
function Range (range, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }

  if (range instanceof Range) {
    if (range.loose === !!options.loose &&
        range.includePrerelease === !!options.includePrerelease) {
      return range
    } else {
      return new Range(range.raw, options)
    }
  }

  if (range instanceof Comparator) {
    return new Range(range.value, options)
  }

  if (!(this instanceof Range)) {
    return new Range(range, options)
  }

  this.options = options
  this.loose = !!options.loose
  this.includePrerelease = !!options.includePrerelease

  // First, split based on boolean or ||
  this.raw = range
  this.set = range.split(/\s*\|\|\s*/).map(function (range) {
    return this.parseRange(range.trim())
  }, this).filter(function (c) {
    // throw out any that are not relevant for whatever reason
    return c.length
  })

  if (!this.set.length) {
    throw new TypeError('Invalid SemVer Range: ' + range)
  }

  this.format()
}

Range.prototype.format = function () {
  this.range = this.set.map(function (comps) {
    return comps.join(' ').trim()
  }).join('||').trim()
  return this.range
}

Range.prototype.toString = function () {
  return this.range
}

Range.prototype.parseRange = function (range) {
  var loose = this.options.loose
  range = range.trim()
  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE]
  range = range.replace(hr, hyphenReplace)
  debug('hyphen replace', range)
  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace)
  debug('comparator trim', range, re[COMPARATORTRIM])

  // `~ 1.2.3` => `~1.2.3`
  range = range.replace(re[TILDETRIM], tildeTrimReplace)

  // `^ 1.2.3` => `^1.2.3`
  range = range.replace(re[CARETTRIM], caretTrimReplace)

  // normalize spaces
  range = range.split(/\s+/).join(' ')

  // At this point, the range is completely trimmed and
  // ready to be split into comparators.

  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR]
  var set = range.split(' ').map(function (comp) {
    return parseComparator(comp, this.options)
  }, this).join(' ').split(/\s+/)
  if (this.options.loose) {
    // in loose mode, throw out any that are not valid comparators
    set = set.filter(function (comp) {
      return !!comp.match(compRe)
    })
  }
  set = set.map(function (comp) {
    return new Comparator(comp, this.options)
  }, this)

  return set
}

Range.prototype.intersects = function (range, options) {
  if (!(range instanceof Range)) {
    throw new TypeError('a Range is required')
  }

  return this.set.some(function (thisComparators) {
    return thisComparators.every(function (thisComparator) {
      return range.set.some(function (rangeComparators) {
        return rangeComparators.every(function (rangeComparator) {
          return thisComparator.intersects(rangeComparator, options)
        })
      })
    })
  })
}

// Mostly just for testing and legacy API reasons
exports.toComparators = toComparators
function toComparators (range, options) {
  return new Range(range, options).set.map(function (comp) {
    return comp.map(function (c) {
      return c.value
    }).join(' ').trim().split(' ')
  })
}

// comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.
function parseComparator (comp, options) {
  debug('comp', comp, options)
  comp = replaceCarets(comp, options)
  debug('caret', comp)
  comp = replaceTildes(comp, options)
  debug('tildes', comp)
  comp = replaceXRanges(comp, options)
  debug('xrange', comp)
  comp = replaceStars(comp, options)
  debug('stars', comp)
  return comp
}

function isX (id) {
  return !id || id.toLowerCase() === 'x' || id === '*'
}

// ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
function replaceTildes (comp, options) {
  return comp.trim().split(/\s+/).map(function (comp) {
    return replaceTilde(comp, options)
  }).join(' ')
}

function replaceTilde (comp, options) {
  var r = options.loose ? re[TILDELOOSE] : re[TILDE]
  return comp.replace(r, function (_, M, m, p, pr) {
    debug('tilde', comp, _, M, m, p, pr)
    var ret

    if (isX(M)) {
      ret = ''
    } else if (isX(m)) {
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'
    } else if (isX(p)) {
      // ~1.2 == >=1.2.0 <1.3.0
      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'
    } else if (pr) {
      debug('replaceTilde pr', pr)
      ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
            ' <' + M + '.' + (+m + 1) + '.0'
    } else {
      // ~1.2.3 == >=1.2.3 <1.3.0
      ret = '>=' + M + '.' + m + '.' + p +
            ' <' + M + '.' + (+m + 1) + '.0'
    }

    debug('tilde return', ret)
    return ret
  })
}

// ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
// ^1.2.3 --> >=1.2.3 <2.0.0
// ^1.2.0 --> >=1.2.0 <2.0.0
function replaceCarets (comp, options) {
  return comp.trim().split(/\s+/).map(function (comp) {
    return replaceCaret(comp, options)
  }).join(' ')
}

function replaceCaret (comp, options) {
  debug('caret', comp, options)
  var r = options.loose ? re[CARETLOOSE] : re[CARET]
  return comp.replace(r, function (_, M, m, p, pr) {
    debug('caret', comp, _, M, m, p, pr)
    var ret

    if (isX(M)) {
      ret = ''
    } else if (isX(m)) {
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'
    } else if (isX(p)) {
      if (M === '0') {
        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'
      } else {
        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0'
      }
    } else if (pr) {
      debug('replaceCaret pr', pr)
      if (M === '0') {
        if (m === '0') {
          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
                ' <' + M + '.' + m + '.' + (+p + 1)
        } else {
          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
                ' <' + M + '.' + (+m + 1) + '.0'
        }
      } else {
        ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
              ' <' + (+M + 1) + '.0.0'
      }
    } else {
      debug('no pr')
      if (M === '0') {
        if (m === '0') {
          ret = '>=' + M + '.' + m + '.' + p +
                ' <' + M + '.' + m + '.' + (+p + 1)
        } else {
          ret = '>=' + M + '.' + m + '.' + p +
                ' <' + M + '.' + (+m + 1) + '.0'
        }
      } else {
        ret = '>=' + M + '.' + m + '.' + p +
              ' <' + (+M + 1) + '.0.0'
      }
    }

    debug('caret return', ret)
    return ret
  })
}

function replaceXRanges (comp, options) {
  debug('replaceXRanges', comp, options)
  return comp.split(/\s+/).map(function (comp) {
    return replaceXRange(comp, options)
  }).join(' ')
}

function replaceXRange (comp, options) {
  comp = comp.trim()
  var r = options.loose ? re[XRANGELOOSE] : re[XRANGE]
  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
    debug('xRange', comp, ret, gtlt, M, m, p, pr)
    var xM = isX(M)
    var xm = xM || isX(m)
    var xp = xm || isX(p)
    var anyX = xp

    if (gtlt === '=' && anyX) {
      gtlt = ''
    }

    if (xM) {
      if (gtlt === '>' || gtlt === '<') {
        // nothing is allowed
        ret = '<0.0.0'
      } else {
        // nothing is forbidden
        ret = '*'
      }
    } else if (gtlt && anyX) {
      // we know patch is an x, because we have any x at all.
      // replace X with 0
      if (xm) {
        m = 0
      }
      p = 0

      if (gtlt === '>') {
        // >1 => >=2.0.0
        // >1.2 => >=1.3.0
        // >1.2.3 => >= 1.2.4
        gtlt = '>='
        if (xm) {
          M = +M + 1
          m = 0
          p = 0
        } else {
          m = +m + 1
          p = 0
        }
      } else if (gtlt === '<=') {
        // <=0.7.x is actually <0.8.0, since any 0.7.x should
        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
        gtlt = '<'
        if (xm) {
          M = +M + 1
        } else {
          m = +m + 1
        }
      }

      ret = gtlt + M + '.' + m + '.' + p
    } else if (xm) {
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'
    } else if (xp) {
      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'
    }

    debug('xRange return', ret)

    return ret
  })
}

// Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.
function replaceStars (comp, options) {
  debug('replaceStars', comp, options)
  // Looseness is ignored here.  star is always as loose as it gets!
  return comp.trim().replace(re[STAR], '')
}

// This function is passed to string.replace(re[HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0
function hyphenReplace ($0,
  from, fM, fm, fp, fpr, fb,
  to, tM, tm, tp, tpr, tb) {
  if (isX(fM)) {
    from = ''
  } else if (isX(fm)) {
    from = '>=' + fM + '.0.0'
  } else if (isX(fp)) {
    from = '>=' + fM + '.' + fm + '.0'
  } else {
    from = '>=' + from
  }

  if (isX(tM)) {
    to = ''
  } else if (isX(tm)) {
    to = '<' + (+tM + 1) + '.0.0'
  } else if (isX(tp)) {
    to = '<' + tM + '.' + (+tm + 1) + '.0'
  } else if (tpr) {
    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr
  } else {
    to = '<=' + to
  }

  return (from + ' ' + to).trim()
}

// if ANY of the sets match ALL of its comparators, then pass
Range.prototype.test = function (version) {
  if (!version) {
    return false
  }

  if (typeof version === 'string') {
    version = new SemVer(version, this.options)
  }

  for (var i = 0; i < this.set.length; i++) {
    if (testSet(this.set[i], version, this.options)) {
      return true
    }
  }
  return false
}

function testSet (set, version, options) {
  for (var i = 0; i < set.length; i++) {
    if (!set[i].test(version)) {
      return false
    }
  }

  if (version.prerelease.length && !options.includePrerelease) {
    // Find the set of versions that are allowed to have prereleases
    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
    // That should allow `1.2.3-pr.2` to pass.
    // However, `1.2.4-alpha.notready` should NOT be allowed,
    // even though it's within the range set by the comparators.
    for (i = 0; i < set.length; i++) {
      debug(set[i].semver)
      if (set[i].semver === ANY) {
        continue
      }

      if (set[i].semver.prerelease.length > 0) {
        var allowed = set[i].semver
        if (allowed.major === version.major &&
            allowed.minor === version.minor &&
            allowed.patch === version.patch) {
          return true
        }
      }
    }

    // Version has a -pre, but it's not one of the ones we like.
    return false
  }

  return true
}

exports.satisfies = satisfies
function satisfies (version, range, options) {
  try {
    range = new Range(range, options)
  } catch (er) {
    return false
  }
  return range.test(version)
}

exports.maxSatisfying = maxSatisfying
function maxSatisfying (versions, range, options) {
  var max = null
  var maxSV = null
  try {
    var rangeObj = new Range(range, options)
  } catch (er) {
    return null
  }
  versions.forEach(function (v) {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!max || maxSV.compare(v) === -1) {
        // compare(max, v, true)
        max = v
        maxSV = new SemVer(max, options)
      }
    }
  })
  return max
}

exports.minSatisfying = minSatisfying
function minSatisfying (versions, range, options) {
  var min = null
  var minSV = null
  try {
    var rangeObj = new Range(range, options)
  } catch (er) {
    return null
  }
  versions.forEach(function (v) {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!min || minSV.compare(v) === 1) {
        // compare(min, v, true)
        min = v
        minSV = new SemVer(min, options)
      }
    }
  })
  return min
}

exports.minVersion = minVersion
function minVersion (range, loose) {
  range = new Range(range, loose)

  var minver = new SemVer('0.0.0')
  if (range.test(minver)) {
    return minver
  }

  minver = new SemVer('0.0.0-0')
  if (range.test(minver)) {
    return minver
  }

  minver = null
  for (var i = 0; i < range.set.length; ++i) {
    var comparators = range.set[i]

    comparators.forEach(function (comparator) {
      // Clone to avoid manipulating the comparator's semver object.
      var compver = new SemVer(comparator.semver.version)
      switch (comparator.operator) {
        case '>':
          if (compver.prerelease.length === 0) {
            compver.patch++
          } else {
            compver.prerelease.push(0)
          }
          compver.raw = compver.format()
          /* fallthrough */
        case '':
        case '>=':
          if (!minver || gt(minver, compver)) {
            minver = compver
          }
          break
        case '<':
        case '<=':
          /* Ignore maximum versions */
          break
        /* istanbul ignore next */
        default:
          throw new Error('Unexpected operation: ' + comparator.operator)
      }
    })
  }

  if (minver && range.test(minver)) {
    return minver
  }

  return null
}

exports.validRange = validRange
function validRange (range, options) {
  try {
    // Return '*' instead of '' so that truthiness works.
    // This will throw if it's invalid anyway
    return new Range(range, options).range || '*'
  } catch (er) {
    return null
  }
}

// Determine if version is less than all the versions possible in the range
exports.ltr = ltr
function ltr (version, range, options) {
  return outside(version, range, '<', options)
}

// Determine if version is greater than all the versions possible in the range.
exports.gtr = gtr
function gtr (version, range, options) {
  return outside(version, range, '>', options)
}

exports.outside = outside
function outside (version, range, hilo, options) {
  version = new SemVer(version, options)
  range = new Range(range, options)

  var gtfn, ltefn, ltfn, comp, ecomp
  switch (hilo) {
    case '>':
      gtfn = gt
      ltefn = lte
      ltfn = lt
      comp = '>'
      ecomp = '>='
      break
    case '<':
      gtfn = lt
      ltefn = gte
      ltfn = gt
      comp = '<'
      ecomp = '<='
      break
    default:
      throw new TypeError('Must provide a hilo val of "<" or ">"')
  }

  // If it satisifes the range it is not outside
  if (satisfies(version, range, options)) {
    return false
  }

  // From now on, variable terms are as if we're in "gtr" mode.
  // but note that everything is flipped for the "ltr" function.

  for (var i = 0; i < range.set.length; ++i) {
    var comparators = range.set[i]

    var high = null
    var low = null

    comparators.forEach(function (comparator) {
      if (comparator.semver === ANY) {
        comparator = new Comparator('>=0.0.0')
      }
      high = high || comparator
      low = low || comparator
      if (gtfn(comparator.semver, high.semver, options)) {
        high = comparator
      } else if (ltfn(comparator.semver, low.semver, options)) {
        low = comparator
      }
    })

    // If the edge version comparator has a operator then our version
    // isn't outside it
    if (high.operator === comp || high.operator === ecomp) {
      return false
    }

    // If the lowest version comparator has an operator and our version
    // is less than it then it isn't higher than the range
    if ((!low.operator || low.operator === comp) &&
        ltefn(version, low.semver)) {
      return false
    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
      return false
    }
  }
  return true
}

exports.prerelease = prerelease
function prerelease (version, options) {
  var parsed = parse(version, options)
  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null
}

exports.intersects = intersects
function intersects (r1, r2, options) {
  r1 = new Range(r1, options)
  r2 = new Range(r2, options)
  return r1.intersects(r2)
}

exports.coerce = coerce
function coerce (version) {
  if (version instanceof SemVer) {
    return version
  }

  if (typeof version !== 'string') {
    return null
  }

  var match = version.match(re[COERCE])

  if (match == null) {
    return null
  }

  return parse(match[1] +
    '.' + (match[2] || '0') +
    '.' + (match[3] || '0'))
}


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var elliptic = exports;

elliptic.version = __webpack_require__(175).version;
elliptic.utils = __webpack_require__(14);
elliptic.rand = __webpack_require__(52);
elliptic.curve = __webpack_require__(83);
elliptic.curves = __webpack_require__(59);

// Protocols
elliptic.ec = __webpack_require__(186);
elliptic.eddsa = __webpack_require__(190);


/***/ }),
/* 175 */
/***/ (function(module) {

module.exports = JSON.parse("{\"_args\":[[\"elliptic@6.5.2\",\"/Users/user/code/oikos/oikos-js\"]],\"_from\":\"elliptic@6.5.2\",\"_id\":\"elliptic@6.5.2\",\"_inBundle\":false,\"_integrity\":\"sha512-f4x70okzZbIQl/NSRLkI/+tteV/9WqL98zx+SQ69KbXxmVrmjwsNUPn/gYJJ0sHvEak24cZgHIPegRePAtA/xw==\",\"_location\":\"/elliptic\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"version\",\"registry\":true,\"raw\":\"elliptic@6.5.2\",\"name\":\"elliptic\",\"escapedName\":\"elliptic\",\"rawSpec\":\"6.5.2\",\"saveSpec\":null,\"fetchSpec\":\"6.5.2\"},\"_requiredBy\":[\"/@truffle/codec/eth-lib\",\"/browserify-sign\",\"/chainlink/ethers\",\"/create-ecdh\",\"/eth-lib\",\"/ethpm-registry/eth-lib\",\"/secp256k1\",\"/tronweb\",\"/truffle-contract/eth-lib\",\"/truffle-interface-adapter/ethers\",\"/web3-core-helpers/eth-lib\",\"/web3-core-method/eth-lib\",\"/web3-core/eth-lib\",\"/web3-eth-accounts/eth-lib\",\"/web3-eth-contract/eth-lib\",\"/web3-eth-ens/eth-lib\",\"/web3-eth-iban/eth-lib\",\"/web3-eth-personal/eth-lib\",\"/web3-eth/eth-lib\",\"/web3-net/eth-lib\",\"/web3-utils/eth-lib\",\"/web3/eth-lib\"],\"_resolved\":\"https://registry.npmjs.org/elliptic/-/elliptic-6.5.2.tgz\",\"_spec\":\"6.5.2\",\"_where\":\"/Users/user/code/oikos/oikos-js\",\"author\":{\"name\":\"Fedor Indutny\",\"email\":\"fedor@indutny.com\"},\"bugs\":{\"url\":\"https://github.com/indutny/elliptic/issues\"},\"dependencies\":{\"bn.js\":\"^4.4.0\",\"brorand\":\"^1.0.1\",\"hash.js\":\"^1.0.0\",\"hmac-drbg\":\"^1.0.0\",\"inherits\":\"^2.0.1\",\"minimalistic-assert\":\"^1.0.0\",\"minimalistic-crypto-utils\":\"^1.0.0\"},\"description\":\"EC cryptography\",\"devDependencies\":{\"brfs\":\"^1.4.3\",\"coveralls\":\"^3.0.8\",\"grunt\":\"^1.0.4\",\"grunt-browserify\":\"^5.0.0\",\"grunt-cli\":\"^1.2.0\",\"grunt-contrib-connect\":\"^1.0.0\",\"grunt-contrib-copy\":\"^1.0.0\",\"grunt-contrib-uglify\":\"^1.0.1\",\"grunt-mocha-istanbul\":\"^3.0.1\",\"grunt-saucelabs\":\"^9.0.1\",\"istanbul\":\"^0.4.2\",\"jscs\":\"^3.0.7\",\"jshint\":\"^2.10.3\",\"mocha\":\"^6.2.2\"},\"files\":[\"lib\"],\"homepage\":\"https://github.com/indutny/elliptic\",\"keywords\":[\"EC\",\"Elliptic\",\"curve\",\"Cryptography\"],\"license\":\"MIT\",\"main\":\"lib/elliptic.js\",\"name\":\"elliptic\",\"repository\":{\"type\":\"git\",\"url\":\"git+ssh://git@github.com/indutny/elliptic.git\"},\"scripts\":{\"jscs\":\"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js\",\"jshint\":\"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js\",\"lint\":\"npm run jscs && npm run jshint\",\"test\":\"npm run lint && npm run unit\",\"unit\":\"istanbul test _mocha --reporter=spec test/index.js\",\"version\":\"grunt dist && git add dist/\"},\"version\":\"6.5.2\"}");

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(14);
var BN = __webpack_require__(8);
var inherits = __webpack_require__(22);
var Base = __webpack_require__(47);

var assert = utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(8);
var inherits = __webpack_require__(22);
var Base = __webpack_require__(47);

var utils = __webpack_require__(14);

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(14);
var BN = __webpack_require__(8);
var inherits = __webpack_require__(22);
var Base = __webpack_require__(47);

var assert = utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.sha1 = __webpack_require__(180);
exports.sha224 = __webpack_require__(181);
exports.sha256 = __webpack_require__(85);
exports.sha384 = __webpack_require__(182);
exports.sha512 = __webpack_require__(86);


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(18);
var common = __webpack_require__(35);
var shaCommon = __webpack_require__(84);

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(18);
var SHA256 = __webpack_require__(85);

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};



/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(18);

var SHA512 = __webpack_require__(86);

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(18);
var common = __webpack_require__(35);

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(18);
var assert = __webpack_require__(13);

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};


/***/ }),
/* 185 */
/***/ (function(module, exports) {

module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(8);
var HmacDRBG = __webpack_require__(187);
var utils = __webpack_require__(14);
var curves = __webpack_require__(59);
var rand = __webpack_require__(52);
var assert = utils.assert;

var KeyPair = __webpack_require__(188);
var Signature = __webpack_require__(189);

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ?
        options.k(iter) :
        new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(60);
var utils = __webpack_require__(82);
var assert = __webpack_require__(13);

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(8);
var utils = __webpack_require__(14);
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(8);

var utils = __webpack_require__(14);
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }
  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0 && (r[1] & 0x80)) {
    r = r.slice(1);
  }
  if (s[0] === 0 && (s[1] & 0x80)) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(60);
var curves = __webpack_require__(59);
var utils = __webpack_require__(14);
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = __webpack_require__(191);
var Signature = __webpack_require__(192);

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  var curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
               .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(14);
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(8);
var utils = __webpack_require__(14);
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(194);

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(10);
var bind = __webpack_require__(87);
var Axios = __webpack_require__(195);
var mergeConfig = __webpack_require__(95);
var defaults = __webpack_require__(89);

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(96);
axios.CancelToken = __webpack_require__(219);
axios.isCancel = __webpack_require__(88);

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(220);

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(10);
var buildURL = __webpack_require__(61);
var InterceptorManager = __webpack_require__(196);
var dispatchRequest = __webpack_require__(197);
var mergeConfig = __webpack_require__(95);

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(10);

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(10);
var transformData = __webpack_require__(198);
var isCancel = __webpack_require__(88);
var defaults = __webpack_require__(89);

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(10);

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(10);

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(10);
var settle = __webpack_require__(90);
var buildURL = __webpack_require__(61);
var buildFullPath = __webpack_require__(92);
var parseHeaders = __webpack_require__(203);
var isURLSameOrigin = __webpack_require__(204);
var createError = __webpack_require__(62);

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request.onreadystatechange = function handleLoad() {
      if (!request || request.readyState !== 4) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies = __webpack_require__(205);

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(10);

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(10);

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(10);

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(10);
var settle = __webpack_require__(90);
var buildFullPath = __webpack_require__(92);
var buildURL = __webpack_require__(61);
var http = __webpack_require__(57);
var https = __webpack_require__(58);
var httpFollow = __webpack_require__(93).http;
var httpsFollow = __webpack_require__(93).https;
var url = __webpack_require__(56);
var zlib = __webpack_require__(217);
var pkg = __webpack_require__(218);
var createError = __webpack_require__(62);
var enhanceError = __webpack_require__(91);

var isHttps = /https:?/;

/*eslint consistent-return:0*/
module.exports = function httpAdapter(config) {
  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {
    var resolve = function resolve(value) {
      resolvePromise(value);
    };
    var reject = function reject(value) {
      rejectPromise(value);
    };
    var data = config.data;
    var headers = config.headers;

    // Set User-Agent (required by some servers)
    // Only set header if it hasn't been set in config
    // See https://github.com/axios/axios/issues/69
    if (!headers['User-Agent'] && !headers['user-agent']) {
      headers['User-Agent'] = 'axios/' + pkg.version;
    }

    if (data && !utils.isStream(data)) {
      if (Buffer.isBuffer(data)) {
        // Nothing to do...
      } else if (utils.isArrayBuffer(data)) {
        data = Buffer.from(new Uint8Array(data));
      } else if (utils.isString(data)) {
        data = Buffer.from(data, 'utf-8');
      } else {
        return reject(createError(
          'Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream',
          config
        ));
      }

      // Add Content-Length header if data exists
      headers['Content-Length'] = data.length;
    }

    // HTTP basic authentication
    var auth = undefined;
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      auth = username + ':' + password;
    }

    // Parse url
    var fullPath = buildFullPath(config.baseURL, config.url);
    var parsed = url.parse(fullPath);
    var protocol = parsed.protocol || 'http:';

    if (!auth && parsed.auth) {
      var urlAuth = parsed.auth.split(':');
      var urlUsername = urlAuth[0] || '';
      var urlPassword = urlAuth[1] || '';
      auth = urlUsername + ':' + urlPassword;
    }

    if (auth) {
      delete headers.Authorization;
    }

    var isHttpsRequest = isHttps.test(protocol);
    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;

    var options = {
      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\?/, ''),
      method: config.method.toUpperCase(),
      headers: headers,
      agent: agent,
      agents: { http: config.httpAgent, https: config.httpsAgent },
      auth: auth
    };

    if (config.socketPath) {
      options.socketPath = config.socketPath;
    } else {
      options.hostname = parsed.hostname;
      options.port = parsed.port;
    }

    var proxy = config.proxy;
    if (!proxy && proxy !== false) {
      var proxyEnv = protocol.slice(0, -1) + '_proxy';
      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];
      if (proxyUrl) {
        var parsedProxyUrl = url.parse(proxyUrl);
        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;
        var shouldProxy = true;

        if (noProxyEnv) {
          var noProxy = noProxyEnv.split(',').map(function trim(s) {
            return s.trim();
          });

          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {
            if (!proxyElement) {
              return false;
            }
            if (proxyElement === '*') {
              return true;
            }
            if (proxyElement[0] === '.' &&
                parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {
              return true;
            }

            return parsed.hostname === proxyElement;
          });
        }


        if (shouldProxy) {
          proxy = {
            host: parsedProxyUrl.hostname,
            port: parsedProxyUrl.port
          };

          if (parsedProxyUrl.auth) {
            var proxyUrlAuth = parsedProxyUrl.auth.split(':');
            proxy.auth = {
              username: proxyUrlAuth[0],
              password: proxyUrlAuth[1]
            };
          }
        }
      }
    }

    if (proxy) {
      options.hostname = proxy.host;
      options.host = proxy.host;
      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');
      options.port = proxy.port;
      options.path = protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path;

      // Basic proxy authorization
      if (proxy.auth) {
        var base64 = Buffer.from(proxy.auth.username + ':' + proxy.auth.password, 'utf8').toString('base64');
        options.headers['Proxy-Authorization'] = 'Basic ' + base64;
      }
    }

    var transport;
    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);
    if (config.transport) {
      transport = config.transport;
    } else if (config.maxRedirects === 0) {
      transport = isHttpsProxy ? https : http;
    } else {
      if (config.maxRedirects) {
        options.maxRedirects = config.maxRedirects;
      }
      transport = isHttpsProxy ? httpsFollow : httpFollow;
    }

    if (config.maxContentLength && config.maxContentLength > -1) {
      options.maxBodyLength = config.maxContentLength;
    }

    // Create the request
    var req = transport.request(options, function handleResponse(res) {
      if (req.aborted) return;

      // uncompress the response body transparently if required
      var stream = res;
      switch (res.headers['content-encoding']) {
      /*eslint default-case:0*/
      case 'gzip':
      case 'compress':
      case 'deflate':
        // add the unzipper to the body stream processing pipeline
        stream = (res.statusCode === 204) ? stream : stream.pipe(zlib.createUnzip());

        // remove the content-encoding in order to not confuse downstream operations
        delete res.headers['content-encoding'];
        break;
      }

      // return the last request in case of redirects
      var lastRequest = res.req || req;

      var response = {
        status: res.statusCode,
        statusText: res.statusMessage,
        headers: res.headers,
        config: config,
        request: lastRequest
      };

      if (config.responseType === 'stream') {
        response.data = stream;
        settle(resolve, reject, response);
      } else {
        var responseBuffer = [];
        stream.on('data', function handleStreamData(chunk) {
          responseBuffer.push(chunk);

          // make sure the content length is not over the maxContentLength if specified
          if (config.maxContentLength > -1 && Buffer.concat(responseBuffer).length > config.maxContentLength) {
            stream.destroy();
            reject(createError('maxContentLength size of ' + config.maxContentLength + ' exceeded',
              config, null, lastRequest));
          }
        });

        stream.on('error', function handleStreamError(err) {
          if (req.aborted) return;
          reject(enhanceError(err, config, null, lastRequest));
        });

        stream.on('end', function handleStreamEnd() {
          var responseData = Buffer.concat(responseBuffer);
          if (config.responseType !== 'arraybuffer') {
            responseData = responseData.toString(config.responseEncoding);
          }

          response.data = responseData;
          settle(resolve, reject, response);
        });
      }
    });

    // Handle errors
    req.on('error', function handleRequestError(err) {
      if (req.aborted) return;
      reject(enhanceError(err, config, null, req));
    });

    // Handle request timeout
    if (config.timeout) {
      // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.
      // And timer callback will be fired, and abort() will be invoked before connection, then get "socket hang up" and code ECONNRESET.
      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.
      // And then these socket which be hang up will devoring CPU little by little.
      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.
      req.setTimeout(config.timeout, function handleRequestTimeout() {
        req.abort();
        reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED', req));
      });
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (req.aborted) return;

        req.abort();
        reject(cancel);
      });
    }

    // Send the request
    if (utils.isStream(data)) {
      data.on('error', function handleStreamError(err) {
        reject(enhanceError(err, config, null, req));
      }).pipe(req);
    } else {
      req.end(data);
    }
  });
};


/***/ }),
/* 207 */
/***/ (function(module, exports) {

module.exports = require("assert");

/***/ }),
/* 208 */
/***/ (function(module, exports) {

module.exports = require("stream");

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Detect Electron renderer process, which is node, but we should
 * treat as a browser.
 */

if (typeof process === 'undefined' || process.type === 'renderer') {
  module.exports = __webpack_require__(210);
} else {
  module.exports = __webpack_require__(212);
}


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(94);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // Internet Explorer and Edge do not support colors.
  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}


/***/ }),
/* 211 */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */

var tty = __webpack_require__(213);
var util = __webpack_require__(76);

/**
 * This is the Node.js implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(94);
exports.init = init;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;

/**
 * Colors.
 */

exports.colors = [ 6, 2, 3, 4, 5, 1 ];

try {
  var supportsColor = __webpack_require__(214);
  if (supportsColor && supportsColor.level >= 2) {
    exports.colors = [
      20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68,
      69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134,
      135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
      172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204,
      205, 206, 207, 208, 209, 214, 215, 220, 221
    ];
  }
} catch (err) {
  // swallow - we only care if `supports-color` is available; it doesn't have to be.
}

/**
 * Build up the default `inspectOpts` object from the environment variables.
 *
 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
 */

exports.inspectOpts = Object.keys(process.env).filter(function (key) {
  return /^debug_/i.test(key);
}).reduce(function (obj, key) {
  // camel-case
  var prop = key
    .substring(6)
    .toLowerCase()
    .replace(/_([a-z])/g, function (_, k) { return k.toUpperCase() });

  // coerce string value into JS value
  var val = process.env[key];
  if (/^(yes|on|true|enabled)$/i.test(val)) val = true;
  else if (/^(no|off|false|disabled)$/i.test(val)) val = false;
  else if (val === 'null') val = null;
  else val = Number(val);

  obj[prop] = val;
  return obj;
}, {});

/**
 * Is stdout a TTY? Colored output is enabled when `true`.
 */

function useColors() {
  return 'colors' in exports.inspectOpts
    ? Boolean(exports.inspectOpts.colors)
    : tty.isatty(process.stderr.fd);
}

/**
 * Map %o to `util.inspect()`, all on a single line.
 */

exports.formatters.o = function(v) {
  this.inspectOpts.colors = this.useColors;
  return util.inspect(v, this.inspectOpts)
    .split('\n').map(function(str) {
      return str.trim()
    }).join(' ');
};

/**
 * Map %o to `util.inspect()`, allowing multiple lines if needed.
 */

exports.formatters.O = function(v) {
  this.inspectOpts.colors = this.useColors;
  return util.inspect(v, this.inspectOpts);
};

/**
 * Adds ANSI color escape codes if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var name = this.namespace;
  var useColors = this.useColors;

  if (useColors) {
    var c = this.color;
    var colorCode = '\u001b[3' + (c < 8 ? c : '8;5;' + c);
    var prefix = '  ' + colorCode + ';1m' + name + ' ' + '\u001b[0m';

    args[0] = prefix + args[0].split('\n').join('\n' + prefix);
    args.push(colorCode + 'm+' + exports.humanize(this.diff) + '\u001b[0m');
  } else {
    args[0] = getDate() + name + ' ' + args[0];
  }
}

function getDate() {
  if (exports.inspectOpts.hideDate) {
    return '';
  } else {
    return new Date().toISOString() + ' ';
  }
}

/**
 * Invokes `util.format()` with the specified arguments and writes to stderr.
 */

function log() {
  return process.stderr.write(util.format.apply(util, arguments) + '\n');
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  if (null == namespaces) {
    // If you set a process.env field to null or undefined, it gets cast to the
    // string 'null' or 'undefined'. Just delete instead.
    delete process.env.DEBUG;
  } else {
    process.env.DEBUG = namespaces;
  }
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  return process.env.DEBUG;
}

/**
 * Init logic for `debug` instances.
 *
 * Create a new `inspectOpts` object in case `useColors` is set
 * differently for a particular `debug` instance.
 */

function init (debug) {
  debug.inspectOpts = {};

  var keys = Object.keys(exports.inspectOpts);
  for (var i = 0; i < keys.length; i++) {
    debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
  }
}

/**
 * Enable namespaces listed in `process.env.DEBUG` initially.
 */

exports.enable(load());


/***/ }),
/* 213 */
/***/ (function(module, exports) {

module.exports = require("tty");

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

const os = __webpack_require__(215);
const hasFlag = __webpack_require__(216);

const env = process.env;

let forceColor;
if (hasFlag('no-color') ||
	hasFlag('no-colors') ||
	hasFlag('color=false')) {
	forceColor = false;
} else if (hasFlag('color') ||
	hasFlag('colors') ||
	hasFlag('color=true') ||
	hasFlag('color=always')) {
	forceColor = true;
}
if ('FORCE_COLOR' in env) {
	forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
}

function translateLevel(level) {
	if (level === 0) {
		return false;
	}

	return {
		level,
		hasBasic: true,
		has256: level >= 2,
		has16m: level >= 3
	};
}

function supportsColor(stream) {
	if (forceColor === false) {
		return 0;
	}

	if (hasFlag('color=16m') ||
		hasFlag('color=full') ||
		hasFlag('color=truecolor')) {
		return 3;
	}

	if (hasFlag('color=256')) {
		return 2;
	}

	if (stream && !stream.isTTY && forceColor !== true) {
		return 0;
	}

	const min = forceColor ? 1 : 0;

	if (process.platform === 'win32') {
		// Node.js 7.5.0 is the first version of Node.js to include a patch to
		// libuv that enables 256 color output on Windows. Anything earlier and it
		// won't work. However, here we target Node.js 8 at minimum as it is an LTS
		// release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows
		// release that supports 256 colors. Windows 10 build 14931 is the first release
		// that supports 16m/TrueColor.
		const osRelease = os.release().split('.');
		if (
			Number(process.versions.node.split('.')[0]) >= 8 &&
			Number(osRelease[0]) >= 10 &&
			Number(osRelease[2]) >= 10586
		) {
			return Number(osRelease[2]) >= 14931 ? 3 : 2;
		}

		return 1;
	}

	if ('CI' in env) {
		if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
			return 1;
		}

		return min;
	}

	if ('TEAMCITY_VERSION' in env) {
		return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
	}

	if (env.COLORTERM === 'truecolor') {
		return 3;
	}

	if ('TERM_PROGRAM' in env) {
		const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

		switch (env.TERM_PROGRAM) {
			case 'iTerm.app':
				return version >= 3 ? 3 : 2;
			case 'Apple_Terminal':
				return 2;
			// No default
		}
	}

	if (/-256(color)?$/i.test(env.TERM)) {
		return 2;
	}

	if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
		return 1;
	}

	if ('COLORTERM' in env) {
		return 1;
	}

	if (env.TERM === 'dumb') {
		return min;
	}

	return min;
}

function getSupportLevel(stream) {
	const level = supportsColor(stream);
	return translateLevel(level);
}

module.exports = {
	supportsColor: getSupportLevel,
	stdout: getSupportLevel(process.stdout),
	stderr: getSupportLevel(process.stderr)
};


/***/ }),
/* 215 */
/***/ (function(module, exports) {

module.exports = require("os");

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = (flag, argv) => {
	argv = argv || process.argv;
	const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
	const pos = argv.indexOf(prefix + flag);
	const terminatorPos = argv.indexOf('--');
	return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
};


/***/ }),
/* 217 */
/***/ (function(module, exports) {

module.exports = require("zlib");

/***/ }),
/* 218 */
/***/ (function(module) {

module.exports = JSON.parse("{\"_args\":[[\"axios@0.19.2\",\"/Users/user/code/oikos/oikos-js\"]],\"_from\":\"axios@0.19.2\",\"_id\":\"axios@0.19.2\",\"_inBundle\":false,\"_integrity\":\"sha512-fjgm5MvRHLhx+osE2xoekY70AhARk3a6hkN+3Io1jc00jtquGvxYlKlsFUhmUET0V5te6CcZI7lcv2Ym61mjHA==\",\"_location\":\"/tronweb/axios\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"version\",\"registry\":true,\"raw\":\"axios@0.19.2\",\"name\":\"axios\",\"escapedName\":\"axios\",\"rawSpec\":\"0.19.2\",\"saveSpec\":null,\"fetchSpec\":\"0.19.2\"},\"_requiredBy\":[\"/tronweb\"],\"_resolved\":\"https://registry.npmjs.org/axios/-/axios-0.19.2.tgz\",\"_spec\":\"0.19.2\",\"_where\":\"/Users/user/code/oikos/oikos-js\",\"author\":{\"name\":\"Matt Zabriskie\"},\"browser\":{\"./lib/adapters/http.js\":\"./lib/adapters/xhr.js\"},\"bugs\":{\"url\":\"https://github.com/axios/axios/issues\"},\"bundlesize\":[{\"path\":\"./dist/axios.min.js\",\"threshold\":\"5kB\"}],\"dependencies\":{\"follow-redirects\":\"1.5.10\"},\"description\":\"Promise based HTTP client for the browser and node.js\",\"devDependencies\":{\"bundlesize\":\"^0.17.0\",\"coveralls\":\"^3.0.0\",\"es6-promise\":\"^4.2.4\",\"grunt\":\"^1.0.2\",\"grunt-banner\":\"^0.6.0\",\"grunt-cli\":\"^1.2.0\",\"grunt-contrib-clean\":\"^1.1.0\",\"grunt-contrib-watch\":\"^1.0.0\",\"grunt-eslint\":\"^20.1.0\",\"grunt-karma\":\"^2.0.0\",\"grunt-mocha-test\":\"^0.13.3\",\"grunt-ts\":\"^6.0.0-beta.19\",\"grunt-webpack\":\"^1.0.18\",\"istanbul-instrumenter-loader\":\"^1.0.0\",\"jasmine-core\":\"^2.4.1\",\"karma\":\"^1.3.0\",\"karma-chrome-launcher\":\"^2.2.0\",\"karma-coverage\":\"^1.1.1\",\"karma-firefox-launcher\":\"^1.1.0\",\"karma-jasmine\":\"^1.1.1\",\"karma-jasmine-ajax\":\"^0.1.13\",\"karma-opera-launcher\":\"^1.0.0\",\"karma-safari-launcher\":\"^1.0.0\",\"karma-sauce-launcher\":\"^1.2.0\",\"karma-sinon\":\"^1.0.5\",\"karma-sourcemap-loader\":\"^0.3.7\",\"karma-webpack\":\"^1.7.0\",\"load-grunt-tasks\":\"^3.5.2\",\"minimist\":\"^1.2.0\",\"mocha\":\"^5.2.0\",\"sinon\":\"^4.5.0\",\"typescript\":\"^2.8.1\",\"url-search-params\":\"^0.10.0\",\"webpack\":\"^1.13.1\",\"webpack-dev-server\":\"^1.14.1\"},\"homepage\":\"https://github.com/axios/axios\",\"keywords\":[\"xhr\",\"http\",\"ajax\",\"promise\",\"node\"],\"license\":\"MIT\",\"main\":\"index.js\",\"name\":\"axios\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/axios/axios.git\"},\"scripts\":{\"build\":\"NODE_ENV=production grunt build\",\"coveralls\":\"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js\",\"examples\":\"node ./examples/server.js\",\"fix\":\"eslint --fix lib/**/*.js\",\"postversion\":\"git push && git push --tags\",\"preversion\":\"npm test\",\"start\":\"node ./sandbox/server.js\",\"test\":\"grunt test && bundlesize\",\"version\":\"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json\"},\"typings\":\"./index.d.ts\",\"version\":\"0.19.2\"}");

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__(96);

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toDate = _interopRequireDefault(__webpack_require__(63));

var _toFloat = _interopRequireDefault(__webpack_require__(97));

var _toInt = _interopRequireDefault(__webpack_require__(222));

var _toBoolean = _interopRequireDefault(__webpack_require__(223));

var _equals = _interopRequireDefault(__webpack_require__(224));

var _contains = _interopRequireDefault(__webpack_require__(225));

var _matches = _interopRequireDefault(__webpack_require__(226));

var _isEmail = _interopRequireDefault(__webpack_require__(227));

var _isURL = _interopRequireDefault(__webpack_require__(228));

var _isMACAddress = _interopRequireDefault(__webpack_require__(229));

var _isIP = _interopRequireDefault(__webpack_require__(48));

var _isIPRange = _interopRequireDefault(__webpack_require__(230));

var _isFQDN = _interopRequireDefault(__webpack_require__(65));

var _isBoolean = _interopRequireDefault(__webpack_require__(231));

var _isAlpha = _interopRequireWildcard(__webpack_require__(232));

var _isAlphanumeric = _interopRequireWildcard(__webpack_require__(233));

var _isNumeric = _interopRequireDefault(__webpack_require__(234));

var _isPort = _interopRequireDefault(__webpack_require__(235));

var _isLowercase = _interopRequireDefault(__webpack_require__(236));

var _isUppercase = _interopRequireDefault(__webpack_require__(237));

var _isAscii = _interopRequireDefault(__webpack_require__(238));

var _isFullWidth = _interopRequireDefault(__webpack_require__(100));

var _isHalfWidth = _interopRequireDefault(__webpack_require__(101));

var _isVariableWidth = _interopRequireDefault(__webpack_require__(239));

var _isMultibyte = _interopRequireDefault(__webpack_require__(240));

var _isSurrogatePair = _interopRequireDefault(__webpack_require__(241));

var _isInt = _interopRequireDefault(__webpack_require__(99));

var _isFloat = _interopRequireWildcard(__webpack_require__(242));

var _isDecimal = _interopRequireDefault(__webpack_require__(243));

var _isHexadecimal = _interopRequireDefault(__webpack_require__(102));

var _isDivisibleBy = _interopRequireDefault(__webpack_require__(244));

var _isHexColor = _interopRequireDefault(__webpack_require__(245));

var _isISRC = _interopRequireDefault(__webpack_require__(246));

var _isMD = _interopRequireDefault(__webpack_require__(247));

var _isHash = _interopRequireDefault(__webpack_require__(248));

var _isJWT = _interopRequireDefault(__webpack_require__(249));

var _isJSON = _interopRequireDefault(__webpack_require__(250));

var _isEmpty = _interopRequireDefault(__webpack_require__(251));

var _isLength = _interopRequireDefault(__webpack_require__(252));

var _isByteLength = _interopRequireDefault(__webpack_require__(98));

var _isUUID = _interopRequireDefault(__webpack_require__(253));

var _isMongoId = _interopRequireDefault(__webpack_require__(254));

var _isAfter = _interopRequireDefault(__webpack_require__(255));

var _isBefore = _interopRequireDefault(__webpack_require__(256));

var _isIn = _interopRequireDefault(__webpack_require__(257));

var _isCreditCard = _interopRequireDefault(__webpack_require__(258));

var _isIdentityCard = _interopRequireDefault(__webpack_require__(259));

var _isISIN = _interopRequireDefault(__webpack_require__(260));

var _isISBN = _interopRequireDefault(__webpack_require__(261));

var _isISSN = _interopRequireDefault(__webpack_require__(262));

var _isMobilePhone = _interopRequireWildcard(__webpack_require__(263));

var _isCurrency = _interopRequireDefault(__webpack_require__(264));

var _isISO = _interopRequireDefault(__webpack_require__(265));

var _isRFC = _interopRequireDefault(__webpack_require__(266));

var _isISO31661Alpha = _interopRequireDefault(__webpack_require__(267));

var _isISO31661Alpha2 = _interopRequireDefault(__webpack_require__(268));

var _isBase = _interopRequireDefault(__webpack_require__(269));

var _isDataURI = _interopRequireDefault(__webpack_require__(270));

var _isMagnetURI = _interopRequireDefault(__webpack_require__(271));

var _isMimeType = _interopRequireDefault(__webpack_require__(272));

var _isLatLong = _interopRequireDefault(__webpack_require__(273));

var _isPostalCode = _interopRequireWildcard(__webpack_require__(274));

var _ltrim = _interopRequireDefault(__webpack_require__(103));

var _rtrim = _interopRequireDefault(__webpack_require__(104));

var _trim = _interopRequireDefault(__webpack_require__(275));

var _escape = _interopRequireDefault(__webpack_require__(276));

var _unescape = _interopRequireDefault(__webpack_require__(277));

var _stripLow = _interopRequireDefault(__webpack_require__(278));

var _whitelist = _interopRequireDefault(__webpack_require__(279));

var _blacklist = _interopRequireDefault(__webpack_require__(105));

var _isWhitelisted = _interopRequireDefault(__webpack_require__(280));

var _normalizeEmail = _interopRequireDefault(__webpack_require__(281));

var _toString = _interopRequireDefault(__webpack_require__(64));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var version = '10.11.0';
var validator = {
  version: version,
  toDate: _toDate.default,
  toFloat: _toFloat.default,
  toInt: _toInt.default,
  toBoolean: _toBoolean.default,
  equals: _equals.default,
  contains: _contains.default,
  matches: _matches.default,
  isEmail: _isEmail.default,
  isURL: _isURL.default,
  isMACAddress: _isMACAddress.default,
  isIP: _isIP.default,
  isIPRange: _isIPRange.default,
  isFQDN: _isFQDN.default,
  isBoolean: _isBoolean.default,
  isAlpha: _isAlpha.default,
  isAlphaLocales: _isAlpha.locales,
  isAlphanumeric: _isAlphanumeric.default,
  isAlphanumericLocales: _isAlphanumeric.locales,
  isNumeric: _isNumeric.default,
  isPort: _isPort.default,
  isLowercase: _isLowercase.default,
  isUppercase: _isUppercase.default,
  isAscii: _isAscii.default,
  isFullWidth: _isFullWidth.default,
  isHalfWidth: _isHalfWidth.default,
  isVariableWidth: _isVariableWidth.default,
  isMultibyte: _isMultibyte.default,
  isSurrogatePair: _isSurrogatePair.default,
  isInt: _isInt.default,
  isFloat: _isFloat.default,
  isFloatLocales: _isFloat.locales,
  isDecimal: _isDecimal.default,
  isHexadecimal: _isHexadecimal.default,
  isDivisibleBy: _isDivisibleBy.default,
  isHexColor: _isHexColor.default,
  isISRC: _isISRC.default,
  isMD5: _isMD.default,
  isHash: _isHash.default,
  isJWT: _isJWT.default,
  isJSON: _isJSON.default,
  isEmpty: _isEmpty.default,
  isLength: _isLength.default,
  isByteLength: _isByteLength.default,
  isUUID: _isUUID.default,
  isMongoId: _isMongoId.default,
  isAfter: _isAfter.default,
  isBefore: _isBefore.default,
  isIn: _isIn.default,
  isCreditCard: _isCreditCard.default,
  isIdentityCard: _isIdentityCard.default,
  isISIN: _isISIN.default,
  isISBN: _isISBN.default,
  isISSN: _isISSN.default,
  isMobilePhone: _isMobilePhone.default,
  isMobilePhoneLocales: _isMobilePhone.locales,
  isPostalCode: _isPostalCode.default,
  isPostalCodeLocales: _isPostalCode.locales,
  isCurrency: _isCurrency.default,
  isISO8601: _isISO.default,
  isRFC3339: _isRFC.default,
  isISO31661Alpha2: _isISO31661Alpha.default,
  isISO31661Alpha3: _isISO31661Alpha2.default,
  isBase64: _isBase.default,
  isDataURI: _isDataURI.default,
  isMagnetURI: _isMagnetURI.default,
  isMimeType: _isMimeType.default,
  isLatLong: _isLatLong.default,
  ltrim: _ltrim.default,
  rtrim: _rtrim.default,
  trim: _trim.default,
  escape: _escape.default,
  unescape: _unescape.default,
  stripLow: _stripLow.default,
  whitelist: _whitelist.default,
  blacklist: _blacklist.default,
  isWhitelisted: _isWhitelisted.default,
  normalizeEmail: _normalizeEmail.default,
  toString: _toString.default
};
var _default = validator;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = toInt;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function toInt(str, radix) {
  (0, _assertString.default)(str);
  return parseInt(str, radix || 10);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = toBoolean;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function toBoolean(str, strict) {
  (0, _assertString.default)(str);

  if (strict) {
    return str === '1' || str === 'true';
  }

  return str !== '0' && str !== 'false' && str !== '';
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = equals;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function equals(str, comparison) {
  (0, _assertString.default)(str);
  return str === comparison;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = contains;

var _assertString = _interopRequireDefault(__webpack_require__(3));

var _toString = _interopRequireDefault(__webpack_require__(64));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function contains(str, elem) {
  (0, _assertString.default)(str);
  return str.indexOf((0, _toString.default)(elem)) >= 0;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = matches;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function matches(str, pattern, modifiers) {
  (0, _assertString.default)(str);

  if (Object.prototype.toString.call(pattern) !== '[object RegExp]') {
    pattern = new RegExp(pattern, modifiers);
  }

  return pattern.test(str);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isEmail;

var _assertString = _interopRequireDefault(__webpack_require__(3));

var _merge = _interopRequireDefault(__webpack_require__(26));

var _isByteLength = _interopRequireDefault(__webpack_require__(98));

var _isFQDN = _interopRequireDefault(__webpack_require__(65));

var _isIP = _interopRequireDefault(__webpack_require__(48));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var default_email_options = {
  allow_display_name: false,
  require_display_name: false,
  allow_utf8_local_part: true,
  require_tld: true
};
/* eslint-disable max-len */

/* eslint-disable no-control-regex */

var displayName = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\.\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\,\.\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF\s]*<(.+)>$/i;
var emailUserPart = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~]+$/i;
var gmailUserPart = /^[a-z\d]+$/;
var quotedEmailUser = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f]))*$/i;
var emailUserUtf8Part = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+$/i;
var quotedEmailUserUtf8 = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*$/i;
/* eslint-enable max-len */

/* eslint-enable no-control-regex */

function isEmail(str, options) {
  (0, _assertString.default)(str);
  options = (0, _merge.default)(options, default_email_options);

  if (options.require_display_name || options.allow_display_name) {
    var display_email = str.match(displayName);

    if (display_email) {
      str = display_email[1];
    } else if (options.require_display_name) {
      return false;
    }
  }

  var parts = str.split('@');
  var domain = parts.pop();
  var user = parts.join('@');
  var lower_domain = domain.toLowerCase();

  if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {
    /*
      Previously we removed dots for gmail addresses before validating.
      This was removed because it allows `multiple..dots@gmail.com`
      to be reported as valid, but it is not.
      Gmail only normalizes single dots, removing them from here is pointless,
      should be done in normalizeEmail
    */
    user = user.toLowerCase(); // Removing sub-address from username before gmail validation

    var username = user.split('+')[0]; // Dots are not included in gmail length restriction

    if (!(0, _isByteLength.default)(username.replace('.', ''), {
      min: 6,
      max: 30
    })) {
      return false;
    }

    var _user_parts = username.split('.');

    for (var i = 0; i < _user_parts.length; i++) {
      if (!gmailUserPart.test(_user_parts[i])) {
        return false;
      }
    }
  }

  if (!(0, _isByteLength.default)(user, {
    max: 64
  }) || !(0, _isByteLength.default)(domain, {
    max: 254
  })) {
    return false;
  }

  if (!(0, _isFQDN.default)(domain, {
    require_tld: options.require_tld
  })) {
    if (!options.allow_ip_domain) {
      return false;
    }

    if (!(0, _isIP.default)(domain)) {
      if (!domain.startsWith('[') || !domain.endsWith(']')) {
        return false;
      }

      var noBracketdomain = domain.substr(1, domain.length - 2);

      if (noBracketdomain.length === 0 || !(0, _isIP.default)(noBracketdomain)) {
        return false;
      }
    }
  }

  if (user[0] === '"') {
    user = user.slice(1, user.length - 1);
    return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);
  }

  var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;
  var user_parts = user.split('.');

  for (var _i = 0; _i < user_parts.length; _i++) {
    if (!pattern.test(user_parts[_i])) {
      return false;
    }
  }

  return true;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isURL;

var _assertString = _interopRequireDefault(__webpack_require__(3));

var _isFQDN = _interopRequireDefault(__webpack_require__(65));

var _isIP = _interopRequireDefault(__webpack_require__(48));

var _merge = _interopRequireDefault(__webpack_require__(26));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var default_url_options = {
  protocols: ['http', 'https', 'ftp'],
  require_tld: true,
  require_protocol: false,
  require_host: true,
  require_valid_protocol: true,
  allow_underscores: false,
  allow_trailing_dot: false,
  allow_protocol_relative_urls: false
};
var wrapped_ipv6 = /^\[([^\]]+)\](?::([0-9]+))?$/;

function isRegExp(obj) {
  return Object.prototype.toString.call(obj) === '[object RegExp]';
}

function checkHost(host, matches) {
  for (var i = 0; i < matches.length; i++) {
    var match = matches[i];

    if (host === match || isRegExp(match) && match.test(host)) {
      return true;
    }
  }

  return false;
}

function isURL(url, options) {
  (0, _assertString.default)(url);

  if (!url || url.length >= 2083 || /[\s<>]/.test(url)) {
    return false;
  }

  if (url.indexOf('mailto:') === 0) {
    return false;
  }

  options = (0, _merge.default)(options, default_url_options);
  var protocol, auth, host, hostname, port, port_str, split, ipv6;
  split = url.split('#');
  url = split.shift();
  split = url.split('?');
  url = split.shift();
  split = url.split('://');

  if (split.length > 1) {
    protocol = split.shift().toLowerCase();

    if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {
      return false;
    }
  } else if (options.require_protocol) {
    return false;
  } else if (url.substr(0, 2) === '//') {
    if (!options.allow_protocol_relative_urls) {
      return false;
    }

    split[0] = url.substr(2);
  }

  url = split.join('://');

  if (url === '') {
    return false;
  }

  split = url.split('/');
  url = split.shift();

  if (url === '' && !options.require_host) {
    return true;
  }

  split = url.split('@');

  if (split.length > 1) {
    if (options.disallow_auth) {
      return false;
    }

    auth = split.shift();

    if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {
      return false;
    }
  }

  hostname = split.join('@');
  port_str = null;
  ipv6 = null;
  var ipv6_match = hostname.match(wrapped_ipv6);

  if (ipv6_match) {
    host = '';
    ipv6 = ipv6_match[1];
    port_str = ipv6_match[2] || null;
  } else {
    split = hostname.split(':');
    host = split.shift();

    if (split.length) {
      port_str = split.join(':');
    }
  }

  if (port_str !== null) {
    port = parseInt(port_str, 10);

    if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {
      return false;
    }
  }

  if (!(0, _isIP.default)(host) && !(0, _isFQDN.default)(host, options) && (!ipv6 || !(0, _isIP.default)(ipv6, 6))) {
    return false;
  }

  host = host || ipv6;

  if (options.host_whitelist && !checkHost(host, options.host_whitelist)) {
    return false;
  }

  if (options.host_blacklist && checkHost(host, options.host_blacklist)) {
    return false;
  }

  return true;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isMACAddress;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var macAddress = /^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$/;
var macAddressNoColons = /^([0-9a-fA-F]){12}$/;

function isMACAddress(str, options) {
  (0, _assertString.default)(str);

  if (options && options.no_colons) {
    return macAddressNoColons.test(str);
  }

  return macAddress.test(str);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isIPRange;

var _assertString = _interopRequireDefault(__webpack_require__(3));

var _isIP = _interopRequireDefault(__webpack_require__(48));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var subnetMaybe = /^\d{1,2}$/;

function isIPRange(str) {
  (0, _assertString.default)(str);
  var parts = str.split('/'); // parts[0] -> ip, parts[1] -> subnet

  if (parts.length !== 2) {
    return false;
  }

  if (!subnetMaybe.test(parts[1])) {
    return false;
  } // Disallow preceding 0 i.e. 01, 02, ...


  if (parts[1].length > 1 && parts[1].startsWith('0')) {
    return false;
  }

  return (0, _isIP.default)(parts[0], 4) && parts[1] <= 32 && parts[1] >= 0;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isBoolean;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isBoolean(str) {
  (0, _assertString.default)(str);
  return ['true', 'false', '1', '0'].indexOf(str) >= 0;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isAlpha;
exports.locales = void 0;

var _assertString = _interopRequireDefault(__webpack_require__(3));

var _alpha = __webpack_require__(49);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isAlpha(str) {
  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';
  (0, _assertString.default)(str);

  if (locale in _alpha.alpha) {
    return _alpha.alpha[locale].test(str);
  }

  throw new Error("Invalid locale '".concat(locale, "'"));
}

var locales = Object.keys(_alpha.alpha);
exports.locales = locales;

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isAlphanumeric;
exports.locales = void 0;

var _assertString = _interopRequireDefault(__webpack_require__(3));

var _alpha = __webpack_require__(49);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isAlphanumeric(str) {
  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';
  (0, _assertString.default)(str);

  if (locale in _alpha.alphanumeric) {
    return _alpha.alphanumeric[locale].test(str);
  }

  throw new Error("Invalid locale '".concat(locale, "'"));
}

var locales = Object.keys(_alpha.alphanumeric);
exports.locales = locales;

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isNumeric;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var numeric = /^[+-]?([0-9]*[.])?[0-9]+$/;
var numericNoSymbols = /^[0-9]+$/;

function isNumeric(str, options) {
  (0, _assertString.default)(str);

  if (options && options.no_symbols) {
    return numericNoSymbols.test(str);
  }

  return numeric.test(str);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isPort;

var _isInt = _interopRequireDefault(__webpack_require__(99));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isPort(str) {
  return (0, _isInt.default)(str, {
    min: 0,
    max: 65535
  });
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isLowercase;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isLowercase(str) {
  (0, _assertString.default)(str);
  return str === str.toLowerCase();
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isUppercase;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isUppercase(str) {
  (0, _assertString.default)(str);
  return str === str.toUpperCase();
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isAscii;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-control-regex */
var ascii = /^[\x00-\x7F]+$/;
/* eslint-enable no-control-regex */

function isAscii(str) {
  (0, _assertString.default)(str);
  return ascii.test(str);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isVariableWidth;

var _assertString = _interopRequireDefault(__webpack_require__(3));

var _isFullWidth = __webpack_require__(100);

var _isHalfWidth = __webpack_require__(101);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isVariableWidth(str) {
  (0, _assertString.default)(str);
  return _isFullWidth.fullWidth.test(str) && _isHalfWidth.halfWidth.test(str);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isMultibyte;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-control-regex */
var multibyte = /[^\x00-\x7F]/;
/* eslint-enable no-control-regex */

function isMultibyte(str) {
  (0, _assertString.default)(str);
  return multibyte.test(str);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isSurrogatePair;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var surrogatePair = /[\uD800-\uDBFF][\uDC00-\uDFFF]/;

function isSurrogatePair(str) {
  (0, _assertString.default)(str);
  return surrogatePair.test(str);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isFloat;
exports.locales = void 0;

var _assertString = _interopRequireDefault(__webpack_require__(3));

var _alpha = __webpack_require__(49);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isFloat(str, options) {
  (0, _assertString.default)(str);
  options = options || {};
  var float = new RegExp("^(?:[-+])?(?:[0-9]+)?(?:\\".concat(options.locale ? _alpha.decimal[options.locale] : '.', "[0-9]*)?(?:[eE][\\+\\-]?(?:[0-9]+))?$"));

  if (str === '' || str === '.' || str === '-' || str === '+') {
    return false;
  }

  var value = parseFloat(str.replace(',', '.'));
  return float.test(str) && (!options.hasOwnProperty('min') || value >= options.min) && (!options.hasOwnProperty('max') || value <= options.max) && (!options.hasOwnProperty('lt') || value < options.lt) && (!options.hasOwnProperty('gt') || value > options.gt);
}

var locales = Object.keys(_alpha.decimal);
exports.locales = locales;

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isDecimal;

var _merge = _interopRequireDefault(__webpack_require__(26));

var _assertString = _interopRequireDefault(__webpack_require__(3));

var _includes = _interopRequireDefault(__webpack_require__(66));

var _alpha = __webpack_require__(49);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function decimalRegExp(options) {
  var regExp = new RegExp("^[-+]?([0-9]+)?(\\".concat(_alpha.decimal[options.locale], "[0-9]{").concat(options.decimal_digits, "})").concat(options.force_decimal ? '' : '?', "$"));
  return regExp;
}

var default_decimal_options = {
  force_decimal: false,
  decimal_digits: '1,',
  locale: 'en-US'
};
var blacklist = ['', '-', '+'];

function isDecimal(str, options) {
  (0, _assertString.default)(str);
  options = (0, _merge.default)(options, default_decimal_options);

  if (options.locale in _alpha.decimal) {
    return !(0, _includes.default)(blacklist, str.replace(/ /g, '')) && decimalRegExp(options).test(str);
  }

  throw new Error("Invalid locale '".concat(options.locale, "'"));
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isDivisibleBy;

var _assertString = _interopRequireDefault(__webpack_require__(3));

var _toFloat = _interopRequireDefault(__webpack_require__(97));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isDivisibleBy(str, num) {
  (0, _assertString.default)(str);
  return (0, _toFloat.default)(str) % parseInt(num, 10) === 0;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isHexColor;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var hexcolor = /^#?([0-9A-F]{3}|[0-9A-F]{6})$/i;

function isHexColor(str) {
  (0, _assertString.default)(str);
  return hexcolor.test(str);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isISRC;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// see http://isrc.ifpi.org/en/isrc-standard/code-syntax
var isrc = /^[A-Z]{2}[0-9A-Z]{3}\d{2}\d{5}$/;

function isISRC(str) {
  (0, _assertString.default)(str);
  return isrc.test(str);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isMD5;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var md5 = /^[a-f0-9]{32}$/;

function isMD5(str) {
  (0, _assertString.default)(str);
  return md5.test(str);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isHash;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lengths = {
  md5: 32,
  md4: 32,
  sha1: 40,
  sha256: 64,
  sha384: 96,
  sha512: 128,
  ripemd128: 32,
  ripemd160: 40,
  tiger128: 32,
  tiger160: 40,
  tiger192: 48,
  crc32: 8,
  crc32b: 8
};

function isHash(str, algorithm) {
  (0, _assertString.default)(str);
  var hash = new RegExp("^[a-f0-9]{".concat(lengths[algorithm], "}$"));
  return hash.test(str);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isJWT;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var jwt = /^([A-Za-z0-9\-_~+\/]+[=]{0,2})\.([A-Za-z0-9\-_~+\/]+[=]{0,2})(?:\.([A-Za-z0-9\-_~+\/]+[=]{0,2}))?$/;

function isJWT(str) {
  (0, _assertString.default)(str);
  return jwt.test(str);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isJSON;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function isJSON(str) {
  (0, _assertString.default)(str);

  try {
    var obj = JSON.parse(str);
    return !!obj && _typeof(obj) === 'object';
  } catch (e) {
    /* ignore */
  }

  return false;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isEmpty;

var _assertString = _interopRequireDefault(__webpack_require__(3));

var _merge = _interopRequireDefault(__webpack_require__(26));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var default_is_empty_options = {
  ignore_whitespace: false
};

function isEmpty(str, options) {
  (0, _assertString.default)(str);
  options = (0, _merge.default)(options, default_is_empty_options);
  return (options.ignore_whitespace ? str.trim().length : str.length) === 0;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isLength;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/* eslint-disable prefer-rest-params */
function isLength(str, options) {
  (0, _assertString.default)(str);
  var min;
  var max;

  if (_typeof(options) === 'object') {
    min = options.min || 0;
    max = options.max;
  } else {
    // backwards compatibility: isLength(str, min [, max])
    min = arguments[1];
    max = arguments[2];
  }

  var surrogatePairs = str.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g) || [];
  var len = str.length - surrogatePairs.length;
  return len >= min && (typeof max === 'undefined' || len <= max);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isUUID;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var uuid = {
  3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
  4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
  5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
  all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i
};

function isUUID(str) {
  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'all';
  (0, _assertString.default)(str);
  var pattern = uuid[version];
  return pattern && pattern.test(str);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isMongoId;

var _assertString = _interopRequireDefault(__webpack_require__(3));

var _isHexadecimal = _interopRequireDefault(__webpack_require__(102));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isMongoId(str) {
  (0, _assertString.default)(str);
  return (0, _isHexadecimal.default)(str) && str.length === 24;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isAfter;

var _assertString = _interopRequireDefault(__webpack_require__(3));

var _toDate = _interopRequireDefault(__webpack_require__(63));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isAfter(str) {
  var date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : String(new Date());
  (0, _assertString.default)(str);
  var comparison = (0, _toDate.default)(date);
  var original = (0, _toDate.default)(str);
  return !!(original && comparison && original > comparison);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isBefore;

var _assertString = _interopRequireDefault(__webpack_require__(3));

var _toDate = _interopRequireDefault(__webpack_require__(63));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isBefore(str) {
  var date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : String(new Date());
  (0, _assertString.default)(str);
  var comparison = (0, _toDate.default)(date);
  var original = (0, _toDate.default)(str);
  return !!(original && comparison && original < comparison);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isIn;

var _assertString = _interopRequireDefault(__webpack_require__(3));

var _toString = _interopRequireDefault(__webpack_require__(64));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function isIn(str, options) {
  (0, _assertString.default)(str);
  var i;

  if (Object.prototype.toString.call(options) === '[object Array]') {
    var array = [];

    for (i in options) {
      if ({}.hasOwnProperty.call(options, i)) {
        array[i] = (0, _toString.default)(options[i]);
      }
    }

    return array.indexOf(str) >= 0;
  } else if (_typeof(options) === 'object') {
    return options.hasOwnProperty(str);
  } else if (options && typeof options.indexOf === 'function') {
    return options.indexOf(str) >= 0;
  }

  return false;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isCreditCard;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable max-len */
var creditCard = /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11}|6[27][0-9]{14})$/;
/* eslint-enable max-len */

function isCreditCard(str) {
  (0, _assertString.default)(str);
  var sanitized = str.replace(/[- ]+/g, '');

  if (!creditCard.test(sanitized)) {
    return false;
  }

  var sum = 0;
  var digit;
  var tmpNum;
  var shouldDouble;

  for (var i = sanitized.length - 1; i >= 0; i--) {
    digit = sanitized.substring(i, i + 1);
    tmpNum = parseInt(digit, 10);

    if (shouldDouble) {
      tmpNum *= 2;

      if (tmpNum >= 10) {
        sum += tmpNum % 10 + 1;
      } else {
        sum += tmpNum;
      }
    } else {
      sum += tmpNum;
    }

    shouldDouble = !shouldDouble;
  }

  return !!(sum % 10 === 0 ? sanitized : false);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isIdentityCard;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var validators = {
  ES: function ES(str) {
    (0, _assertString.default)(str);
    var DNI = /^[0-9X-Z][0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKE]$/;
    var charsValue = {
      X: 0,
      Y: 1,
      Z: 2
    };
    var controlDigits = ['T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D', 'X', 'B', 'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L', 'C', 'K', 'E']; // sanitize user input

    var sanitized = str.trim().toUpperCase(); // validate the data structure

    if (!DNI.test(sanitized)) {
      return false;
    } // validate the control digit


    var number = sanitized.slice(0, -1).replace(/[X,Y,Z]/g, function (char) {
      return charsValue[char];
    });
    return sanitized.endsWith(controlDigits[number % 23]);
  }
};

function isIdentityCard(str) {
  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'any';
  (0, _assertString.default)(str);

  if (locale in validators) {
    return validators[locale](str);
  } else if (locale === 'any') {
    for (var key in validators) {
      if (validators.hasOwnProperty(key)) {
        var validator = validators[key];

        if (validator(str)) {
          return true;
        }
      }
    }

    return false;
  }

  throw new Error("Invalid locale '".concat(locale, "'"));
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isISIN;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isin = /^[A-Z]{2}[0-9A-Z]{9}[0-9]$/;

function isISIN(str) {
  (0, _assertString.default)(str);

  if (!isin.test(str)) {
    return false;
  }

  var checksumStr = str.replace(/[A-Z]/g, function (character) {
    return parseInt(character, 36);
  });
  var sum = 0;
  var digit;
  var tmpNum;
  var shouldDouble = true;

  for (var i = checksumStr.length - 2; i >= 0; i--) {
    digit = checksumStr.substring(i, i + 1);
    tmpNum = parseInt(digit, 10);

    if (shouldDouble) {
      tmpNum *= 2;

      if (tmpNum >= 10) {
        sum += tmpNum + 1;
      } else {
        sum += tmpNum;
      }
    } else {
      sum += tmpNum;
    }

    shouldDouble = !shouldDouble;
  }

  return parseInt(str.substr(str.length - 1), 10) === (10000 - sum) % 10;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isISBN;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isbn10Maybe = /^(?:[0-9]{9}X|[0-9]{10})$/;
var isbn13Maybe = /^(?:[0-9]{13})$/;
var factor = [1, 3];

function isISBN(str) {
  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  (0, _assertString.default)(str);
  version = String(version);

  if (!version) {
    return isISBN(str, 10) || isISBN(str, 13);
  }

  var sanitized = str.replace(/[\s-]+/g, '');
  var checksum = 0;
  var i;

  if (version === '10') {
    if (!isbn10Maybe.test(sanitized)) {
      return false;
    }

    for (i = 0; i < 9; i++) {
      checksum += (i + 1) * sanitized.charAt(i);
    }

    if (sanitized.charAt(9) === 'X') {
      checksum += 10 * 10;
    } else {
      checksum += 10 * sanitized.charAt(9);
    }

    if (checksum % 11 === 0) {
      return !!sanitized;
    }
  } else if (version === '13') {
    if (!isbn13Maybe.test(sanitized)) {
      return false;
    }

    for (i = 0; i < 12; i++) {
      checksum += factor[i % 2] * sanitized.charAt(i);
    }

    if (sanitized.charAt(12) - (10 - checksum % 10) % 10 === 0) {
      return !!sanitized;
    }
  }

  return false;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isISSN;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var issn = '^\\d{4}-?\\d{3}[\\dX]$';

function isISSN(str) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  (0, _assertString.default)(str);
  var testIssn = issn;
  testIssn = options.require_hyphen ? testIssn.replace('?', '') : testIssn;
  testIssn = options.case_sensitive ? new RegExp(testIssn) : new RegExp(testIssn, 'i');

  if (!testIssn.test(str)) {
    return false;
  }

  var digits = str.replace('-', '').toUpperCase();
  var checksum = 0;

  for (var i = 0; i < digits.length; i++) {
    var digit = digits[i];
    checksum += (digit === 'X' ? 10 : +digit) * (8 - i);
  }

  return checksum % 11 === 0;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isMobilePhone;
exports.locales = void 0;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable max-len */
var phones = {
  'ar-AE': /^((\+?971)|0)?5[024568]\d{7}$/,
  'ar-DZ': /^(\+?213|0)(5|6|7)\d{8}$/,
  'ar-EG': /^((\+?20)|0)?1[012]\d{8}$/,
  'ar-IQ': /^(\+?964|0)?7[0-9]\d{8}$/,
  'ar-JO': /^(\+?962|0)?7[789]\d{7}$/,
  'ar-KW': /^(\+?965)[569]\d{7}$/,
  'ar-SA': /^(!?(\+?966)|0)?5\d{8}$/,
  'ar-SY': /^(!?(\+?963)|0)?9\d{8}$/,
  'ar-TN': /^(\+?216)?[2459]\d{7}$/,
  'be-BY': /^(\+?375)?(24|25|29|33|44)\d{7}$/,
  'bg-BG': /^(\+?359|0)?8[789]\d{7}$/,
  'bn-BD': /\+?(88)?0?1[356789][0-9]{8}\b/,
  'cs-CZ': /^(\+?420)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,
  'da-DK': /^(\+?45)?\s?\d{2}\s?\d{2}\s?\d{2}\s?\d{2}$/,
  'de-DE': /^(\+49)?0?1(5[0-25-9]\d|6([23]|0\d?)|7([0-57-9]|6\d))\d{7}$/,
  'el-GR': /^(\+?30|0)?(69\d{8})$/,
  'en-AU': /^(\+?61|0)4\d{8}$/,
  'en-GB': /^(\+?44|0)7\d{9}$/,
  'en-GH': /^(\+233|0)(20|50|24|54|27|57|26|56|23|28)\d{7}$/,
  'en-HK': /^(\+?852\-?)?[456789]\d{3}\-?\d{4}$/,
  'en-IE': /^(\+?353|0)8[356789]\d{7}$/,
  'en-IN': /^(\+?91|0)?[6789]\d{9}$/,
  'en-KE': /^(\+?254|0)?[7]\d{8}$/,
  'en-MU': /^(\+?230|0)?\d{8}$/,
  'en-NG': /^(\+?234|0)?[789]\d{9}$/,
  'en-NZ': /^(\+?64|0)[28]\d{7,9}$/,
  'en-PK': /^((\+92)|(0092))-{0,1}\d{3}-{0,1}\d{7}$|^\d{11}$|^\d{4}-\d{7}$/,
  'en-RW': /^(\+?250|0)?[7]\d{8}$/,
  'en-SG': /^(\+65)?[89]\d{7}$/,
  'en-TZ': /^(\+?255|0)?[67]\d{8}$/,
  'en-UG': /^(\+?256|0)?[7]\d{8}$/,
  'en-US': /^((\+1|1)?( |-)?)?(\([2-9][0-9]{2}\)|[2-9][0-9]{2})( |-)?([2-9][0-9]{2}( |-)?[0-9]{4})$/,
  'en-ZA': /^(\+?27|0)\d{9}$/,
  'en-ZM': /^(\+?26)?09[567]\d{7}$/,
  'es-ES': /^(\+?34)?(6\d{1}|7[1234])\d{7}$/,
  'es-MX': /^(\+?52)?(1|01)?\d{10,11}$/,
  'es-UY': /^(\+598|0)9[1-9][\d]{6}$/,
  'et-EE': /^(\+?372)?\s?(5|8[1-4])\s?([0-9]\s?){6,7}$/,
  'fa-IR': /^(\+?98[\-\s]?|0)9[0-39]\d[\-\s]?\d{3}[\-\s]?\d{4}$/,
  'fi-FI': /^(\+?358|0)\s?(4(0|1|2|4|5|6)?|50)\s?(\d\s?){4,8}\d$/,
  'fo-FO': /^(\+?298)?\s?\d{2}\s?\d{2}\s?\d{2}$/,
  'fr-FR': /^(\+?33|0)[67]\d{8}$/,
  'he-IL': /^(\+972|0)([23489]|5[012345689]|77)[1-9]\d{6}$/,
  'hu-HU': /^(\+?36)(20|30|70)\d{7}$/,
  'id-ID': /^(\+?62|0)8(1[123456789]|2[1238]|3[1238]|5[12356789]|7[78]|9[56789]|8[123456789])([\s?|\d]{5,11})$/,
  'it-IT': /^(\+?39)?\s?3\d{2} ?\d{6,7}$/,
  'ja-JP': /^(\+?81|0)[789]0[ \-]?[1-9]\d{2}[ \-]?\d{5}$/,
  'kk-KZ': /^(\+?7|8)?7\d{9}$/,
  'kl-GL': /^(\+?299)?\s?\d{2}\s?\d{2}\s?\d{2}$/,
  'ko-KR': /^((\+?82)[ \-]?)?0?1([0|1|6|7|8|9]{1})[ \-]?\d{3,4}[ \-]?\d{4}$/,
  'lt-LT': /^(\+370|8)\d{8}$/,
  'ms-MY': /^(\+?6?01){1}(([0145]{1}(\-|\s)?\d{7,8})|([236789]{1}(\s|\-)?\d{7}))$/,
  'nb-NO': /^(\+?47)?[49]\d{7}$/,
  'nl-BE': /^(\+?32|0)4?\d{8}$/,
  'nn-NO': /^(\+?47)?[49]\d{7}$/,
  'pl-PL': /^(\+?48)? ?[5-8]\d ?\d{3} ?\d{2} ?\d{2}$/,
  'pt-BR': /(?=^(\+?5{2}\-?|0)[1-9]{2}\-?\d{4}\-?\d{4}$)(^(\+?5{2}\-?|0)[1-9]{2}\-?[6-9]{1}\d{3}\-?\d{4}$)|(^(\+?5{2}\-?|0)[1-9]{2}\-?9[6-9]{1}\d{3}\-?\d{4}$)/,
  'pt-PT': /^(\+?351)?9[1236]\d{7}$/,
  'ro-RO': /^(\+?4?0)\s?7\d{2}(\/|\s|\.|\-)?\d{3}(\s|\.|\-)?\d{3}$/,
  'ru-RU': /^(\+?7|8)?9\d{9}$/,
  'sl-SI': /^(\+386\s?|0)(\d{1}\s?\d{3}\s?\d{2}\s?\d{2}|\d{2}\s?\d{3}\s?\d{3})$/,
  'sk-SK': /^(\+?421)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,
  'sr-RS': /^(\+3816|06)[- \d]{5,9}$/,
  'sv-SE': /^(\+?46|0)[\s\-]?7[\s\-]?[02369]([\s\-]?\d){7}$/,
  'th-TH': /^(\+66|66|0)\d{9}$/,
  'tr-TR': /^(\+?90|0)?5\d{9}$/,
  'uk-UA': /^(\+?38|8)?0\d{9}$/,
  'vi-VN': /^(\+?84|0)((3([2-9]))|(5([689]))|(7([0|6-9]))|(8([1-5]))|(9([0-9])))([0-9]{7})$/,
  'zh-CN': /^((\+|00)86)?1([358][0-9]|4[579]|66|7[0135678]|9[89])[0-9]{8}$/,
  'zh-TW': /^(\+?886\-?|0)?9\d{8}$/
};
/* eslint-enable max-len */
// aliases

phones['en-CA'] = phones['en-US'];
phones['fr-BE'] = phones['nl-BE'];
phones['zh-HK'] = phones['en-HK'];

function isMobilePhone(str, locale, options) {
  (0, _assertString.default)(str);

  if (options && options.strictMode && !str.startsWith('+')) {
    return false;
  }

  if (Array.isArray(locale)) {
    return locale.some(function (key) {
      if (phones.hasOwnProperty(key)) {
        var phone = phones[key];

        if (phone.test(str)) {
          return true;
        }
      }

      return false;
    });
  } else if (locale in phones) {
    return phones[locale].test(str); // alias falsey locale as 'any'
  } else if (!locale || locale === 'any') {
    for (var key in phones) {
      if (phones.hasOwnProperty(key)) {
        var phone = phones[key];

        if (phone.test(str)) {
          return true;
        }
      }
    }

    return false;
  }

  throw new Error("Invalid locale '".concat(locale, "'"));
}

var locales = Object.keys(phones);
exports.locales = locales;

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isCurrency;

var _merge = _interopRequireDefault(__webpack_require__(26));

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function currencyRegex(options) {
  var decimal_digits = "\\d{".concat(options.digits_after_decimal[0], "}");
  options.digits_after_decimal.forEach(function (digit, index) {
    if (index !== 0) decimal_digits = "".concat(decimal_digits, "|\\d{").concat(digit, "}");
  });
  var symbol = "(\\".concat(options.symbol.replace(/\./g, '\\.'), ")").concat(options.require_symbol ? '' : '?'),
      negative = '-?',
      whole_dollar_amount_without_sep = '[1-9]\\d*',
      whole_dollar_amount_with_sep = "[1-9]\\d{0,2}(\\".concat(options.thousands_separator, "\\d{3})*"),
      valid_whole_dollar_amounts = ['0', whole_dollar_amount_without_sep, whole_dollar_amount_with_sep],
      whole_dollar_amount = "(".concat(valid_whole_dollar_amounts.join('|'), ")?"),
      decimal_amount = "(\\".concat(options.decimal_separator, "(").concat(decimal_digits, "))").concat(options.require_decimal ? '' : '?');
  var pattern = whole_dollar_amount + (options.allow_decimal || options.require_decimal ? decimal_amount : ''); // default is negative sign before symbol, but there are two other options (besides parens)

  if (options.allow_negatives && !options.parens_for_negatives) {
    if (options.negative_sign_after_digits) {
      pattern += negative;
    } else if (options.negative_sign_before_digits) {
      pattern = negative + pattern;
    }
  } // South African Rand, for example, uses R 123 (space) and R-123 (no space)


  if (options.allow_negative_sign_placeholder) {
    pattern = "( (?!\\-))?".concat(pattern);
  } else if (options.allow_space_after_symbol) {
    pattern = " ?".concat(pattern);
  } else if (options.allow_space_after_digits) {
    pattern += '( (?!$))?';
  }

  if (options.symbol_after_digits) {
    pattern += symbol;
  } else {
    pattern = symbol + pattern;
  }

  if (options.allow_negatives) {
    if (options.parens_for_negatives) {
      pattern = "(\\(".concat(pattern, "\\)|").concat(pattern, ")");
    } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {
      pattern = negative + pattern;
    }
  } // ensure there's a dollar and/or decimal amount, and that
  // it doesn't start with a space or a negative sign followed by a space


  return new RegExp("^(?!-? )(?=.*\\d)".concat(pattern, "$"));
}

var default_currency_options = {
  symbol: '$',
  require_symbol: false,
  allow_space_after_symbol: false,
  symbol_after_digits: false,
  allow_negatives: true,
  parens_for_negatives: false,
  negative_sign_before_digits: false,
  negative_sign_after_digits: false,
  allow_negative_sign_placeholder: false,
  thousands_separator: ',',
  decimal_separator: '.',
  allow_decimal: true,
  require_decimal: false,
  digits_after_decimal: [2],
  allow_space_after_digits: false
};

function isCurrency(str, options) {
  (0, _assertString.default)(str);
  options = (0, _merge.default)(options, default_currency_options);
  return currencyRegex(options).test(str);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isISO8601;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable max-len */
// from http://goo.gl/0ejHHW
var iso8601 = /^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/;
/* eslint-enable max-len */

var isValidDate = function isValidDate(str) {
  // str must have passed the ISO8601 check
  // this check is meant to catch invalid dates
  // like 2009-02-31
  // first check for ordinal dates
  var ordinalMatch = str.match(/^(\d{4})-?(\d{3})([ T]{1}\.*|$)/);

  if (ordinalMatch) {
    var oYear = Number(ordinalMatch[1]);
    var oDay = Number(ordinalMatch[2]); // if is leap year

    if (oYear % 4 === 0 && oYear % 100 !== 0) return oDay <= 366;
    return oDay <= 365;
  }

  var match = str.match(/(\d{4})-?(\d{0,2})-?(\d*)/).map(Number);
  var year = match[1];
  var month = match[2];
  var day = match[3];
  var monthString = month ? "0".concat(month).slice(-2) : month;
  var dayString = day ? "0".concat(day).slice(-2) : day; // create a date object and compare

  var d = new Date("".concat(year, "-").concat(monthString || '01', "-").concat(dayString || '01'));
  if (isNaN(d.getUTCFullYear())) return false;

  if (month && day) {
    return d.getUTCFullYear() === year && d.getUTCMonth() + 1 === month && d.getUTCDate() === day;
  }

  return true;
};

function isISO8601(str, options) {
  (0, _assertString.default)(str);
  var check = iso8601.test(str);
  if (!options) return check;
  if (check && options.strict) return isValidDate(str);
  return check;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isRFC3339;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* Based on https://tools.ietf.org/html/rfc3339#section-5.6 */
var dateFullYear = /[0-9]{4}/;
var dateMonth = /(0[1-9]|1[0-2])/;
var dateMDay = /([12]\d|0[1-9]|3[01])/;
var timeHour = /([01][0-9]|2[0-3])/;
var timeMinute = /[0-5][0-9]/;
var timeSecond = /([0-5][0-9]|60)/;
var timeSecFrac = /(\.[0-9]+)?/;
var timeNumOffset = new RegExp("[-+]".concat(timeHour.source, ":").concat(timeMinute.source));
var timeOffset = new RegExp("([zZ]|".concat(timeNumOffset.source, ")"));
var partialTime = new RegExp("".concat(timeHour.source, ":").concat(timeMinute.source, ":").concat(timeSecond.source).concat(timeSecFrac.source));
var fullDate = new RegExp("".concat(dateFullYear.source, "-").concat(dateMonth.source, "-").concat(dateMDay.source));
var fullTime = new RegExp("".concat(partialTime.source).concat(timeOffset.source));
var rfc3339 = new RegExp("".concat(fullDate.source, "[ tT]").concat(fullTime.source));

function isRFC3339(str) {
  (0, _assertString.default)(str);
  return rfc3339.test(str);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isISO31661Alpha2;

var _assertString = _interopRequireDefault(__webpack_require__(3));

var _includes = _interopRequireDefault(__webpack_require__(66));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// from https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
var validISO31661Alpha2CountriesCodes = ['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'BQ', 'BR', 'BS', 'BT', 'BV', 'BW', 'BY', 'BZ', 'CA', 'CC', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EC', 'EE', 'EG', 'EH', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'GA', 'GB', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'GY', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'RE', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SJ', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'SS', 'ST', 'SV', 'SX', 'SY', 'SZ', 'TC', 'TD', 'TF', 'TG', 'TH', 'TJ', 'TK', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'UM', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VI', 'VN', 'VU', 'WF', 'WS', 'YE', 'YT', 'ZA', 'ZM', 'ZW'];

function isISO31661Alpha2(str) {
  (0, _assertString.default)(str);
  return (0, _includes.default)(validISO31661Alpha2CountriesCodes, str.toUpperCase());
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isISO31661Alpha3;

var _assertString = _interopRequireDefault(__webpack_require__(3));

var _includes = _interopRequireDefault(__webpack_require__(66));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// from https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3
var validISO31661Alpha3CountriesCodes = ['AFG', 'ALA', 'ALB', 'DZA', 'ASM', 'AND', 'AGO', 'AIA', 'ATA', 'ATG', 'ARG', 'ARM', 'ABW', 'AUS', 'AUT', 'AZE', 'BHS', 'BHR', 'BGD', 'BRB', 'BLR', 'BEL', 'BLZ', 'BEN', 'BMU', 'BTN', 'BOL', 'BES', 'BIH', 'BWA', 'BVT', 'BRA', 'IOT', 'BRN', 'BGR', 'BFA', 'BDI', 'KHM', 'CMR', 'CAN', 'CPV', 'CYM', 'CAF', 'TCD', 'CHL', 'CHN', 'CXR', 'CCK', 'COL', 'COM', 'COG', 'COD', 'COK', 'CRI', 'CIV', 'HRV', 'CUB', 'CUW', 'CYP', 'CZE', 'DNK', 'DJI', 'DMA', 'DOM', 'ECU', 'EGY', 'SLV', 'GNQ', 'ERI', 'EST', 'ETH', 'FLK', 'FRO', 'FJI', 'FIN', 'FRA', 'GUF', 'PYF', 'ATF', 'GAB', 'GMB', 'GEO', 'DEU', 'GHA', 'GIB', 'GRC', 'GRL', 'GRD', 'GLP', 'GUM', 'GTM', 'GGY', 'GIN', 'GNB', 'GUY', 'HTI', 'HMD', 'VAT', 'HND', 'HKG', 'HUN', 'ISL', 'IND', 'IDN', 'IRN', 'IRQ', 'IRL', 'IMN', 'ISR', 'ITA', 'JAM', 'JPN', 'JEY', 'JOR', 'KAZ', 'KEN', 'KIR', 'PRK', 'KOR', 'KWT', 'KGZ', 'LAO', 'LVA', 'LBN', 'LSO', 'LBR', 'LBY', 'LIE', 'LTU', 'LUX', 'MAC', 'MKD', 'MDG', 'MWI', 'MYS', 'MDV', 'MLI', 'MLT', 'MHL', 'MTQ', 'MRT', 'MUS', 'MYT', 'MEX', 'FSM', 'MDA', 'MCO', 'MNG', 'MNE', 'MSR', 'MAR', 'MOZ', 'MMR', 'NAM', 'NRU', 'NPL', 'NLD', 'NCL', 'NZL', 'NIC', 'NER', 'NGA', 'NIU', 'NFK', 'MNP', 'NOR', 'OMN', 'PAK', 'PLW', 'PSE', 'PAN', 'PNG', 'PRY', 'PER', 'PHL', 'PCN', 'POL', 'PRT', 'PRI', 'QAT', 'REU', 'ROU', 'RUS', 'RWA', 'BLM', 'SHN', 'KNA', 'LCA', 'MAF', 'SPM', 'VCT', 'WSM', 'SMR', 'STP', 'SAU', 'SEN', 'SRB', 'SYC', 'SLE', 'SGP', 'SXM', 'SVK', 'SVN', 'SLB', 'SOM', 'ZAF', 'SGS', 'SSD', 'ESP', 'LKA', 'SDN', 'SUR', 'SJM', 'SWZ', 'SWE', 'CHE', 'SYR', 'TWN', 'TJK', 'TZA', 'THA', 'TLS', 'TGO', 'TKL', 'TON', 'TTO', 'TUN', 'TUR', 'TKM', 'TCA', 'TUV', 'UGA', 'UKR', 'ARE', 'GBR', 'USA', 'UMI', 'URY', 'UZB', 'VUT', 'VEN', 'VNM', 'VGB', 'VIR', 'WLF', 'ESH', 'YEM', 'ZMB', 'ZWE'];

function isISO31661Alpha3(str) {
  (0, _assertString.default)(str);
  return (0, _includes.default)(validISO31661Alpha3CountriesCodes, str.toUpperCase());
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isBase64;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var notBase64 = /[^A-Z0-9+\/=]/i;

function isBase64(str) {
  (0, _assertString.default)(str);
  var len = str.length;

  if (!len || len % 4 !== 0 || notBase64.test(str)) {
    return false;
  }

  var firstPaddingChar = str.indexOf('=');
  return firstPaddingChar === -1 || firstPaddingChar === len - 1 || firstPaddingChar === len - 2 && str[len - 1] === '=';
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isDataURI;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var validMediaType = /^[a-z]+\/[a-z0-9\-\+]+$/i;
var validAttribute = /^[a-z\-]+=[a-z0-9\-]+$/i;
var validData = /^[a-z0-9!\$&'\(\)\*\+,;=\-\._~:@\/\?%\s]*$/i;

function isDataURI(str) {
  (0, _assertString.default)(str);
  var data = str.split(',');

  if (data.length < 2) {
    return false;
  }

  var attributes = data.shift().trim().split(';');
  var schemeAndMediaType = attributes.shift();

  if (schemeAndMediaType.substr(0, 5) !== 'data:') {
    return false;
  }

  var mediaType = schemeAndMediaType.substr(5);

  if (mediaType !== '' && !validMediaType.test(mediaType)) {
    return false;
  }

  for (var i = 0; i < attributes.length; i++) {
    if (i === attributes.length - 1 && attributes[i].toLowerCase() === 'base64') {// ok
    } else if (!validAttribute.test(attributes[i])) {
      return false;
    }
  }

  for (var _i = 0; _i < data.length; _i++) {
    if (!validData.test(data[_i])) {
      return false;
    }
  }

  return true;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isMagnetURI;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var magnetURI = /^magnet:\?xt=urn:[a-z0-9]+:[a-z0-9]{32,40}&dn=.+&tr=.+$/i;

function isMagnetURI(url) {
  (0, _assertString.default)(url);
  return magnetURI.test(url.trim());
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isMimeType;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
  Checks if the provided string matches to a correct Media type format (MIME type)

  This function only checks is the string format follows the
  etablished rules by the according RFC specifications.
  This function supports 'charset' in textual media types
  (https://tools.ietf.org/html/rfc6657).

  This function does not check against all the media types listed
  by the IANA (https://www.iana.org/assignments/media-types/media-types.xhtml)
  because of lightness purposes : it would require to include
  all these MIME types in this librairy, which would weigh it
  significantly. This kind of effort maybe is not worth for the use that
  this function has in this entire librairy.

  More informations in the RFC specifications :
  - https://tools.ietf.org/html/rfc2045
  - https://tools.ietf.org/html/rfc2046
  - https://tools.ietf.org/html/rfc7231#section-3.1.1.1
  - https://tools.ietf.org/html/rfc7231#section-3.1.1.5
*/
// Match simple MIME types
// NB :
//   Subtype length must not exceed 100 characters.
//   This rule does not comply to the RFC specs (what is the max length ?).
var mimeTypeSimple = /^(application|audio|font|image|message|model|multipart|text|video)\/[a-zA-Z0-9\.\-\+]{1,100}$/i; // eslint-disable-line max-len
// Handle "charset" in "text/*"

var mimeTypeText = /^text\/[a-zA-Z0-9\.\-\+]{1,100};\s?charset=("[a-zA-Z0-9\.\-\+\s]{0,70}"|[a-zA-Z0-9\.\-\+]{0,70})(\s?\([a-zA-Z0-9\.\-\+\s]{1,20}\))?$/i; // eslint-disable-line max-len
// Handle "boundary" in "multipart/*"

var mimeTypeMultipart = /^multipart\/[a-zA-Z0-9\.\-\+]{1,100}(;\s?(boundary|charset)=("[a-zA-Z0-9\.\-\+\s]{0,70}"|[a-zA-Z0-9\.\-\+]{0,70})(\s?\([a-zA-Z0-9\.\-\+\s]{1,20}\))?){0,2}$/i; // eslint-disable-line max-len

function isMimeType(str) {
  (0, _assertString.default)(str);
  return mimeTypeSimple.test(str) || mimeTypeText.test(str) || mimeTypeMultipart.test(str);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lat = /^\(?[+-]?(90(\.0+)?|[1-8]?\d(\.\d+)?)$/;
var long = /^\s?[+-]?(180(\.0+)?|1[0-7]\d(\.\d+)?|\d{1,2}(\.\d+)?)\)?$/;

function _default(str) {
  (0, _assertString.default)(str);
  if (!str.includes(',')) return false;
  var pair = str.split(',');
  return lat.test(pair[0]) && long.test(pair[1]);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.locales = void 0;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// common patterns
var threeDigit = /^\d{3}$/;
var fourDigit = /^\d{4}$/;
var fiveDigit = /^\d{5}$/;
var sixDigit = /^\d{6}$/;
var patterns = {
  AD: /^AD\d{3}$/,
  AT: fourDigit,
  AU: fourDigit,
  BE: fourDigit,
  BG: fourDigit,
  CA: /^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJ-NPRSTV-Z][\s\-]?\d[ABCEGHJ-NPRSTV-Z]\d$/i,
  CH: fourDigit,
  CZ: /^\d{3}\s?\d{2}$/,
  DE: fiveDigit,
  DK: fourDigit,
  DZ: fiveDigit,
  EE: fiveDigit,
  ES: fiveDigit,
  FI: fiveDigit,
  FR: /^\d{2}\s?\d{3}$/,
  GB: /^(gir\s?0aa|[a-z]{1,2}\d[\da-z]?\s?(\d[a-z]{2})?)$/i,
  GR: /^\d{3}\s?\d{2}$/,
  HR: /^([1-5]\d{4}$)/,
  HU: fourDigit,
  IL: fiveDigit,
  IN: sixDigit,
  IS: threeDigit,
  IT: fiveDigit,
  JP: /^\d{3}\-\d{4}$/,
  KE: fiveDigit,
  LI: /^(948[5-9]|949[0-7])$/,
  LT: /^LT\-\d{5}$/,
  LU: fourDigit,
  LV: /^LV\-\d{4}$/,
  MX: fiveDigit,
  NL: /^\d{4}\s?[a-z]{2}$/i,
  NO: fourDigit,
  PL: /^\d{2}\-\d{3}$/,
  PT: /^\d{4}\-\d{3}?$/,
  RO: sixDigit,
  RU: sixDigit,
  SA: fiveDigit,
  SE: /^\d{3}\s?\d{2}$/,
  SI: fourDigit,
  SK: /^\d{3}\s?\d{2}$/,
  TN: fourDigit,
  TW: /^\d{3}(\d{2})?$/,
  UA: fiveDigit,
  US: /^\d{5}(-\d{4})?$/,
  ZA: fourDigit,
  ZM: fiveDigit
};
var locales = Object.keys(patterns);
exports.locales = locales;

function _default(str, locale) {
  (0, _assertString.default)(str);

  if (locale in patterns) {
    return patterns[locale].test(str);
  } else if (locale === 'any') {
    for (var key in patterns) {
      if (patterns.hasOwnProperty(key)) {
        var pattern = patterns[key];

        if (pattern.test(str)) {
          return true;
        }
      }
    }

    return false;
  }

  throw new Error("Invalid locale '".concat(locale, "'"));
}

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = trim;

var _rtrim = _interopRequireDefault(__webpack_require__(104));

var _ltrim = _interopRequireDefault(__webpack_require__(103));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function trim(str, chars) {
  return (0, _rtrim.default)((0, _ltrim.default)(str, chars), chars);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = escape;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function escape(str) {
  (0, _assertString.default)(str);
  return str.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\//g, '&#x2F;').replace(/\\/g, '&#x5C;').replace(/`/g, '&#96;');
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = unescape;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function unescape(str) {
  (0, _assertString.default)(str);
  return str.replace(/&amp;/g, '&').replace(/&quot;/g, '"').replace(/&#x27;/g, "'").replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&#x2F;/g, '/').replace(/&#x5C;/g, '\\').replace(/&#96;/g, '`');
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = stripLow;

var _assertString = _interopRequireDefault(__webpack_require__(3));

var _blacklist = _interopRequireDefault(__webpack_require__(105));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stripLow(str, keep_new_lines) {
  (0, _assertString.default)(str);
  var chars = keep_new_lines ? '\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F' : '\\x00-\\x1F\\x7F';
  return (0, _blacklist.default)(str, chars);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = whitelist;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function whitelist(str, chars) {
  (0, _assertString.default)(str);
  return str.replace(new RegExp("[^".concat(chars, "]+"), 'g'), '');
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isWhitelisted;

var _assertString = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isWhitelisted(str, chars) {
  (0, _assertString.default)(str);

  for (var i = str.length - 1; i >= 0; i--) {
    if (chars.indexOf(str[i]) === -1) {
      return false;
    }
  }

  return true;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = normalizeEmail;

var _merge = _interopRequireDefault(__webpack_require__(26));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var default_normalize_email_options = {
  // The following options apply to all email addresses
  // Lowercases the local part of the email address.
  // Please note this may violate RFC 5321 as per http://stackoverflow.com/a/9808332/192024).
  // The domain is always lowercased, as per RFC 1035
  all_lowercase: true,
  // The following conversions are specific to GMail
  // Lowercases the local part of the GMail address (known to be case-insensitive)
  gmail_lowercase: true,
  // Removes dots from the local part of the email address, as that's ignored by GMail
  gmail_remove_dots: true,
  // Removes the subaddress (e.g. "+foo") from the email address
  gmail_remove_subaddress: true,
  // Conversts the googlemail.com domain to gmail.com
  gmail_convert_googlemaildotcom: true,
  // The following conversions are specific to Outlook.com / Windows Live / Hotmail
  // Lowercases the local part of the Outlook.com address (known to be case-insensitive)
  outlookdotcom_lowercase: true,
  // Removes the subaddress (e.g. "+foo") from the email address
  outlookdotcom_remove_subaddress: true,
  // The following conversions are specific to Yahoo
  // Lowercases the local part of the Yahoo address (known to be case-insensitive)
  yahoo_lowercase: true,
  // Removes the subaddress (e.g. "-foo") from the email address
  yahoo_remove_subaddress: true,
  // The following conversions are specific to Yandex
  // Lowercases the local part of the Yandex address (known to be case-insensitive)
  yandex_lowercase: true,
  // The following conversions are specific to iCloud
  // Lowercases the local part of the iCloud address (known to be case-insensitive)
  icloud_lowercase: true,
  // Removes the subaddress (e.g. "+foo") from the email address
  icloud_remove_subaddress: true
}; // List of domains used by iCloud

var icloud_domains = ['icloud.com', 'me.com']; // List of domains used by Outlook.com and its predecessors
// This list is likely incomplete.
// Partial reference:
// https://blogs.office.com/2013/04/17/outlook-com-gets-two-step-verification-sign-in-by-alias-and-new-international-domains/

var outlookdotcom_domains = ['hotmail.at', 'hotmail.be', 'hotmail.ca', 'hotmail.cl', 'hotmail.co.il', 'hotmail.co.nz', 'hotmail.co.th', 'hotmail.co.uk', 'hotmail.com', 'hotmail.com.ar', 'hotmail.com.au', 'hotmail.com.br', 'hotmail.com.gr', 'hotmail.com.mx', 'hotmail.com.pe', 'hotmail.com.tr', 'hotmail.com.vn', 'hotmail.cz', 'hotmail.de', 'hotmail.dk', 'hotmail.es', 'hotmail.fr', 'hotmail.hu', 'hotmail.id', 'hotmail.ie', 'hotmail.in', 'hotmail.it', 'hotmail.jp', 'hotmail.kr', 'hotmail.lv', 'hotmail.my', 'hotmail.ph', 'hotmail.pt', 'hotmail.sa', 'hotmail.sg', 'hotmail.sk', 'live.be', 'live.co.uk', 'live.com', 'live.com.ar', 'live.com.mx', 'live.de', 'live.es', 'live.eu', 'live.fr', 'live.it', 'live.nl', 'msn.com', 'outlook.at', 'outlook.be', 'outlook.cl', 'outlook.co.il', 'outlook.co.nz', 'outlook.co.th', 'outlook.com', 'outlook.com.ar', 'outlook.com.au', 'outlook.com.br', 'outlook.com.gr', 'outlook.com.pe', 'outlook.com.tr', 'outlook.com.vn', 'outlook.cz', 'outlook.de', 'outlook.dk', 'outlook.es', 'outlook.fr', 'outlook.hu', 'outlook.id', 'outlook.ie', 'outlook.in', 'outlook.it', 'outlook.jp', 'outlook.kr', 'outlook.lv', 'outlook.my', 'outlook.ph', 'outlook.pt', 'outlook.sa', 'outlook.sg', 'outlook.sk', 'passport.com']; // List of domains used by Yahoo Mail
// This list is likely incomplete

var yahoo_domains = ['rocketmail.com', 'yahoo.ca', 'yahoo.co.uk', 'yahoo.com', 'yahoo.de', 'yahoo.fr', 'yahoo.in', 'yahoo.it', 'ymail.com']; // List of domains used by yandex.ru

var yandex_domains = ['yandex.ru', 'yandex.ua', 'yandex.kz', 'yandex.com', 'yandex.by', 'ya.ru']; // replace single dots, but not multiple consecutive dots

function dotsReplacer(match) {
  if (match.length > 1) {
    return match;
  }

  return '';
}

function normalizeEmail(email, options) {
  options = (0, _merge.default)(options, default_normalize_email_options);
  var raw_parts = email.split('@');
  var domain = raw_parts.pop();
  var user = raw_parts.join('@');
  var parts = [user, domain]; // The domain is always lowercased, as it's case-insensitive per RFC 1035

  parts[1] = parts[1].toLowerCase();

  if (parts[1] === 'gmail.com' || parts[1] === 'googlemail.com') {
    // Address is GMail
    if (options.gmail_remove_subaddress) {
      parts[0] = parts[0].split('+')[0];
    }

    if (options.gmail_remove_dots) {
      // this does not replace consecutive dots like example..email@gmail.com
      parts[0] = parts[0].replace(/\.+/g, dotsReplacer);
    }

    if (!parts[0].length) {
      return false;
    }

    if (options.all_lowercase || options.gmail_lowercase) {
      parts[0] = parts[0].toLowerCase();
    }

    parts[1] = options.gmail_convert_googlemaildotcom ? 'gmail.com' : parts[1];
  } else if (icloud_domains.indexOf(parts[1]) >= 0) {
    // Address is iCloud
    if (options.icloud_remove_subaddress) {
      parts[0] = parts[0].split('+')[0];
    }

    if (!parts[0].length) {
      return false;
    }

    if (options.all_lowercase || options.icloud_lowercase) {
      parts[0] = parts[0].toLowerCase();
    }
  } else if (outlookdotcom_domains.indexOf(parts[1]) >= 0) {
    // Address is Outlook.com
    if (options.outlookdotcom_remove_subaddress) {
      parts[0] = parts[0].split('+')[0];
    }

    if (!parts[0].length) {
      return false;
    }

    if (options.all_lowercase || options.outlookdotcom_lowercase) {
      parts[0] = parts[0].toLowerCase();
    }
  } else if (yahoo_domains.indexOf(parts[1]) >= 0) {
    // Address is Yahoo
    if (options.yahoo_remove_subaddress) {
      var components = parts[0].split('-');
      parts[0] = components.length > 1 ? components.slice(0, -1).join('-') : components[0];
    }

    if (!parts[0].length) {
      return false;
    }

    if (options.all_lowercase || options.yahoo_lowercase) {
      parts[0] = parts[0].toLowerCase();
    }
  } else if (yandex_domains.indexOf(parts[1]) >= 0) {
    if (options.all_lowercase || options.yandex_lowercase) {
      parts[0] = parts[0].toLowerCase();
    }

    parts[1] = 'yandex.ru'; // all yandex domains are equal, 1st preffered
  } else if (options.all_lowercase) {
    // Any other address
    parts[0] = parts[0].toLowerCase();
  }

  return parts.join('@');
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if (true) {
  module.exports = EventEmitter;
}


/***/ }),
/* 283 */
/***/ (function(module, exports) {

module.exports = require("querystring");

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(29).createHash


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var base58 = __webpack_require__(286)
var Buffer = __webpack_require__(106).Buffer

module.exports = function (checksumFn) {
  // Encode a buffer as a base58-check encoded string
  function encode (payload) {
    var checksum = checksumFn(payload)

    return base58.encode(Buffer.concat([
      payload,
      checksum
    ], payload.length + 4))
  }

  function decodeRaw (buffer) {
    var payload = buffer.slice(0, -4)
    var checksum = buffer.slice(-4)
    var newChecksum = checksumFn(payload)

    if (checksum[0] ^ newChecksum[0] |
        checksum[1] ^ newChecksum[1] |
        checksum[2] ^ newChecksum[2] |
        checksum[3] ^ newChecksum[3]) return

    return payload
  }

  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong
  function decodeUnsafe (string) {
    var buffer = base58.decodeUnsafe(string)
    if (!buffer) return

    return decodeRaw(buffer)
  }

  function decode (string) {
    var buffer = base58.decode(string)
    var payload = decodeRaw(buffer, checksumFn)
    if (!payload) throw new Error('Invalid checksum')
    return payload
  }

  return {
    encode: encode,
    decode: decode,
    decodeUnsafe: decodeUnsafe
  }
}


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

var basex = __webpack_require__(287)
var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'

module.exports = basex(ALPHABET)


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// base-x encoding / decoding
// Copyright (c) 2018 base-x contributors
// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
// @ts-ignore
var _Buffer = __webpack_require__(106).Buffer
function base (ALPHABET) {
  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }
  var BASE_MAP = new Uint8Array(256)
  BASE_MAP.fill(255)
  for (var i = 0; i < ALPHABET.length; i++) {
    var x = ALPHABET.charAt(i)
    var xc = x.charCodeAt(0)
    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }
    BASE_MAP[xc] = i
  }
  var BASE = ALPHABET.length
  var LEADER = ALPHABET.charAt(0)
  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up
  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up
  function encode (source) {
    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }
    if (source.length === 0) { return '' }
        // Skip & count leading zeroes.
    var zeroes = 0
    var length = 0
    var pbegin = 0
    var pend = source.length
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++
      zeroes++
    }
        // Allocate enough space in big-endian base58 representation.
    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0
    var b58 = new Uint8Array(size)
        // Process the bytes.
    while (pbegin !== pend) {
      var carry = source[pbegin]
            // Apply "b58 = b58 * 256 + ch".
      var i = 0
      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
        carry += (256 * b58[it1]) >>> 0
        b58[it1] = (carry % BASE) >>> 0
        carry = (carry / BASE) >>> 0
      }
      if (carry !== 0) { throw new Error('Non-zero carry') }
      length = i
      pbegin++
    }
        // Skip leading zeroes in base58 result.
    var it2 = size - length
    while (it2 !== size && b58[it2] === 0) {
      it2++
    }
        // Translate the result into a string.
    var str = LEADER.repeat(zeroes)
    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }
    return str
  }
  function decodeUnsafe (source) {
    if (typeof source !== 'string') { throw new TypeError('Expected String') }
    if (source.length === 0) { return _Buffer.alloc(0) }
    var psz = 0
        // Skip leading spaces.
    if (source[psz] === ' ') { return }
        // Skip and count leading '1's.
    var zeroes = 0
    var length = 0
    while (source[psz] === LEADER) {
      zeroes++
      psz++
    }
        // Allocate enough space in big-endian base256 representation.
    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.
    var b256 = new Uint8Array(size)
        // Process the characters.
    while (source[psz]) {
            // Decode character
      var carry = BASE_MAP[source.charCodeAt(psz)]
            // Invalid character
      if (carry === 255) { return }
      var i = 0
      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
        carry += (BASE * b256[it3]) >>> 0
        b256[it3] = (carry % 256) >>> 0
        carry = (carry / 256) >>> 0
      }
      if (carry !== 0) { throw new Error('Non-zero carry') }
      length = i
      psz++
    }
        // Skip trailing spaces.
    if (source[psz] === ' ') { return }
        // Skip leading zeroes in b256.
    var it4 = size - length
    while (it4 !== size && b256[it4] === 0) {
      it4++
    }
    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))
    vch.fill(0x00, 0, zeroes)
    var j = zeroes
    while (it4 !== size) {
      vch[j++] = b256[it4++]
    }
    return vch
  }
  function decode (string) {
    var buffer = decodeUnsafe(string)
    if (buffer) { return buffer }
    throw new Error('Non-base' + BASE + ' character')
  }
  return {
    encode: encode,
    decodeUnsafe: decodeUnsafe,
    decode: decode
  }
}
module.exports = base


/***/ }),
/* 288 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(11);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(23);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(24);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(25);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/ethers/index.js
var ethers = __webpack_require__(6);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(2);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js
var regenerator = __webpack_require__(0);
var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/asyncToGenerator.js
var asyncToGenerator = __webpack_require__(1);
var asyncToGenerator_default = /*#__PURE__*/__webpack_require__.n(asyncToGenerator);

// CONCATENATED MODULE: ./lib/addresses.js
var MAINNET_ADDRESSES = {
  SafeDecimalMath: '4159e1876b27bbd74d1a16d51ee46d50011800d2f7',
  ExchangeRates: '41609938ef4eaed907d8a76fa867cd7e25adb03669',
  RewardEscrow: '4105f63ed0708d62ebc8ef77a3ba2ac1b8ed5d0e1b',
  SynthetixEscrow: '41c57350e7cedc727187ff0ae744b1ea6dd231890b',
  SynthetixState: '4162ce0ec713cd48d54e2066c7a592293d3277383a',
  ProxyFeePool: '4159e870ce8d376762dec015ab02226a9f9e847cb5',
  DelegateApprovals: '416231c488b0ea62e8a8514fa7d1a816604838c8d8',
  FeePoolEternalStorage: '41db545295db9567ac77100382169bcd8a955c5756',
  FeePool: '41b3c992678d87a4a9612e1ffef823ae2e7fc1e71f',
  FeePoolState: '41728b40f71e8b0bb4904285766ac551c686f15efc',
  RewardsDistribution: '4133c0546b30ce5abb225d73b57f7a8bb5f3149d7c',
  SupplySchedule: '4124eed3896a6d43fe15de3e628101095150695e70',
  ProxySynthetix: '41b20d4f75ba52e8574dad86fa2b8f8958392bc994',
  TokenStateSynthetix: '417f4d4e49027200a60b47f59f6142878c83b375ae',
  Synthetix: '41eb674e4b48888a0ad307918c71bf46418a9d6e7a',
  EscrowChecker: '41ad77e2167046fa3054d036dd84f4c50fa87b3050',
  ProxyERC20: '41e11cdc164a9d8c1ae19d95b0165278690d39d84b',
  TokenStateODR: '41648d82dbf44e206cbee2908c662d99fc98038ba2',
  ProxyODR: '41c9044153263e1d3e736e226888a589fc23f9f9fd',
  SynthODR: '411b7bcf9511b839561fb922859ae3b2f06c9d59f5',
  TokenStatesEUR: '41256ce305bef9c664aacd275f0f59fd18b5a00064',
  ProxysEUR: '4163a8a5a1b7e4f3c933685c03f81abaf80063a254',
  SynthsEUR: '419a917056775ed0d08559cf6eb85df1473e13a4ee',
  TokenStatesUSD: '4188383ceed06b4a3776aefa0a304bd04707f136c2',
  ProxysUSD: '41da2853b2bede0e3018f56d47624a413b2abe0831',
  SynthsUSD: '416fe12d8ed302f0fc7829864a2286838b832fad2b',
  TokenStatesAUD: '412a0b780e27410002c02aac415273eed427429246',
  ProxysAUD: '41d4b63eadc31926564fcf8dd06797cce23849e95e',
  SynthsAUD: '41d2451332507b8ae594d7c2fbd4752a7e2e2a707f',
  TokenStatesGBP: '41ab141880d22667fc3e9560a2e0f1f3384f669c98',
  ProxysGBP: '41d3252ebcd7ee9319357e7c4091231fd291944d3d',
  SynthsGBP: '411b8c72af5eaae233c6fe4c037ca951ecc0e9f504',
  TokenStatesCHF: '4134063da79c8396185d970f0beed467fc72a5b260',
  ProxysCHF: '4163d76bcf356161da858c3b9f4daf24a5d0aeab5e',
  SynthsCHF: '4115bacdc8084ce88e61729e918c66ccf1bea27459',
  TokenStatesBTC: '418683ccbf165c8152a853963ccb4b1bda62af1529',
  ProxysBTC: '41c0fcc47cb8431adbc9966125a5bd0bb6ca35728c',
  SynthsBTC: '41666be5e4e4c48fda9d98173978805a7b1c374add',
  TokenStatesETH: '410e914e0c997b2ce44dc049cfb0f0fb84cd0f5d05',
  ProxysETH: '419a609902ca627381ebf8ac20d765f2df21bec7f3',
  SynthsETH: '41a1402557c4c7a50f958e15c0527a60bf6666c77e',
  TokenStatesTRX: '41c6000d368922e9caa3dc2b59e0d821b50ffd526d',
  ProxysTRX: '41a099cc498284ed6e25f3c99e6d55074e6ba42911',
  SynthsTRX: '4115ddbad15288f96f5cf0b068b0e187eccbc0aa0b',
  TokenStateiBTC: '412999014a76d0632d5a12e1a892ae626e5a8e493b',
  ProxyiBTC: '4169ae963dfc88749d95b9cbb9e21448cb90992161',
  SynthiBTC: '417cdcf9857d42e63cba77de0ecd56804834d9dcdd',
  TokenStateiTRX: '414b945fd7809c67a950a314e922e49c444c8daf38',
  ProxyiTRX: '41eff8d5c8a7d90541607df61bfa9592c6d43ff489',
  SynthiTRX: '41bb82be8e7765af4e6fe4a04d6a81756ce20afaa0',
  TokenStateiETH: '414c5d5b1cd0feab3c2b3a7011034d83ee80eda2a2',
  ProxyiETH: '419a3d075ac1c7dc6eabc1bd673f48530bcbc4543f',
  SynthiETH: '4108bfb3ae01fa6ba93514ccdb66daaab16e7cb952',
  Depot: '4179412a5b4dca0bc4eccee6aabaf2e8afdacb73e8',
  ArbRewarder: '41de19475ec96fe20785edf6789e8e518cba2a067e',
  DappMaintenance: '4111f52e05c7cc79199ab104b084c7997308e09c72',
  TokenStatesLINK: '4106d2388f5e676b5aa07e6cd75ea7a060ad1f86bd',
  ProxysLINK: '41d30302da9bef8dfb251ff87977d578db2c4e9e64',
  SynthsLINK: '4183df1cb6a4231082c77dda12e672b3e83e75210f'
};
var SHASTA_ADDRESSES = {
  SafeDecimalMath: '41ee6fa20f26a2ac860408159c33bd4ee896a387a0',
  ExchangeRates: '4175f701c43172053130582da82819e8320c7f1377',
  RewardEscrow: '41a65ae14dddd68626e91d9205df6866a1ef581863',
  SynthetixEscrow: '41fcdbee8ee585a6ccffa7e63a32fa6e395b8fda58',
  SynthetixState: '4129a77621b531276f145eab630aa6396231375b65',
  ProxyFeePool: '41e17940732497d6d6dc04d5354246f24f251dfeb1',
  DelegateApprovals: '41ca84fc99c52093d10655843ea6a51a1432c0cb8e',
  FeePoolEternalStorage: '41be0aeebec8a9d2dee7ff1a0b397670aaac5839f2',
  FeePool: '415ba46464f27b4a8464d09a70c5b771d2343c952e',
  FeePoolState: '4149a8a98c6234a58f19d5223d8319c34266e8e4d8',
  RewardsDistribution: '41dd3287f98df9c94670cf0830186cde5fe6a42ea9',
  SupplySchedule: '41d82f9447c2d54902d359d02c76f55f2f9ce67a0f',
  ProxySynthetix: '417849dd1f0744ce432d2659b15492d88822429343',
  TokenStateSynthetix: '41a862b21a2f9d7d479a897b83a1a0a4256b5f27e2',
  Synthetix: '41343960a5f9cb20384209a26270af864dc97f3a86',
  EscrowChecker: '41595c401594ca75e9ddfb5fa8e2362c681132352f',
  ProxyERC20: '4147f8b2f39947cec7714dbd259f2d996c475b9d21',
  TokenStateODR: '4148b24fcc9590e658e550b5c11759244ea700041f',
  ProxyODR: '41a46d39b1c4cbbabce81eb53d6a973c68576205ae',
  SynthODR: '41d0259d7cbc6cefd7495a2cde855ef035f19ef252',
  TokenStatesEUR: '4127cb7274abb36fd60636025422c55c44371ad144',
  ProxysEUR: '41e94a88e29e2e6090e03b7316d9e60bcf89b9fdf4',
  SynthsEUR: '415a601749a5e471bbfb084e9f97b6d4e4fd02f41c',
  TokenStatesUSD: '4106323c9dceda6f054711bb0fd9e8cf310a95bda4',
  ProxysUSD: '41b9b90a644272f4f5761a8bbad4521b57f306bfef',
  SynthsUSD: '4167956347a6c7edd8d4b16619704d37dd79d5fd98',
  TokenStatesAUD: '412f4ea76dab30bed77cd1c56e3be06805695ed8e0',
  ProxysAUD: '416f7197da804ebc063da026f5f76daa74e5b50fd1',
  SynthsAUD: '41f2f444f641b15d3658f9139b97ea86258394439a',
  TokenStatesGBP: '41a8270d2227c101e729fdb9a3a5d8f24552530217',
  ProxysGBP: '41531fc6a0093f79abfae0d4b6d668dda4e4744387',
  SynthsGBP: '41447ab15ad4b4e9312694c7e2f974f7c8d98748a0',
  TokenStatesCHF: '418313c34925254f2a74e292fee53b8d5645112167',
  ProxysCHF: '4158a764b2ddb89819332bdc32783b383a749bc4f4',
  SynthsCHF: '417c1b9df6f9dc8f47c94fc6d86d9587bcaae554c9',
  TokenStatesBTC: '4188300407fc01799a97cd72fc0cc1a0511b782f11',
  ProxysBTC: '419fcb2544b2d0c1a2da3321841c71d6b4fce0d639',
  SynthsBTC: '41ebb19e1470b5010fbf464e1e7622111dcc912923',
  TokenStatesETH: '4144df9b8507de382c2de03fa7decdea0a7c742cf4',
  ProxysETH: '418655cadaf41a9249518d097eadfda68d36c6505f',
  SynthsETH: '413342528636354e779cc71dfa36c73fbe13a852f8',
  TokenStatesTRX: '413b1a52320842194b1b5c9e5a25111a2eafc8256e',
  ProxysTRX: '41a538ed7020934bcd2bd697307e7d1f0b13e687bf',
  SynthsTRX: '41da24ecf5ab26fda03cd8ecc0ce439608be6692e4',
  TokenStateiBTC: '411b29cc1bddfcf877a1528cb0c09f9f351a26961c',
  ProxyiBTC: '4117d772df1d74c996334644b29446f1f05c51493a',
  SynthiBTC: '418539741f4fffe6f61749470d79bd54a5ebb40c11',
  TokenStateiTRX: '41c4091cbbb866cd12a09435420b29486a52d717a8',
  ProxyiTRX: '4184b8316d53dfbe067d91b0594fefdab16f571967',
  SynthiTRX: '41d150ab7c9e25bd0e4cde9ce2d53f587e16244115',
  TokenStateiETH: '413bd87f3cdddcf286a1445d9f595aada6e75cd104',
  ProxyiETH: '41c65f8c5f3d52c1b7d24d5f6b16613779a60fe812',
  SynthiETH: '41a27bcf0e780f035c6343aefcf6353403c783ae88',
  Depot: '412d0b89edf0a8c70fb3b3f30d8db3b5352419c23b',
  ArbRewarder: '415a02069cf53a3bc995a6e22904cf50cb3d39f9ad',
  DappMaintenance: '418ff0188996bbab8e06ff3d69506685b33fdf1ae2'
};
/* harmony default export */ var lib_addresses = ({
  1: MAINNET_ADDRESSES,
  2: SHASTA_ADDRESSES
});
// CONCATENATED MODULE: ./lib/abis/mainnet/Depot.js
/* harmony default export */ var mainnet_Depot = ([{
  constant: true,
  inputs: [],
  name: 'USDTdepositStartIndex',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'SUSDminimumDepositAmount',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'amount',
    type: 'uint256'
  }],
  name: 'depositSUSD',
  outputs: [{
    name: '',
    type: 'uint256[2]'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'synth',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_owner',
    type: 'address'
  }],
  name: 'nominateNewOwner',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_paused',
    type: 'bool'
  }],
  name: 'setPaused',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'address'
  }],
  name: 'SUSDsmallDeposits',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'initiationTime',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'withdrawMyDepositedUSDT',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_beneficiary',
    type: 'address'
  }],
  name: 'setSelfDestructBeneficiary',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'fundsWallet',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'terminateSelfDestruct',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'withdrawMyDepositedSUSD',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'USDTtotalSellableDeposits',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_synth',
    type: 'address'
  }],
  name: 'setSynth',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'oksProxy',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'nominatedOwner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'paused',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_fundsWallet',
    type: 'address'
  }],
  name: 'setFundsWallet',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'acceptOwnership',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'amount',
    type: 'uint256'
  }],
  name: 'withdrawOikos',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'amount',
    type: 'uint256'
  }],
  name: 'exchangeUSDTForSynths',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'address'
  }],
  name: 'USDTsmallDeposits',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'owner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'SUSDdepositStartIndex',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'lastPauseTime',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'amount',
    type: 'uint256'
  }],
  name: 'exchangeSynthsForUSDT',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'SUSDtotalSellableDeposits',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'selfDestruct',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'SUSDdepositEndIndex',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'SELFDESTRUCT_DELAY',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'uint256'
  }],
  name: 'USDTdeposits',
  outputs: [{
    name: 'user',
    type: 'address'
  }, {
    name: 'amount',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'selfDestructInitiated',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'USDTminimumDepositAmount',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'initiateSelfDestruct',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'selfDestructBeneficiary',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'uint256'
  }],
  name: 'SUSDdeposits',
  outputs: [{
    name: 'user',
    type: 'address'
  }, {
    name: 'amount',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'amount',
    type: 'uint256'
  }],
  name: 'depositUSDT',
  outputs: [{
    name: '',
    type: 'uint256[2]'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'USDTdepositEndIndex',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_oksProxy',
    type: 'address'
  }],
  name: 'setOikos',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    name: '_owner',
    type: 'address'
  }, {
    name: '_fundsWallet',
    type: 'address'
  }, {
    name: '_oksProxy',
    type: 'address'
  }, {
    name: '_synth',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  payable: true,
  stateMutability: 'payable',
  type: 'fallback',
  name: 'fallback'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newFundsWallet',
    type: 'address'
  }],
  name: 'FundsWalletUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newSynthContract',
    type: 'address'
  }],
  name: 'SynthUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newOKSProxy',
    type: 'address'
  }],
  name: 'OikosUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'fromCurrency',
    type: 'string'
  }, {
    indexed: false,
    name: 'fromAmount',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'toCurrency',
    type: 'string'
  }, {
    indexed: false,
    name: 'toAmount',
    type: 'uint256'
  }],
  name: 'Exchange',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'user',
    type: 'address'
  }, {
    indexed: false,
    name: 'amount',
    type: 'uint256'
  }],
  name: 'USDTWithdrawal',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'user',
    type: 'address'
  }, {
    indexed: false,
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: true,
    name: 'depositIndex',
    type: 'uint256'
  }],
  name: 'eUSDTDeposit',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'user',
    type: 'address'
  }, {
    indexed: false,
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: true,
    name: 'depositIndex',
    type: 'uint256'
  }],
  name: 'USDTDepositRemoved',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'user',
    type: 'address'
  }, {
    indexed: false,
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'minimum',
    type: 'uint256'
  }],
  name: 'USDTDepositNotAccepted',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'user',
    type: 'address'
  }, {
    indexed: false,
    name: 'amount',
    type: 'uint256'
  }],
  name: 'SUSDWithdrawal',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'user',
    type: 'address'
  }, {
    indexed: false,
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: true,
    name: 'depositIndex',
    type: 'uint256'
  }],
  name: 'eSUSDDeposit',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'user',
    type: 'address'
  }, {
    indexed: false,
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: true,
    name: 'depositIndex',
    type: 'uint256'
  }],
  name: 'SUSDDepositRemoved',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'user',
    type: 'address'
  }, {
    indexed: false,
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'minimum',
    type: 'uint256'
  }],
  name: 'SUSDDepositNotAccepted',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'amount',
    type: 'uint256'
  }],
  name: 'MinimumDepositAmountUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'receiver',
    type: 'address'
  }, {
    indexed: false,
    name: 'amount',
    type: 'uint256'
  }],
  name: 'NonPayableContract',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'fromAddress',
    type: 'address'
  }, {
    indexed: true,
    name: 'toAddress',
    type: 'address'
  }, {
    indexed: false,
    name: 'fromETHAmount',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'toAmount',
    type: 'uint256'
  }, {
    indexed: true,
    name: 'depositIndex',
    type: 'uint256'
  }],
  name: 'ClearedDeposit',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'isPaused',
    type: 'bool'
  }],
  name: 'PauseChanged',
  type: 'event'
}, {
  anonymous: false,
  inputs: [],
  name: 'SelfDestructTerminated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'beneficiary',
    type: 'address'
  }],
  name: 'SelfDestructed',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'selfDestructDelay',
    type: 'uint256'
  }],
  name: 'SelfDestructInitiated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newBeneficiary',
    type: 'address'
  }],
  name: 'SelfDestructBeneficiaryUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerNominated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'oldOwner',
    type: 'address'
  }, {
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerChanged',
  type: 'event'
}]);
// CONCATENATED MODULE: ./lib/abis/mainnet/EscrowChecker.js
/* harmony default export */ var EscrowChecker = ([{
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'checkAccountSchedule',
  outputs: [{
    name: '',
    type: 'uint256[16]'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'synthetix_escrow',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    name: '_esc',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'constructor'
}]);
// CONCATENATED MODULE: ./lib/abis/mainnet/ExchangeRates.js
/* harmony default export */ var ExchangeRates = ([{
  constant: true,
  inputs: [{
    name: 'currencyKey',
    type: 'bytes32'
  }],
  name: 'rateIsStale',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'currencyKeys',
    type: 'bytes32[]'
  }],
  name: 'lastRateUpdateTimesForCurrencies',
  outputs: [{
    name: '',
    type: 'uint256[]'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'rateStalePeriod',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_owner',
    type: 'address'
  }],
  name: 'nominateNewOwner',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'initiationTime',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_beneficiary',
    type: 'address'
  }],
  name: 'setSelfDestructBeneficiary',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'currencyKey',
    type: 'bytes32'
  }],
  name: 'removeAggregator',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'currencyKeys',
    type: 'bytes32[]'
  }],
  name: 'anyRateIsStale',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'uint256'
  }],
  name: 'invertedKeys',
  outputs: [{
    name: '',
    type: 'bytes32'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'terminateSelfDestruct',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'currencyKey',
    type: 'bytes32'
  }, {
    name: 'aggregatorAddress',
    type: 'address'
  }],
  name: 'addAggregator',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'currencyKey',
    type: 'bytes32'
  }],
  name: 'deleteRate',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'uint256'
  }],
  name: 'aggregatorKeys',
  outputs: [{
    name: '',
    type: 'bytes32'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'nominatedOwner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'sourceCurrencyKey',
    type: 'bytes32'
  }, {
    name: 'sourceAmount',
    type: 'uint256'
  }, {
    name: 'destinationCurrencyKey',
    type: 'bytes32'
  }],
  name: 'effectiveValue',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'bytes32'
  }],
  name: 'aggregators',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'bytes32'
  }],
  name: 'inversePricing',
  outputs: [{
    name: 'entryPoint',
    type: 'uint256'
  }, {
    name: 'upperLimit',
    type: 'uint256'
  }, {
    name: 'lowerLimit',
    type: 'uint256'
  }, {
    name: 'frozen',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'acceptOwnership',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_time',
    type: 'uint256'
  }],
  name: 'setRateStalePeriod',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_oracle',
    type: 'address'
  }],
  name: 'setOracle',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'oracle',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'bytes32'
  }],
  name: 'isXDRParticipant',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'owner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'selfDestruct',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'SELFDESTRUCT_DELAY',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'uint256'
  }],
  name: 'xdrParticipants',
  outputs: [{
    name: '',
    type: 'bytes32'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'currencyKey',
    type: 'bytes32'
  }],
  name: 'rateForCurrency',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'currencyKey',
    type: 'bytes32'
  }],
  name: 'rateIsFrozen',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'currencyKey',
    type: 'bytes32'
  }, {
    name: 'entryPoint',
    type: 'uint256'
  }, {
    name: 'upperLimit',
    type: 'uint256'
  }, {
    name: 'lowerLimit',
    type: 'uint256'
  }, {
    name: 'freeze',
    type: 'bool'
  }, {
    name: 'freezeAtUpperLimit',
    type: 'bool'
  }],
  name: 'setInversePricing',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'selfDestructInitiated',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'currencyKeys',
    type: 'bytes32[]'
  }],
  name: 'ratesAndStaleForCurrencies',
  outputs: [{
    name: '',
    type: 'uint256[]'
  }, {
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'initiateSelfDestruct',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'currencyKeys',
    type: 'bytes32[]'
  }, {
    name: 'newRates',
    type: 'uint256[]'
  }, {
    name: 'timeSent',
    type: 'uint256'
  }],
  name: 'updateRates',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'currencyKeys',
    type: 'bytes32[]'
  }],
  name: 'ratesForCurrencies',
  outputs: [{
    name: '',
    type: 'uint256[]'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'selfDestructBeneficiary',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'currencyKey',
    type: 'bytes32'
  }],
  name: 'removeInversePricing',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'code',
    type: 'bytes32'
  }],
  name: 'lastRateUpdateTimes',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'code',
    type: 'bytes32'
  }],
  name: 'rates',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    name: '_owner',
    type: 'address'
  }, {
    name: '_oracle',
    type: 'address'
  }, {
    name: '_currencyKeys',
    type: 'bytes32[]'
  }, {
    name: '_newRates',
    type: 'uint256[]'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newOracle',
    type: 'address'
  }],
  name: 'OracleUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'rateStalePeriod',
    type: 'uint256'
  }],
  name: 'RateStalePeriodUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'currencyKeys',
    type: 'bytes32[]'
  }, {
    indexed: false,
    name: 'newRates',
    type: 'uint256[]'
  }],
  name: 'RatesUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'currencyKey',
    type: 'bytes32'
  }],
  name: 'RateDeleted',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'currencyKey',
    type: 'bytes32'
  }, {
    indexed: false,
    name: 'entryPoint',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'upperLimit',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'lowerLimit',
    type: 'uint256'
  }],
  name: 'InversePriceConfigured',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'currencyKey',
    type: 'bytes32'
  }],
  name: 'InversePriceFrozen',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'currencyKey',
    type: 'bytes32'
  }, {
    indexed: false,
    name: 'aggregator',
    type: 'address'
  }],
  name: 'AggregatorAdded',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'currencyKey',
    type: 'bytes32'
  }, {
    indexed: false,
    name: 'aggregator',
    type: 'address'
  }],
  name: 'AggregatorRemoved',
  type: 'event'
}, {
  anonymous: false,
  inputs: [],
  name: 'SelfDestructTerminated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'beneficiary',
    type: 'address'
  }],
  name: 'SelfDestructed',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'selfDestructDelay',
    type: 'uint256'
  }],
  name: 'SelfDestructInitiated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newBeneficiary',
    type: 'address'
  }],
  name: 'SelfDestructBeneficiaryUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerNominated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'oldOwner',
    type: 'address'
  }, {
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerChanged',
  type: 'event'
}]);
// CONCATENATED MODULE: ./lib/abis/mainnet/FeePool.js
/* harmony default export */ var FeePool = ([{
  constant: false,
  inputs: [{
    name: '_feePeriodDuration',
    type: 'uint256'
  }],
  name: 'setFeePeriodDuration',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_feePoolState',
    type: 'address'
  }],
  name: 'setFeePoolState',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '_claimingAddress',
    type: 'address'
  }],
  name: 'getLastFeeWithdrawal',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }, {
    name: 'period',
    type: 'uint256'
  }],
  name: 'effectiveDebtRatioForPeriod',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'exchangeFeeRate',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_integrationProxy',
    type: 'address'
  }],
  name: 'setIntegrationProxy',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_owner',
    type: 'address'
  }],
  name: 'nominateNewOwner',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'initiationTime',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_rewardsAuthority',
    type: 'address'
  }],
  name: 'setRewardsAuthority',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_beneficiary',
    type: 'address'
  }],
  name: 'setSelfDestructBeneficiary',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'feePeriodDuration',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'xdrAmount',
    type: 'uint256'
  }],
  name: 'recordFeePaid',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_percent',
    type: 'uint256'
  }],
  name: 'setTargetThreshold',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'terminateSelfDestruct',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'feesByPeriod',
  outputs: [{
    name: 'results',
    type: 'uint256[2][3]'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'closeCurrentFeePeriod',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'index',
    type: 'uint256'
  }],
  name: 'recentFeePeriods',
  outputs: [{
    name: 'feePeriodId',
    type: 'uint64'
  }, {
    name: 'startingDebtIndex',
    type: 'uint64'
  }, {
    name: 'startTime',
    type: 'uint64'
  }, {
    name: 'feesToDistribute',
    type: 'uint256'
  }, {
    name: 'feesClaimed',
    type: 'uint256'
  }, {
    name: 'rewardsToDistribute',
    type: 'uint256'
  }, {
    name: 'rewardsClaimed',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'approveClaimOnBehalf',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'feePoolEternalStorage',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'nominatedOwner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_exchangeFeeRate',
    type: 'uint256'
  }],
  name: 'setExchangeFeeRate',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'isFeesClaimable',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_delegates',
    type: 'address'
  }],
  name: 'setDelegateApprovals',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'delegates',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'claimingForAddress',
    type: 'address'
  }],
  name: 'claimOnBehalf',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'removeClaimOnBehalf',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'totalRewardsAvailable',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'synthetix',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'acceptOwnership',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'account',
    type: 'address'
  }, {
    name: 'debtRatio',
    type: 'uint256'
  }, {
    name: 'debtEntryIndex',
    type: 'uint256'
  }],
  name: 'appendAccountIssuanceRecord',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'owner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_proxy',
    type: 'address'
  }],
  name: 'setProxy',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }, {
    name: 'currencyKey',
    type: 'bytes32'
  }],
  name: 'feesAvailable',
  outputs: [{
    name: '',
    type: 'uint256'
  }, {
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'selfDestruct',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'integrationProxy',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'rewardEscrow',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'SELFDESTRUCT_DELAY',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'getPenaltyThresholdRatio',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'feePeriodIndex',
    type: 'uint256'
  }, {
    name: 'feePeriodId',
    type: 'uint256'
  }, {
    name: 'startingDebtIndex',
    type: 'uint256'
  }, {
    name: 'startTime',
    type: 'uint256'
  }, {
    name: 'feesToDistribute',
    type: 'uint256'
  }, {
    name: 'feesClaimed',
    type: 'uint256'
  }, {
    name: 'rewardsToDistribute',
    type: 'uint256'
  }, {
    name: 'rewardsClaimed',
    type: 'uint256'
  }],
  name: 'importFeePeriod',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'account',
    type: 'address'
  }, {
    name: 'quantity',
    type: 'uint256'
  }],
  name: 'appendVestingEntry',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'value',
    type: 'uint256'
  }],
  name: 'amountReceivedFromTransfer',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'pure',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'selfDestructInitiated',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'sender',
    type: 'address'
  }],
  name: 'setMessageSender',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'initiateSelfDestruct',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'selfDestructBeneficiary',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'value',
    type: 'uint256'
  }],
  name: 'exchangeFeeIncurred',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'FEE_PERIOD_LENGTH',
  outputs: [{
    name: '',
    type: 'uint8'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'rewardsAuthority',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'claimFees',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'MIN_FEE_PERIOD_DURATION',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'messageSender',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'synthetixState',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'value',
    type: 'uint256'
  }],
  name: 'amountReceivedFromExchange',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'targetThreshold',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'feePoolState',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'currencyKey',
    type: 'bytes32'
  }],
  name: 'totalFeesAvailable',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'FEE_ADDRESS',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'proxy',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'MAX_FEE_PERIOD_DURATION',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'MAX_EXCHANGE_FEE_RATE',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'amount',
    type: 'uint256'
  }],
  name: 'setRewardsToDistribute',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_synthetix',
    type: 'address'
  }],
  name: 'setSynthetix',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    name: '_proxy',
    type: 'address'
  }, {
    name: '_owner',
    type: 'address'
  }, {
    name: '_synthetix',
    type: 'address'
  }, {
    name: '_feePoolState',
    type: 'address'
  }, {
    name: '_feePoolEternalStorage',
    type: 'address'
  }, {
    name: '_synthetixState',
    type: 'address'
  }, {
    name: '_rewardEscrow',
    type: 'address'
  }, {
    name: '_rewardsAuthority',
    type: 'address'
  }, {
    name: '_exchangeFeeRate',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'account',
    type: 'address'
  }, {
    indexed: false,
    name: 'debtRatio',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'debtEntryIndex',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'feePeriodStartingDebtIndex',
    type: 'uint256'
  }],
  name: 'IssuanceDebtRatioEntry',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newFeeRate',
    type: 'uint256'
  }],
  name: 'ExchangeFeeUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newFeePeriodDuration',
    type: 'uint256'
  }],
  name: 'FeePeriodDurationUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'feePeriodId',
    type: 'uint256'
  }],
  name: 'FeePeriodClosed',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'account',
    type: 'address'
  }, {
    indexed: false,
    name: 'xdrAmount',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'snxRewards',
    type: 'uint256'
  }],
  name: 'FeesClaimed',
  type: 'event'
}, {
  anonymous: false,
  inputs: [],
  name: 'SelfDestructTerminated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'beneficiary',
    type: 'address'
  }],
  name: 'SelfDestructed',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'selfDestructDelay',
    type: 'uint256'
  }],
  name: 'SelfDestructInitiated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newBeneficiary',
    type: 'address'
  }],
  name: 'SelfDestructBeneficiaryUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'proxyAddress',
    type: 'address'
  }],
  name: 'ProxyUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerNominated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'oldOwner',
    type: 'address'
  }, {
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerChanged',
  type: 'event'
}]);
// CONCATENATED MODULE: ./lib/abis/mainnet/ProxyERC20.js
/* harmony default export */ var ProxyERC20 = ([{
  constant: true,
  inputs: [],
  name: 'name',
  outputs: [{
    name: '',
    type: 'string'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'spender',
    type: 'address'
  }, {
    name: 'value',
    type: 'uint256'
  }],
  name: 'approve',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_owner',
    type: 'address'
  }],
  name: 'nominateNewOwner',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'totalSupply',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'from',
    type: 'address'
  }, {
    name: 'to',
    type: 'address'
  }, {
    name: 'value',
    type: 'uint256'
  }],
  name: 'transferFrom',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'decimals',
  outputs: [{
    name: '',
    type: 'uint8'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'nominatedOwner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'balanceOf',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_target',
    type: 'address'
  }],
  name: 'setTarget',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'acceptOwnership',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'owner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'callData',
    type: 'bytes'
  }, {
    name: 'numTopics',
    type: 'uint256'
  }, {
    name: 'topic1',
    type: 'bytes32'
  }, {
    name: 'topic2',
    type: 'bytes32'
  }, {
    name: 'topic3',
    type: 'bytes32'
  }, {
    name: 'topic4',
    type: 'bytes32'
  }],
  name: '_emit',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'useDELEGATECALL',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'symbol',
  outputs: [{
    name: '',
    type: 'string'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'to',
    type: 'address'
  }, {
    name: 'value',
    type: 'uint256'
  }],
  name: 'transfer',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'value',
    type: 'bool'
  }],
  name: 'setUseDELEGATECALL',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'target',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'owner',
    type: 'address'
  }, {
    name: 'spender',
    type: 'address'
  }],
  name: 'allowance',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    name: '_owner',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  payable: true,
  stateMutability: 'payable',
  type: 'fallback',
  name: 'fallback'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'from',
    type: 'address'
  }, {
    indexed: true,
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    name: 'value',
    type: 'uint256'
  }],
  name: 'Transfer',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'owner',
    type: 'address'
  }, {
    indexed: true,
    name: 'spender',
    type: 'address'
  }, {
    indexed: false,
    name: 'value',
    type: 'uint256'
  }],
  name: 'Approval',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newTarget',
    type: 'address'
  }],
  name: 'TargetUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'account',
    type: 'address'
  }, {
    indexed: false,
    name: 'fromCurrencyKey',
    type: 'bytes32'
  }, {
    indexed: false,
    name: 'fromAmount',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'toCurrencyKey',
    type: 'bytes32'
  }, {
    indexed: false,
    name: 'toAmount',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'toAddress',
    type: 'address'
  }],
  name: 'SynthExchange',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerNominated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'oldOwner',
    type: 'address'
  }, {
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerChanged',
  type: 'event'
}]);
// CONCATENATED MODULE: ./lib/abis/mainnet/Synth.js
/* harmony default export */ var mainnet_Synth = ([{
  constant: true,
  inputs: [],
  name: 'name',
  outputs: [{
    name: '',
    type: 'string'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'spender',
    type: 'address'
  }, {
    name: 'value',
    type: 'uint256'
  }],
  name: 'approve',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_integrationProxy',
    type: 'address'
  }],
  name: 'setIntegrationProxy',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_owner',
    type: 'address'
  }],
  name: 'nominateNewOwner',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'initiationTime',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'totalSupply',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_beneficiary',
    type: 'address'
  }],
  name: 'setSelfDestructBeneficiary',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'from',
    type: 'address'
  }, {
    name: 'to',
    type: 'address'
  }, {
    name: 'value',
    type: 'uint256'
  }],
  name: 'transferFrom',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'decimals',
  outputs: [{
    name: '',
    type: 'uint8'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'terminateSelfDestruct',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'nominatedOwner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'balanceOf',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'acceptOwnership',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'account',
    type: 'address'
  }, {
    name: 'amount',
    type: 'uint256'
  }],
  name: 'issue',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'owner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_synthetixProxy',
    type: 'address'
  }],
  name: 'setSynthetixProxy',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'symbol',
  outputs: [{
    name: '',
    type: 'string'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_proxy',
    type: 'address'
  }],
  name: 'setProxy',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'selfDestruct',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'integrationProxy',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'account',
    type: 'address'
  }, {
    name: 'amount',
    type: 'uint256'
  }],
  name: 'burn',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_tokenState',
    type: 'address'
  }],
  name: 'setTokenState',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'SELFDESTRUCT_DELAY',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'to',
    type: 'address'
  }, {
    name: 'value',
    type: 'uint256'
  }],
  name: 'transfer',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'selfDestructInitiated',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'sender',
    type: 'address'
  }],
  name: 'setMessageSender',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'initiateSelfDestruct',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'synthetixProxy',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'selfDestructBeneficiary',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'feePoolProxy',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'messageSender',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_feePoolProxy',
    type: 'address'
  }],
  name: 'setFeePoolProxy',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'currencyKey',
  outputs: [{
    name: '',
    type: 'bytes32'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'owner',
    type: 'address'
  }, {
    name: 'spender',
    type: 'address'
  }],
  name: 'allowance',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'tokenState',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'proxy',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'amount',
    type: 'uint256'
  }],
  name: 'setTotalSupply',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    name: '_proxy',
    type: 'address'
  }, {
    name: '_tokenState',
    type: 'address'
  }, {
    name: '_synthetixProxy',
    type: 'address'
  }, {
    name: '_feePoolProxy',
    type: 'address'
  }, {
    name: '_tokenName',
    type: 'string'
  }, {
    name: '_tokenSymbol',
    type: 'string'
  }, {
    name: '_owner',
    type: 'address'
  }, {
    name: '_currencyKey',
    type: 'bytes32'
  }, {
    name: '_totalSupply',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newSynthetix',
    type: 'address'
  }],
  name: 'SynthetixUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newFeePool',
    type: 'address'
  }],
  name: 'FeePoolUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'account',
    type: 'address'
  }, {
    indexed: false,
    name: 'value',
    type: 'uint256'
  }],
  name: 'Issued',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'account',
    type: 'address'
  }, {
    indexed: false,
    name: 'value',
    type: 'uint256'
  }],
  name: 'Burned',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'from',
    type: 'address'
  }, {
    indexed: true,
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    name: 'value',
    type: 'uint256'
  }],
  name: 'Transfer',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'owner',
    type: 'address'
  }, {
    indexed: true,
    name: 'spender',
    type: 'address'
  }, {
    indexed: false,
    name: 'value',
    type: 'uint256'
  }],
  name: 'Approval',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newTokenState',
    type: 'address'
  }],
  name: 'TokenStateUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'proxyAddress',
    type: 'address'
  }],
  name: 'ProxyUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [],
  name: 'SelfDestructTerminated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'beneficiary',
    type: 'address'
  }],
  name: 'SelfDestructed',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'selfDestructDelay',
    type: 'uint256'
  }],
  name: 'SelfDestructInitiated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newBeneficiary',
    type: 'address'
  }],
  name: 'SelfDestructBeneficiaryUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerNominated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'oldOwner',
    type: 'address'
  }, {
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerChanged',
  type: 'event'
}]);
// CONCATENATED MODULE: ./lib/abis/mainnet/Synthetix.js
/* harmony default export */ var mainnet_Synthetix = ([{
  constant: true,
  inputs: [],
  name: 'name',
  outputs: [{
    name: '',
    type: 'string'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_gasPriceLimit',
    type: 'uint256'
  }],
  name: 'setGasPriceLimit',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'deprecateTronChain',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'spender',
    type: 'address'
  }, {
    name: 'value',
    type: 'uint256'
  }],
  name: 'approve',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'currencyKey',
    type: 'bytes32'
  }],
  name: 'removeSynth',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'mint',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_integrationProxy',
    type: 'address'
  }],
  name: 'setIntegrationProxy',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_owner',
    type: 'address'
  }],
  name: 'nominateNewOwner',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'address'
  }],
  name: 'synthsByAddress',
  outputs: [{
    name: '',
    type: 'bytes32'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'initiationTime',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'totalSupply',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_feePool',
    type: 'address'
  }],
  name: 'setFeePool',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'sourceCurrencyKey',
    type: 'bytes32'
  }, {
    name: 'destinationCurrencyKey',
    type: 'bytes32'
  }],
  name: 'feeRateForExchange',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_gasLimitOracle',
    type: 'address'
  }],
  name: 'setGasLimitOracle',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_beneficiary',
    type: 'address'
  }],
  name: 'setSelfDestructBeneficiary',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'from',
    type: 'address'
  }, {
    name: 'to',
    type: 'address'
  }, {
    name: 'value',
    type: 'uint256'
  }],
  name: 'transferFrom',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'amount',
    type: 'uint256'
  }],
  name: 'burnSynths',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'decimals',
  outputs: [{
    name: '',
    type: 'uint8'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'bytes32'
  }],
  name: 'synths',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'terminateSelfDestruct',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'immediateVestAll',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'address'
  }],
  name: 'hasVestedAll',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'rewardsDistribution',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'escrowedBalance',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'exchangeRates',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'nominatedOwner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_exchangeRates',
    type: 'address'
  }],
  name: 'setExchangeRates',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'sourceCurrencyKey',
    type: 'bytes32'
  }, {
    name: 'sourceAmount',
    type: 'uint256'
  }, {
    name: 'destinationCurrencyKey',
    type: 'bytes32'
  }],
  name: 'effectiveValue',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'transferableSynthetix',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '_givenGasPrice',
    type: 'uint256'
  }],
  name: 'validateGasPrice',
  outputs: [],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'balanceOf',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'availableCurrencyKeys',
  outputs: [{
    name: '',
    type: 'bytes32[]'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'tronChainDeprecated',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'acceptOwnership',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'issuer',
    type: 'address'
  }, {
    name: 'currencyKey',
    type: 'bytes32'
  }],
  name: 'remainingIssuableSynths',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'uint256'
  }],
  name: 'availableSynths',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'currencyKey',
    type: 'bytes32'
  }],
  name: 'totalIssuedSynths',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'synth',
    type: 'address'
  }],
  name: 'addSynth',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'amount',
    type: 'uint256'
  }],
  name: 'issueSynths',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'owner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_exchangeEnabled',
    type: 'bool'
  }],
  name: 'setExchangeEnabled',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'symbol',
  outputs: [{
    name: '',
    type: 'string'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'gasPriceLimit',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_proxy',
    type: 'address'
  }],
  name: 'setProxy',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'selfDestruct',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'integrationProxy',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_tokenState',
    type: 'address'
  }],
  name: 'setTokenState',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'issuer',
    type: 'address'
  }],
  name: 'collateralisationRatio',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'rewardEscrow',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'SELFDESTRUCT_DELAY',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'collateral',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'issuer',
    type: 'address'
  }, {
    name: 'currencyKey',
    type: 'bytes32'
  }],
  name: 'maxIssuableSynths',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'to',
    type: 'address'
  }, {
    name: 'value',
    type: 'uint256'
  }],
  name: 'transfer',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'from',
    type: 'address'
  }, {
    name: 'sourceCurrencyKey',
    type: 'bytes32'
  }, {
    name: 'sourceAmount',
    type: 'uint256'
  }, {
    name: 'destinationCurrencyKey',
    type: 'bytes32'
  }, {
    name: 'destinationAddress',
    type: 'address'
  }],
  name: 'synthInitiatedExchange',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'feePool',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'issueMaxSynths',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'selfDestructInitiated',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'sender',
    type: 'address'
  }],
  name: 'setMessageSender',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'initiateSelfDestruct',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'supplySchedule',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'selfDestructBeneficiary',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_protectionCircuitIsActivated',
    type: 'bool'
  }],
  name: 'setProtectionCircuit',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'issuer',
    type: 'address'
  }, {
    name: 'currencyKey',
    type: 'bytes32'
  }],
  name: 'debtBalanceOf',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'messageSender',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'synthetixState',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'availableSynthCount',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'owner',
    type: 'address'
  }, {
    name: 'spender',
    type: 'address'
  }],
  name: 'allowance',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'escrow',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'tokenState',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'proxy',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'sourceCurrencyKey',
    type: 'bytes32'
  }, {
    name: 'sourceAmount',
    type: 'uint256'
  }, {
    name: 'destinationCurrencyKey',
    type: 'bytes32'
  }],
  name: 'exchange',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'exchangeEnabled',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'gasLimitOracle',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    name: '_proxy',
    type: 'address'
  }, {
    name: '_tokenState',
    type: 'address'
  }, {
    name: '_synthetixState',
    type: 'address'
  }, {
    name: '_owner',
    type: 'address'
  }, {
    name: '_exchangeRates',
    type: 'address'
  }, {
    name: '_feePool',
    type: 'address'
  }, {
    name: '_supplySchedule',
    type: 'address'
  }, {
    name: '_rewardEscrow',
    type: 'address'
  }, {
    name: '_escrow',
    type: 'address'
  }, {
    name: '_rewardsDistribution',
    type: 'address'
  }, {
    name: '_totalSupply',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'account',
    type: 'address'
  }, {
    indexed: false,
    name: 'fromCurrencyKey',
    type: 'bytes32'
  }, {
    indexed: false,
    name: 'fromAmount',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'toCurrencyKey',
    type: 'bytes32'
  }, {
    indexed: false,
    name: 'toAmount',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'toAddress',
    type: 'address'
  }],
  name: 'SynthExchange',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'from',
    type: 'address'
  }, {
    indexed: true,
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    name: 'value',
    type: 'uint256'
  }],
  name: 'Transfer',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'owner',
    type: 'address'
  }, {
    indexed: true,
    name: 'spender',
    type: 'address'
  }, {
    indexed: false,
    name: 'value',
    type: 'uint256'
  }],
  name: 'Approval',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newTokenState',
    type: 'address'
  }],
  name: 'TokenStateUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'proxyAddress',
    type: 'address'
  }],
  name: 'ProxyUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [],
  name: 'SelfDestructTerminated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'beneficiary',
    type: 'address'
  }],
  name: 'SelfDestructed',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'selfDestructDelay',
    type: 'uint256'
  }],
  name: 'SelfDestructInitiated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newBeneficiary',
    type: 'address'
  }],
  name: 'SelfDestructBeneficiaryUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerNominated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'oldOwner',
    type: 'address'
  }, {
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerChanged',
  type: 'event'
}]);
// CONCATENATED MODULE: ./lib/abis/mainnet/SynthetixEscrow.js
/* harmony default export */ var SynthetixEscrow = ([{
  constant: false,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'purgeAccount',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_owner',
    type: 'address'
  }],
  name: 'nominateNewOwner',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'getNextVestingIndex',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'account',
    type: 'address'
  }, {
    name: 'time',
    type: 'uint256'
  }, {
    name: 'quantity',
    type: 'uint256'
  }],
  name: 'appendVestingEntry',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'numVestingEntries',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'address'
  }],
  name: 'totalVestedAccountBalance',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'getNextVestingEntry',
  outputs: [{
    name: '',
    type: 'uint256[2]'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'vest',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'address'
  }, {
    name: '',
    type: 'uint256'
  }, {
    name: '',
    type: 'uint256'
  }],
  name: 'vestingSchedules',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'nominatedOwner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'getNextVestingTime',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'balanceOf',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'synthetix',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'acceptOwnership',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'owner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'getNextVestingQuantity',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }, {
    name: 'index',
    type: 'uint256'
  }],
  name: 'getVestingTime',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'totalVestedBalance',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'account',
    type: 'address'
  }, {
    name: 'times',
    type: 'uint256[]'
  }, {
    name: 'quantities',
    type: 'uint256[]'
  }],
  name: 'addVestingSchedule',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }, {
    name: 'index',
    type: 'uint256'
  }],
  name: 'getVestingScheduleEntry',
  outputs: [{
    name: '',
    type: 'uint256[2]'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'quantity',
    type: 'uint256'
  }],
  name: 'withdrawSynthetix',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }, {
    name: 'index',
    type: 'uint256'
  }],
  name: 'getVestingQuantity',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_synthetix',
    type: 'address'
  }],
  name: 'setSynthetix',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    name: '_owner',
    type: 'address'
  }, {
    name: '_synthetix',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newSynthetix',
    type: 'address'
  }],
  name: 'SynthetixUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'beneficiary',
    type: 'address'
  }, {
    indexed: false,
    name: 'time',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'value',
    type: 'uint256'
  }],
  name: 'Vested',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerNominated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'oldOwner',
    type: 'address'
  }, {
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerChanged',
  type: 'event'
}]);
// CONCATENATED MODULE: ./lib/abis/mainnet/SynthetixState.js
/* harmony default export */ var SynthetixState = ([{
  constant: false,
  inputs: [{
    name: '_issuanceRatio',
    type: 'uint256'
  }],
  name: 'setIssuanceRatio',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'uint256'
  }],
  name: 'debtLedger',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_owner',
    type: 'address'
  }],
  name: 'nominateNewOwner',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'importedXDRAmount',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'incrementTotalIssuerCount',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'value',
    type: 'uint256'
  }],
  name: 'appendDebtLedgerValue',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'lastDebtLedgerEntry',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'account',
    type: 'address'
  }, {
    name: 'currencyKey',
    type: 'bytes4'
  }],
  name: 'setPreferredCurrency',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_associatedContract',
    type: 'address'
  }],
  name: 'setAssociatedContract',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'nominatedOwner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'acceptOwnership',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'address'
  }],
  name: 'issuanceData',
  outputs: [{
    name: 'initialDebtOwnership',
    type: 'uint256'
  }, {
    name: 'debtEntryIndex',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'owner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'totalIssuerCount',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'accounts',
    type: 'address[]'
  }, {
    name: 'sUSDAmounts',
    type: 'uint256[]'
  }],
  name: 'importIssuerData',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'account',
    type: 'address'
  }, {
    name: 'initialDebtOwnership',
    type: 'uint256'
  }],
  name: 'setCurrentIssuanceData',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'associatedContract',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'clearIssuanceData',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'issuanceRatio',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'hasIssued',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'decrementTotalIssuerCount',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'address'
  }],
  name: 'preferredCurrency',
  outputs: [{
    name: '',
    type: 'bytes4'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'debtLedgerLength',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    name: '_owner',
    type: 'address'
  }, {
    name: '_associatedContract',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newRatio',
    type: 'uint256'
  }],
  name: 'IssuanceRatioUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'associatedContract',
    type: 'address'
  }],
  name: 'AssociatedContractUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerNominated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'oldOwner',
    type: 'address'
  }, {
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerChanged',
  type: 'event'
}]);
// CONCATENATED MODULE: ./lib/abis/mainnet/RewardEscrow.js
/* harmony default export */ var RewardEscrow = ([{
  constant: false,
  inputs: [{
    name: '_owner',
    type: 'address'
  }],
  name: 'nominateNewOwner',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_feePool',
    type: 'address'
  }],
  name: 'setFeePool',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'getNextVestingIndex',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'numVestingEntries',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'address'
  }],
  name: 'totalVestedAccountBalance',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'getNextVestingEntry',
  outputs: [{
    name: '',
    type: 'uint256[2]'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'address'
  }],
  name: 'totalEscrowedAccountBalance',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'checkAccountSchedule',
  outputs: [{
    name: '',
    type: 'uint256[520]'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'vest',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'address'
  }, {
    name: '',
    type: 'uint256'
  }, {
    name: '',
    type: 'uint256'
  }],
  name: 'vestingSchedules',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'nominatedOwner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'getNextVestingTime',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'balanceOf',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'totalEscrowedBalance',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'synthetix',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'acceptOwnership',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'owner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'getNextVestingQuantity',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }, {
    name: 'index',
    type: 'uint256'
  }],
  name: 'getVestingTime',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'feePool',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'account',
    type: 'address'
  }, {
    name: 'quantity',
    type: 'uint256'
  }],
  name: 'appendVestingEntry',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'MAX_VESTING_ENTRIES',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }, {
    name: 'index',
    type: 'uint256'
  }],
  name: 'getVestingScheduleEntry',
  outputs: [{
    name: '',
    type: 'uint256[2]'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }, {
    name: 'index',
    type: 'uint256'
  }],
  name: 'getVestingQuantity',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_synthetix',
    type: 'address'
  }],
  name: 'setSynthetix',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    name: '_owner',
    type: 'address'
  }, {
    name: '_synthetix',
    type: 'address'
  }, {
    name: '_feePool',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newSynthetix',
    type: 'address'
  }],
  name: 'SynthetixUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newFeePool',
    type: 'address'
  }],
  name: 'FeePoolUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'beneficiary',
    type: 'address'
  }, {
    indexed: false,
    name: 'time',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'value',
    type: 'uint256'
  }],
  name: 'Vested',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'beneficiary',
    type: 'address'
  }, {
    indexed: false,
    name: 'time',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'value',
    type: 'uint256'
  }],
  name: 'VestingEntryCreated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerNominated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'oldOwner',
    type: 'address'
  }, {
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerChanged',
  type: 'event'
}]);
// CONCATENATED MODULE: ./lib/abis/mainnet/DappMaintenance.js
/* harmony default export */ var DappMaintenance = ([{
  constant: false,
  inputs: [{
    name: 'isPaused',
    type: 'bool'
  }],
  name: 'setMaintenanceModeMintr',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_owner',
    type: 'address'
  }],
  name: 'nominateNewOwner',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'isPaused',
    type: 'bool'
  }],
  name: 'setMaintenanceModeAll',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'isPausedMintr',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'nominatedOwner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'acceptOwnership',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'owner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'isPausedSX',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'isPaused',
    type: 'bool'
  }],
  name: 'setMaintenanceModeSX',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    name: '_owner',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'isPaused',
    type: 'bool'
  }],
  name: 'MintrMaintenance',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'isPaused',
    type: 'bool'
  }],
  name: 'SXMaintenance',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerNominated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'oldOwner',
    type: 'address'
  }, {
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerChanged',
  type: 'event'
}]);
// CONCATENATED MODULE: ./lib/abis/mainnet/ArbRewarder.js
/* harmony default export */ var ArbRewarder = ([{
  constant: true,
  inputs: [],
  name: 'uniswapAddress',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'synth',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'to_addr',
    type: 'address'
  }],
  name: 'recoverETH',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_owner',
    type: 'address'
  }],
  name: 'nominateNewOwner',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_paused',
    type: 'bool'
  }],
  name: 'setPaused',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'initiationTime',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_beneficiary',
    type: 'address'
  }],
  name: 'setSelfDestructBeneficiary',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'isArbable',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'terminateSelfDestruct',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'exchangeRates',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'nominatedOwner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_exchangeRatesAddress',
    type: 'address'
  }],
  name: 'setExchangeRates',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_acceptable_slippage',
    type: 'uint256'
  }, {
    name: '_max_delay',
    type: 'uint256'
  }, {
    name: '_off_peg_min',
    type: 'uint256'
  }],
  name: 'setParams',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'paused',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'uniswapExchange',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'synthetix',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_synthAddress',
    type: 'address'
  }],
  name: 'setSynthAddress',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'acceptOwnership',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'erc20_addr',
    type: 'address'
  }, {
    name: 'to_addr',
    type: 'address'
  }],
  name: 'recoverERC20',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'owner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'lastPauseTime',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'selfDestruct',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'SELFDESTRUCT_DELAY',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'arbSynthRate',
  outputs: [{
    name: 'reward_tokens',
    type: 'uint256'
  }],
  payable: true,
  stateMutability: 'payable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'selfDestructInitiated',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_uniswapAddress',
    type: 'address'
  }],
  name: 'setUniswapExchange',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'initiateSelfDestruct',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'synthetixProxy',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'selfDestructBeneficiary',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_address',
    type: 'address'
  }],
  name: 'setSynthetix',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    name: '_owner',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'isPaused',
    type: 'bool'
  }],
  name: 'PauseChanged',
  type: 'event'
}, {
  anonymous: false,
  inputs: [],
  name: 'SelfDestructTerminated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'beneficiary',
    type: 'address'
  }],
  name: 'SelfDestructed',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'selfDestructDelay',
    type: 'uint256'
  }],
  name: 'SelfDestructInitiated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newBeneficiary',
    type: 'address'
  }],
  name: 'SelfDestructBeneficiaryUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerNominated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'oldOwner',
    type: 'address'
  }, {
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerChanged',
  type: 'event'
}]);
// CONCATENATED MODULE: ./lib/abis/mainnet/index.js












/* harmony default export */ var mainnet = ({
  Depot: mainnet_Depot,
  EscrowChecker: EscrowChecker,
  ExchangeRates: ExchangeRates,
  FeePool: FeePool,
  ProxyERC20: ProxyERC20,
  Synth: mainnet_Synth,
  Synthetix: mainnet_Synthetix,
  SynthetixEscrow: SynthetixEscrow,
  SynthetixState: SynthetixState,
  RewardEscrow: RewardEscrow,
  DappMaintenance: DappMaintenance,
  ArbRewarder: ArbRewarder
});
// CONCATENATED MODULE: ./lib/abis/shasta/Depot.js
/* harmony default export */ var shasta_Depot = ([{
  constant: false,
  inputs: [],
  name: 'exchangeEtherForSNX',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: true,
  stateMutability: 'payable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'minimumDepositAmount',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'guaranteedRate',
    type: 'uint256'
  }],
  name: 'exchangeEtherForSynthsAtRate',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: true,
  stateMutability: 'payable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'amount',
    type: 'uint256'
  }],
  name: 'synthsReceivedForEther',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'synth',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'synthAmount',
    type: 'uint256'
  }],
  name: 'exchangeSynthsForSynthetix',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_owner',
    type: 'address'
  }],
  name: 'nominateNewOwner',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_paused',
    type: 'bool'
  }],
  name: 'setPaused',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'initiationTime',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'exchangeEtherForSynths',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: true,
  stateMutability: 'payable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_beneficiary',
    type: 'address'
  }],
  name: 'setSelfDestructBeneficiary',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'fundsWallet',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'priceStalePeriod',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_time',
    type: 'uint256'
  }],
  name: 'setPriceStalePeriod',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'terminateSelfDestruct',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_synth',
    type: 'address'
  }],
  name: 'setSynth',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'pricesAreStale',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'newEthPrice',
    type: 'uint256'
  }, {
    name: 'newSynthetixPrice',
    type: 'uint256'
  }, {
    name: 'timeSent',
    type: 'uint256'
  }],
  name: 'updatePrices',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'lastPriceUpdateTime',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'totalSellableDeposits',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'snxProxy',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'nominatedOwner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'synthAmount',
    type: 'uint256'
  }, {
    name: 'guaranteedRate',
    type: 'uint256'
  }],
  name: 'exchangeSynthsForSynthetixAtRate',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'paused',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_fundsWallet',
    type: 'address'
  }],
  name: 'setFundsWallet',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'depositStartIndex',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'acceptOwnership',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_oracle',
    type: 'address'
  }],
  name: 'setOracle',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'guaranteedEtherRate',
    type: 'uint256'
  }, {
    name: 'guaranteedSynthetixRate',
    type: 'uint256'
  }],
  name: 'exchangeEtherForSynthetixAtRate',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: true,
  stateMutability: 'payable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'oracle',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'withdrawMyDepositedSynths',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'owner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'lastPauseTime',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'selfDestruct',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'amount',
    type: 'uint256'
  }],
  name: 'synthetixReceivedForSynths',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'SELFDESTRUCT_DELAY',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_amount',
    type: 'uint256'
  }],
  name: 'setMinimumDepositAmount',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'feePool',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'uint256'
  }],
  name: 'deposits',
  outputs: [{
    name: 'user',
    type: 'address'
  }, {
    name: 'amount',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'selfDestructInitiated',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'usdToEthPrice',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'initiateSelfDestruct',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'selfDestructBeneficiary',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'address'
  }],
  name: 'smallDeposits',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'amount',
    type: 'uint256'
  }],
  name: 'synthetixReceivedForEther',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'amount',
    type: 'uint256'
  }],
  name: 'depositSynths',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'amount',
    type: 'uint256'
  }],
  name: 'withdrawSynthetix',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'usdToSnxPrice',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'ORACLE_FUTURE_LIMIT',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'depositEndIndex',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_snxProxy',
    type: 'address'
  }],
  name: 'setSynthetix',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    name: '_owner',
    type: 'address'
  }, {
    name: '_fundsWallet',
    type: 'address'
  }, {
    name: '_snxProxy',
    type: 'address'
  }, {
    name: '_synth',
    type: 'address'
  }, {
    name: '_feePool',
    type: 'address'
  }, {
    name: '_oracle',
    type: 'address'
  }, {
    name: '_usdToEthPrice',
    type: 'uint256'
  }, {
    name: '_usdToSnxPrice',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  payable: true,
  stateMutability: 'payable',
  type: 'fallback'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newFundsWallet',
    type: 'address'
  }],
  name: 'FundsWalletUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newOracle',
    type: 'address'
  }],
  name: 'OracleUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newSynthContract',
    type: 'address'
  }],
  name: 'SynthUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newSNXProxy',
    type: 'address'
  }],
  name: 'SynthetixUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'priceStalePeriod',
    type: 'uint256'
  }],
  name: 'PriceStalePeriodUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newEthPrice',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'newSynthetixPrice',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'timeSent',
    type: 'uint256'
  }],
  name: 'PricesUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'fromCurrency',
    type: 'string'
  }, {
    indexed: false,
    name: 'fromAmount',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'toCurrency',
    type: 'string'
  }, {
    indexed: false,
    name: 'toAmount',
    type: 'uint256'
  }],
  name: 'Exchange',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'user',
    type: 'address'
  }, {
    indexed: false,
    name: 'amount',
    type: 'uint256'
  }],
  name: 'SynthWithdrawal',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'user',
    type: 'address'
  }, {
    indexed: false,
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: true,
    name: 'depositIndex',
    type: 'uint256'
  }],
  name: 'SynthDeposit',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'user',
    type: 'address'
  }, {
    indexed: false,
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: true,
    name: 'depositIndex',
    type: 'uint256'
  }],
  name: 'SynthDepositRemoved',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'user',
    type: 'address'
  }, {
    indexed: false,
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'minimum',
    type: 'uint256'
  }],
  name: 'SynthDepositNotAccepted',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'amount',
    type: 'uint256'
  }],
  name: 'MinimumDepositAmountUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'receiver',
    type: 'address'
  }, {
    indexed: false,
    name: 'amount',
    type: 'uint256'
  }],
  name: 'NonPayableContract',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'fromAddress',
    type: 'address'
  }, {
    indexed: true,
    name: 'toAddress',
    type: 'address'
  }, {
    indexed: false,
    name: 'fromETHAmount',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'toAmount',
    type: 'uint256'
  }, {
    indexed: true,
    name: 'depositIndex',
    type: 'uint256'
  }],
  name: 'ClearedDeposit',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'isPaused',
    type: 'bool'
  }],
  name: 'PauseChanged',
  type: 'event'
}, {
  anonymous: false,
  inputs: [],
  name: 'SelfDestructTerminated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'beneficiary',
    type: 'address'
  }],
  name: 'SelfDestructed',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'selfDestructDelay',
    type: 'uint256'
  }],
  name: 'SelfDestructInitiated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newBeneficiary',
    type: 'address'
  }],
  name: 'SelfDestructBeneficiaryUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerNominated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'oldOwner',
    type: 'address'
  }, {
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerChanged',
  type: 'event'
}]);
// CONCATENATED MODULE: ./lib/abis/shasta/EscrowChecker.js

/* harmony default export */ var shasta_EscrowChecker = (EscrowChecker);
// CONCATENATED MODULE: ./lib/abis/shasta/ExchangeRates.js

/* harmony default export */ var shasta_ExchangeRates = (ExchangeRates);
// CONCATENATED MODULE: ./lib/abis/shasta/FeePool.js

/* harmony default export */ var shasta_FeePool = (FeePool);
// CONCATENATED MODULE: ./lib/abis/shasta/ProxyERC20.js
/* harmony default export */ var shasta_ProxyERC20 = ([{
  constant: true,
  inputs: [],
  name: 'name',
  outputs: [{
    name: '',
    type: 'string'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'spender',
    type: 'address'
  }, {
    name: 'value',
    type: 'uint256'
  }],
  name: 'approve',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_owner',
    type: 'address'
  }],
  name: 'nominateNewOwner',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'totalSupply',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'from',
    type: 'address'
  }, {
    name: 'to',
    type: 'address'
  }, {
    name: 'value',
    type: 'uint256'
  }],
  name: 'transferFrom',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'decimals',
  outputs: [{
    name: '',
    type: 'uint8'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'nominatedOwner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'balanceOf',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_target',
    type: 'address'
  }],
  name: 'setTarget',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'acceptOwnership',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'owner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'callData',
    type: 'bytes'
  }, {
    name: 'numTopics',
    type: 'uint256'
  }, {
    name: 'topic1',
    type: 'bytes32'
  }, {
    name: 'topic2',
    type: 'bytes32'
  }, {
    name: 'topic3',
    type: 'bytes32'
  }, {
    name: 'topic4',
    type: 'bytes32'
  }],
  name: '_emit',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'useDELEGATECALL',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'symbol',
  outputs: [{
    name: '',
    type: 'string'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'to',
    type: 'address'
  }, {
    name: 'value',
    type: 'uint256'
  }],
  name: 'transfer',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'value',
    type: 'bool'
  }],
  name: 'setUseDELEGATECALL',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'target',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'owner',
    type: 'address'
  }, {
    name: 'spender',
    type: 'address'
  }],
  name: 'allowance',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    name: '_owner',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  payable: true,
  stateMutability: 'payable',
  type: 'fallback'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'from',
    type: 'address'
  }, {
    indexed: true,
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    name: 'value',
    type: 'uint256'
  }],
  name: 'Transfer',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'owner',
    type: 'address'
  }, {
    indexed: true,
    name: 'spender',
    type: 'address'
  }, {
    indexed: false,
    name: 'value',
    type: 'uint256'
  }],
  name: 'Approval',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newTarget',
    type: 'address'
  }],
  name: 'TargetUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'account',
    type: 'address'
  }, {
    indexed: false,
    name: 'fromCurrencyKey',
    type: 'bytes32'
  }, {
    indexed: false,
    name: 'fromAmount',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'toCurrencyKey',
    type: 'bytes32'
  }, {
    indexed: false,
    name: 'toAmount',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'toAddress',
    type: 'address'
  }],
  name: 'SynthExchange',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerNominated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'oldOwner',
    type: 'address'
  }, {
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerChanged',
  type: 'event'
}]);
// CONCATENATED MODULE: ./lib/abis/shasta/Synth.js

/* harmony default export */ var shasta_Synth = (mainnet_Synth);
// CONCATENATED MODULE: ./lib/abis/shasta/Synthetix.js
/* harmony default export */ var shasta_Synthetix = ([{
  constant: true,
  inputs: [],
  name: 'name',
  outputs: [{
    name: '',
    type: 'string'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_gasPriceLimit',
    type: 'uint256'
  }],
  name: 'setGasPriceLimit',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'spender',
    type: 'address'
  }, {
    name: 'value',
    type: 'uint256'
  }],
  name: 'approve',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'currencyKey',
    type: 'bytes32'
  }],
  name: 'removeSynth',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'mint',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_integrationProxy',
    type: 'address'
  }],
  name: 'setIntegrationProxy',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_owner',
    type: 'address'
  }],
  name: 'nominateNewOwner',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'address'
  }],
  name: 'synthsByAddress',
  outputs: [{
    name: '',
    type: 'bytes32'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'initiationTime',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'totalSupply',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_feePool',
    type: 'address'
  }],
  name: 'setFeePool',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'sourceCurrencyKey',
    type: 'bytes32'
  }, {
    name: 'destinationCurrencyKey',
    type: 'bytes32'
  }],
  name: 'feeRateForExchange',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_gasLimitOracle',
    type: 'address'
  }],
  name: 'setGasLimitOracle',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_beneficiary',
    type: 'address'
  }],
  name: 'setSelfDestructBeneficiary',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'from',
    type: 'address'
  }, {
    name: 'to',
    type: 'address'
  }, {
    name: 'value',
    type: 'uint256'
  }],
  name: 'transferFrom',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'amount',
    type: 'uint256'
  }],
  name: 'burnSynths',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'decimals',
  outputs: [{
    name: '',
    type: 'uint8'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'bytes32'
  }],
  name: 'synths',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'terminateSelfDestruct',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'rewardsDistribution',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'exchangeRates',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'nominatedOwner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_exchangeRates',
    type: 'address'
  }],
  name: 'setExchangeRates',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'sourceCurrencyKey',
    type: 'bytes32'
  }, {
    name: 'sourceAmount',
    type: 'uint256'
  }, {
    name: 'destinationCurrencyKey',
    type: 'bytes32'
  }],
  name: 'effectiveValue',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'transferableSynthetix',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '_givenGasPrice',
    type: 'uint256'
  }],
  name: 'validateGasPrice',
  outputs: [],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'balanceOf',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'availableCurrencyKeys',
  outputs: [{
    name: '',
    type: 'bytes32[]'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'acceptOwnership',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'issuer',
    type: 'address'
  }, {
    name: 'currencyKey',
    type: 'bytes32'
  }],
  name: 'remainingIssuableSynths',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '',
    type: 'uint256'
  }],
  name: 'availableSynths',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'currencyKey',
    type: 'bytes32'
  }],
  name: 'totalIssuedSynths',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'synth',
    type: 'address'
  }],
  name: 'addSynth',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'amount',
    type: 'uint256'
  }],
  name: 'issueSynths',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'owner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_exchangeEnabled',
    type: 'bool'
  }],
  name: 'setExchangeEnabled',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'symbol',
  outputs: [{
    name: '',
    type: 'string'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'gasPriceLimit',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_proxy',
    type: 'address'
  }],
  name: 'setProxy',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'selfDestruct',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'integrationProxy',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_tokenState',
    type: 'address'
  }],
  name: 'setTokenState',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'issuer',
    type: 'address'
  }],
  name: 'collateralisationRatio',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'rewardEscrow',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'SELFDESTRUCT_DELAY',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'account',
    type: 'address'
  }],
  name: 'collateral',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'issuer',
    type: 'address'
  }, {
    name: 'currencyKey',
    type: 'bytes32'
  }],
  name: 'maxIssuableSynths',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'to',
    type: 'address'
  }, {
    name: 'value',
    type: 'uint256'
  }],
  name: 'transfer',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'from',
    type: 'address'
  }, {
    name: 'sourceCurrencyKey',
    type: 'bytes32'
  }, {
    name: 'sourceAmount',
    type: 'uint256'
  }, {
    name: 'destinationCurrencyKey',
    type: 'bytes32'
  }, {
    name: 'destinationAddress',
    type: 'address'
  }],
  name: 'synthInitiatedExchange',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'feePool',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'issueMaxSynths',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'selfDestructInitiated',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'sender',
    type: 'address'
  }],
  name: 'setMessageSender',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'initiateSelfDestruct',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'supplySchedule',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'selfDestructBeneficiary',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_protectionCircuitIsActivated',
    type: 'bool'
  }],
  name: 'setProtectionCircuit',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'issuer',
    type: 'address'
  }, {
    name: 'currencyKey',
    type: 'bytes32'
  }],
  name: 'debtBalanceOf',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'messageSender',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'synthetixState',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'availableSynthCount',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'owner',
    type: 'address'
  }, {
    name: 'spender',
    type: 'address'
  }],
  name: 'allowance',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'escrow',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'tokenState',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'proxy',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'sourceCurrencyKey',
    type: 'bytes32'
  }, {
    name: 'sourceAmount',
    type: 'uint256'
  }, {
    name: 'destinationCurrencyKey',
    type: 'bytes32'
  }],
  name: 'exchange',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'exchangeEnabled',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'gasLimitOracle',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    name: '_proxy',
    type: 'address'
  }, {
    name: '_tokenState',
    type: 'address'
  }, {
    name: '_synthetixState',
    type: 'address'
  }, {
    name: '_owner',
    type: 'address'
  }, {
    name: '_exchangeRates',
    type: 'address'
  }, {
    name: '_feePool',
    type: 'address'
  }, {
    name: '_supplySchedule',
    type: 'address'
  }, {
    name: '_rewardEscrow',
    type: 'address'
  }, {
    name: '_escrow',
    type: 'address'
  }, {
    name: '_rewardsDistribution',
    type: 'address'
  }, {
    name: '_totalSupply',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'account',
    type: 'address'
  }, {
    indexed: false,
    name: 'fromCurrencyKey',
    type: 'bytes32'
  }, {
    indexed: false,
    name: 'fromAmount',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'toCurrencyKey',
    type: 'bytes32'
  }, {
    indexed: false,
    name: 'toAmount',
    type: 'uint256'
  }, {
    indexed: false,
    name: 'toAddress',
    type: 'address'
  }],
  name: 'SynthExchange',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'from',
    type: 'address'
  }, {
    indexed: true,
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    name: 'value',
    type: 'uint256'
  }],
  name: 'Transfer',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'owner',
    type: 'address'
  }, {
    indexed: true,
    name: 'spender',
    type: 'address'
  }, {
    indexed: false,
    name: 'value',
    type: 'uint256'
  }],
  name: 'Approval',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newTokenState',
    type: 'address'
  }],
  name: 'TokenStateUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'proxyAddress',
    type: 'address'
  }],
  name: 'ProxyUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [],
  name: 'SelfDestructTerminated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'beneficiary',
    type: 'address'
  }],
  name: 'SelfDestructed',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'selfDestructDelay',
    type: 'uint256'
  }],
  name: 'SelfDestructInitiated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newBeneficiary',
    type: 'address'
  }],
  name: 'SelfDestructBeneficiaryUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerNominated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    name: 'oldOwner',
    type: 'address'
  }, {
    indexed: false,
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnerChanged',
  type: 'event'
}]);
// CONCATENATED MODULE: ./lib/abis/shasta/SynthetixEscrow.js

/* harmony default export */ var shasta_SynthetixEscrow = (SynthetixEscrow);
// CONCATENATED MODULE: ./lib/abis/shasta/SynthetixState.js

/* harmony default export */ var shasta_SynthetixState = (SynthetixState);
// CONCATENATED MODULE: ./lib/abis/shasta/RewardEscrow.js

/* harmony default export */ var shasta_RewardEscrow = (RewardEscrow);
// CONCATENATED MODULE: ./lib/abis/shasta/DappMaintenance.js

/* harmony default export */ var shasta_DappMaintenance = (DappMaintenance);
// CONCATENATED MODULE: ./lib/abis/shasta/ArbRewarder.js

/* harmony default export */ var shasta_ArbRewarder = (ArbRewarder);
// CONCATENATED MODULE: ./lib/abis/shasta/index.js












/* harmony default export */ var shasta = ({
  Depot: shasta_Depot,
  EscrowChecker: shasta_EscrowChecker,
  ExchangeRates: shasta_ExchangeRates,
  FeePool: shasta_FeePool,
  ProxyERC20: shasta_ProxyERC20,
  Synth: shasta_Synth,
  Synthetix: shasta_Synthetix,
  SynthetixEscrow: shasta_SynthetixEscrow,
  SynthetixState: shasta_SynthetixState,
  RewardEscrow: shasta_RewardEscrow,
  DappMaintenance: shasta_DappMaintenance,
  ArbRewarder: shasta_ArbRewarder
});
// CONCATENATED MODULE: ./lib/abis/index.js


/* harmony default export */ var abis = ({
  mainnet: mainnet,
  shasta: shasta
});
// CONCATENATED MODULE: ./lib/synths.js
var MAINNET_SYNTHS = [{
  name: 'ODR',
  asset: '',
  category: 'internal',
  sign: '',
  desc: 'Oikos Drawing Rights'
}, {
  name: 'sEUR',
  asset: 'EUR',
  category: 'forex',
  sign: '€',
  desc: 'Euros',
  aggregator: ''
}, {
  name: 'sUSD',
  asset: 'USD',
  category: 'forex',
  sign: '$',
  desc: 'US Dollars'
}, {
  name: 'sAUD',
  asset: 'AUD',
  category: 'forex',
  sign: '$',
  desc: 'Australian Dollars',
  aggregator: ''
}, {
  name: 'sGBP',
  asset: 'GBP',
  category: 'forex',
  sign: '£',
  desc: 'Pound Sterling',
  aggregator: ''
}, {
  name: 'sCHF',
  asset: 'CHF',
  category: 'forex',
  sign: 'Fr',
  desc: 'Swiss Franc',
  aggregator: ''
}, {
  name: 'sBTC',
  asset: 'BTC',
  category: 'crypto',
  sign: '₿',
  desc: 'Bitcoin'
}, {
  name: 'sETH',
  asset: 'ETH',
  category: 'crypto',
  sign: 'Ξ',
  desc: 'Ether'
}, {
  name: 'sTRX',
  asset: 'TRX',
  category: 'crypto',
  sign: '',
  desc: 'TRON'
}, {
  name: 'iBTC',
  asset: 'BTC',
  category: 'crypto',
  sign: '₿',
  desc: 'Inverted Bitcoin',
  subclass: 'PurgeableSynth',
  inverted: {
    entryPoint: 10600,
    upperLimit: 15900,
    lowerLimit: 5300
  }
}, {
  name: 'iTRX',
  asset: 'TRX',
  category: 'crypto',
  sign: '',
  desc: 'Inverted Tron',
  subclass: 'PurgeableSynth',
  inverted: {
    upperLimit: 0.028,
    entryPoint: 0.015,
    lowerLimit: 0.005
  }
}, {
  name: 'iETH',
  asset: 'ETH',
  category: 'crypto',
  sign: 'Ξ',
  desc: 'Inverted Ether',
  subclass: 'PurgeableSynth',
  inverted: {
    entryPoint: 220,
    upperLimit: 330,
    lowerLimit: 110
  }
}, {
  name: 'sLINK',
  asset: 'LINK',
  category: 'crypto',
  sign: '',
  desc: 'ChainLink token',
  aggregator: ''
}];
var SHASTA_SYNTHS = [{
  name: 'ODR',
  asset: '',
  category: 'internal',
  sign: '',
  desc: 'Oikos Drawing Rights'
}, {
  name: 'sEUR',
  asset: 'EUR',
  category: 'forex',
  sign: '€',
  desc: 'Euros',
  aggregator: ''
}, {
  name: 'sUSD',
  asset: 'USD',
  category: 'forex',
  sign: '$',
  desc: 'US Dollars'
}, {
  name: 'sAUD',
  asset: 'AUD',
  category: 'forex',
  sign: '$',
  desc: 'Australian Dollars',
  aggregator: ''
}, {
  name: 'sGBP',
  asset: 'GBP',
  category: 'forex',
  sign: '£',
  desc: 'Pound Sterling',
  aggregator: ''
}, {
  name: 'sCHF',
  asset: 'CHF',
  category: 'forex',
  sign: 'Fr',
  desc: 'Swiss Franc',
  aggregator: ''
}, {
  name: 'sBTC',
  asset: 'BTC',
  category: 'crypto',
  sign: '₿',
  desc: 'Bitcoin'
}, {
  name: 'sETH',
  asset: 'ETH',
  category: 'crypto',
  sign: 'Ξ',
  desc: 'Ether'
}, {
  name: 'sTRX',
  asset: 'TRX',
  category: 'crypto',
  sign: '',
  desc: 'TRON'
}, {
  name: 'iBTC',
  asset: 'BTC',
  category: 'crypto',
  sign: '₿',
  desc: 'Inverted Bitcoin',
  subclass: 'PurgeableSynth',
  inverted: {
    entryPoint: 10600,
    upperLimit: 15900,
    lowerLimit: 5300
  }
}, {
  name: 'iTRX',
  asset: 'TRX',
  category: 'crypto',
  sign: '',
  desc: 'Inverted Tron',
  subclass: 'PurgeableSynth',
  inverted: {
    upperLimit: 0.028,
    entryPoint: 0.015,
    lowerLimit: 0.005
  }
}, {
  name: 'iETH',
  asset: 'ETH',
  category: 'crypto',
  sign: 'Ξ',
  desc: 'Inverted Ether',
  subclass: 'PurgeableSynth',
  inverted: {
    entryPoint: 220,
    upperLimit: 330,
    lowerLimit: 110
  }
}];
/* harmony default export */ var synths = ({
  1: MAINNET_SYNTHS,
  2: SHASTA_SYNTHS
});
// EXTERNAL MODULE: ./node_modules/tronweb/dist/TronWeb.node.js
var TronWeb_node = __webpack_require__(20);
var TronWeb_node_default = /*#__PURE__*/__webpack_require__.n(TronWeb_node);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(30);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/bs58check/index.js
var bs58check = __webpack_require__(107);
var bs58check_default = /*#__PURE__*/__webpack_require__.n(bs58check);

// CONCATENATED MODULE: ./lib/TronProvider.js









function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }


 // import WalletConnectProvider from '@walletconnect/web3-provider';

var BaseProvider = ethers["providers"].BaseProvider; // converts from ethereum style hex address (e.g. 0xdeadbeef to Tron sylte base58 address)

var TronProvider_t = function t(hexStr) {
  // remove leading 0x41 (tronWeb prefixes hex address with 41)
  var str = hexStr.replace(/^0x/, ''); // base58 check encode

  return bs58check_default.a.encode(Buffer.from(str, 'hex'));
};

var TronProvider_TronWebSigner =
/*#__PURE__*/
function (_Signer) {
  inherits_default()(TronWebSigner, _Signer);

  function TronWebSigner(provider, tronWeb, addressOrIndex) {
    var _this;

    classCallCheck_default()(this, TronWebSigner);

    _this = possibleConstructorReturn_default()(this, getPrototypeOf_default()(TronWebSigner).call(this)); // debugging... remove below line in prod (Error.stackTraceLimit = ...)
    // Error.stackTraceLimit = 50;

    _this.addressOrIndex = addressOrIndex;
    _this.provider = provider;
    _this.tronWeb = tronWeb;
    return _this;
  }

  createClass_default()(TronWebSigner, [{
    key: "getAddress",
    value: function () {
      var _getAddress = asyncToGenerator_default()(
      /*#__PURE__*/
      regenerator_default.a.mark(function _callee() {
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", this.addressOrIndex);

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getAddress() {
        return _getAddress.apply(this, arguments);
      }

      return getAddress;
    }()
  }, {
    key: "signMessage",
    value: function () {
      var _signMessage = asyncToGenerator_default()(
      /*#__PURE__*/
      regenerator_default.a.mark(function _callee2(message) {
        return regenerator_default.a.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function signMessage(_x) {
        return _signMessage.apply(this, arguments);
      }

      return signMessage;
    }()
  }, {
    key: "sendTransaction",
    value: function () {
      var _sendTransaction = asyncToGenerator_default()(
      /*#__PURE__*/
      regenerator_default.a.mark(function _callee3(transaction) {
        return regenerator_default.a.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function sendTransaction(_x2) {
        return _sendTransaction.apply(this, arguments);
      }

      return sendTransaction;
    }()
  }]);

  return TronWebSigner;
}(ethers["Signer"]);

var TronProvider_TronProvider =
/*#__PURE__*/
function (_BaseProvider) {
  inherits_default()(TronProvider, _BaseProvider);

  function TronProvider(tronWeb) {
    var _this2;

    classCallCheck_default()(this, TronProvider);

    _this2 = possibleConstructorReturn_default()(this, getPrototypeOf_default()(TronProvider).call(this));
    _this2.tronWeb = tronWeb;
    return _this2;
  }
  /*
  getSigner(address) {
    // return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);
    throw new Error('not implemented')
  }
  */

  /**
   * TODO! @kev
   *
   * Response is supposed to look like this:
   *
   * {
   *  // Only available for mined transactions
   *  blockHash: "0x7f20ef60e9f91896b7ebb0962a18b8defb5e9074e62e1b6cde992648fe78794b",
   *  blockNumber: 3346463,
   *  timestamp: 1489440489,
   *
   *  // Exactly one of these will be present (send vs. deploy contract)
   *  // They will always be a properly formatted checksum address
   *  creates: null,
   *  to: "0xc149Be1bcDFa69a94384b46A1F91350E5f81c1AB",
   *
   *  // The transaction hash
   *  hash: "0xf517872f3c466c2e1520e35ad943d833fdca5a6739cfea9e686c4c1b3ab1022e",
   *
   *  // See above "Transaction Requests" for details
   *  data: "0x",
   *  from: "0xEA674fdDe714fd979de3EdF0F56AA9716B898ec8",
   *  gasLimit: utils.bigNumberify("90000"),
   *  gasPrice: utils.bigNumberify("21488430592"),
   *  nonce: 0,
   *  value: utils.parseEther(1.0017071732629267),
   *
   *  // The chain ID; 0 indicates replay-attack vulnerable
   *  // (eg. 1 = Homestead mainnet, 3 = Ropsten testnet)
   *  chainId: 1,
   *
   *  // The signature of the transaction (TestRPC may fail to include these)
   *  r: "0x5b13ef45ce3faf69d1f40f9d15b0070cc9e2c92f3df79ad46d5b3226d7f3d1e8",
   *  s: "0x535236e497c59e3fba93b78e124305c7c9b20db0f8531b015066725e4bb31de6",
   *  v: 37,
   *
   *  // The raw transaction (TestRPC may be missing this)
   *  raw: "0xf87083154262850500cf6e0083015f9094c149be1bcdfa69a94384b46a1f913" +
   *         "50e5f81c1ab880de6c75de74c236c8025a05b13ef45ce3faf69d1f40f9d15b0" +
   *         "070cc9e2c92f3df79ad46d5b3226d7f3d1e8a0535236e497c59e3fba93b78e1" +
   *         "24305c7c9b20db0f8531b015066725e4bb31de6"
   */


  createClass_default()(TronProvider, [{
    key: "getTransaction",
    value: function () {
      var _getTransaction = asyncToGenerator_default()(
      /*#__PURE__*/
      regenerator_default.a.mark(function _callee4(txHash) {
        var res, value, amount, owner_address, to_address, data;
        return regenerator_default.a.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.tronWeb.trx.getTransaction(txHash);

              case 2:
                res = _context4.sent;
                value = res.raw_data.contract[0].parameter.value;
                amount = value.amount, owner_address = value.owner_address, to_address = value.to_address, data = value.data;
                return _context4.abrupt("return", _objectSpread({}, res, {
                  data: data,
                  to: to_address,
                  value: amount,
                  from: owner_address,
                  blockHash: res.raw_data.ref_block_hash,
                  hash: "0x".concat(res.txID),
                  raw: res.raw_data_hex
                }));

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getTransaction(_x3) {
        return _getTransaction.apply(this, arguments);
      }

      return getTransaction;
    }()
  }, {
    key: "send",
    value: function () {
      var _send = asyncToGenerator_default()(
      /*#__PURE__*/
      regenerator_default.a.mark(function _callee5(method, params) {
        return regenerator_default.a.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                console.log(method);
                console.log(params);
                return _context5.abrupt("return");

              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function send(_x4, _x5) {
        return _send.apply(this, arguments);
      }

      return send;
    }()
  }, {
    key: "resolveName",
    value: function () {
      var _resolveName = asyncToGenerator_default()(
      /*#__PURE__*/
      regenerator_default.a.mark(function _callee6(addressOrName) {
        return regenerator_default.a.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                return _context6.abrupt("return", addressOrName);

              case 1:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function resolveName(_x6) {
        return _resolveName.apply(this, arguments);
      }

      return resolveName;
    }()
  }, {
    key: "perform",
    value: function () {
      var _perform = asyncToGenerator_default()(
      /*#__PURE__*/
      regenerator_default.a.mark(function _callee7(method, params) {
        var address, _address, contract;

        return regenerator_default.a.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                console.log('perform method', method);
                console.log('perform params', params);
                _context7.t0 = method;
                _context7.next = _context7.t0 === 'getBlockNumber' ? 5 : _context7.t0 === 'getGasPrice' ? 6 : _context7.t0 === 'getBalance' ? 7 : _context7.t0 === 'getTransactionCount' ? 9 : _context7.t0 === 'getCode' ? 10 : _context7.t0 === 'getStorageAt' ? 22 : _context7.t0 === 'sendTransaction' ? 23 : _context7.t0 === 'getBlock' ? 24 : _context7.t0 === 'getTransaction' ? 25 : _context7.t0 === 'getTransactionReceipt' ? 26 : _context7.t0 === 'call' ? 27 : _context7.t0 === 'estimateGas' ? 28 : _context7.t0 === 'getLogs' ? 29 : 30;
                break;

              case 5:
                return _context7.abrupt("return", this.send('eth_blockNumber', []));

              case 6:
                return _context7.abrupt("return", this.send('eth_gasPrice', []));

              case 7:
                address = params.address;
                return _context7.abrupt("return", this.tronWeb.trx.getBalance(address));

              case 9:
                throw new Error("".concat(method, " not implemented"));

              case 10:
                // const { address, blockTag } = params
                _address = TronProvider_t(params.address); // TODO! I believe this function is mainly called to check if a contract exists

                _context7.prev = 11;
                _context7.next = 14;
                return this.tronWeb.trx.getContract(_address);

              case 14:
                contract = _context7.sent;
                return _context7.abrupt("return", "0x".concat(contract.bytecode));

              case 18:
                _context7.prev = 18;
                _context7.t1 = _context7["catch"](11);
                console.warn(_context7.t1);
                return _context7.abrupt("return", '0x');

              case 22:
                throw new Error("".concat(method, " not implemented"));

              case 23:
                throw new Error("".concat(method, " not implemented"));

              case 24:
                throw new Error("".concat(method, " not implemented"));

              case 25:
                throw new Error("".concat(method, " not implemented"));

              case 26:
                throw new Error("".concat(method, " not implemented"));

              case 27:
                throw new Error("".concat(method, " not implemented"));

              case 28:
                throw new Error("".concat(method, " not implemented"));

              case 29:
                throw new Error("".concat(method, " not implemented"));

              case 30:
                return _context7.abrupt("break", 31);

              case 31:
                ethers["errors"].throwError(method + ' not implemented', ethers["errors"].NOT_IMPLEMENTED, {
                  operation: method
                });
                return _context7.abrupt("return", null);

              case 33:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this, [[11, 18]]);
      }));

      function perform(_x7, _x8) {
        return _perform.apply(this, arguments);
      }

      return perform;
    }()
  }, {
    key: "getSigner",
    value: function getSigner(addressOrIndex) {
      return new TronProvider_TronWebSigner(this, this.tronWeb, addressOrIndex);
    }
  }]);

  return TronProvider;
}(BaseProvider);


// CONCATENATED MODULE: ./src/contractSettings.js






var network2providerUrl = {
  mainnet: 'https://api.tronstack.io',
  shasta: 'https://api.shasta.trongrid.io'
}; // kev: for some reason tronWeb throws random errors when private key not set,
// even when calling pure functions :/

var zeroPrivateKey = '410000000000000000000000000000000000000000';

var contractSettings_createTronWeb = function createTronWeb(providerUrl) {
  var privateKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : zeroPrivateKey;
  var HttpProvider = TronWeb_node_default.a.providers.HttpProvider;
  var fullNode = new HttpProvider(providerUrl);
  var solidityNode = new HttpProvider(providerUrl);
  var eventServer = new HttpProvider(providerUrl);
  var tronWeb = new TronWeb_node_default.a(fullNode, solidityNode, eventServer, privateKey);
  return tronWeb;
};

var SUPPORTED_NETWORKS = {
  1: 'mainnet',
  2: 'shasta'
};

var contractSettings_getDefaultProvider = function getDefaultProvider(tronWeb) {
  return new TronProvider_TronProvider(tronWeb);
};

var contractSettings_ContractSettings =
/**
 * @constructor
 * @param provider {Object} - ethers.js provider object - default ethers.providers.getDefaultProvider()
 * @param tronWeb {Object} - tronWeb object
 * @param signer {Object} - one of 4 provided signers or a custom ethers.js compatible signer. Use Metamask for Dapp browser support
 * @param networkId {Number} - default 1 - mainnet, also supports 42 (Kovan)
 */
function ContractSettings(contractSettings) {
  classCallCheck_default()(this, ContractSettings);

  contractSettings = contractSettings || {};
  var _contractSettings = contractSettings,
      provider = _contractSettings.provider,
      tronWeb = _contractSettings.tronWeb,
      signer = _contractSettings.signer,
      networkId = _contractSettings.networkId;
  this.networkId = networkId || 1;
  var network = SUPPORTED_NETWORKS[Number(this.networkId)];
  this.network = network;
  var providerUrl = network2providerUrl[network];
  this.tronWeb = tronWeb || contractSettings_createTronWeb(providerUrl);
  this.provider = provider || contractSettings_getDefaultProvider(this.tronWeb);
  this.signer = signer;
  this.addressList = lib_addresses[this.networkId];
  this.synths = synths[this.networkId];
  this.ABIS = abis[this.network];
};

contractSettings_ContractSettings.SUPPORTED_NETWORKS = SUPPORTED_NETWORKS;
/* harmony default export */ var src_contractSettings = (contractSettings_ContractSettings);
// CONCATENATED MODULE: ./src/tronContract.js




// extends tronweb contracts to support custom signers
//
// TODO @kev: wrap .send to support custom signer
// TODO @kev: fix .call so that it always passes _isContant?


var tronContract_Contract =
/*#__PURE__*/
function (_TronWeb$Contract) {
  inherits_default()(Contract, _TronWeb$Contract);

  function Contract() {
    classCallCheck_default()(this, Contract);

    return possibleConstructorReturn_default()(this, getPrototypeOf_default()(Contract).apply(this, arguments));
  }

  return Contract;
}(TronWeb_node_default.a.Contract); // TODO thats gonna be messy cause we can't access Method class from
// tronweb.... instead fork tronweb to tronweb-extended and add support
// for signers, fix isConstant bug, better error handling, etc.


/* harmony default export */ var tronContract = (function (abi, address, tronWeb, signer) {
  var contract = new tronContract_Contract(tronWeb, abi, address);
  return contract;
});
// CONCATENATED MODULE: ./src/contracts/mainnet/Depot.js




function Depot_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function Depot_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Depot_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Depot_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function Depot_Depot(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['Depot'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(mainnet_Depot, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.USDTdepositStartIndex =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.USDTdepositStartIndex().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.SUSDminimumDepositAmount =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee2() {
    return regenerator_default.a.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _this.contract.SUSDminimumDepositAmount().call({
              _isConstant: true
            });

          case 2:
            return _context2.abrupt("return", _context2.sent);

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
   * @returns uint256[2]
   **/

  this.depositSUSD =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.depositSUSD(amount).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x, _x2) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synth =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee4() {
    return regenerator_default.a.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return _this.contract.synth().call({
              _isConstant: true
            });

          case 2:
            return _context4.abrupt("return", _context4.sent);

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref5 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee5(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              txParams = txParams || {};
              txParams = Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context5.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context5.sent;
              return _context5.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    return function (_x3, _x4) {
      return _ref5.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _paused {boolean}
   * @param txParams {TxParams}
  
   **/


  this.setPaused =
  /*#__PURE__*/
  function () {
    var _ref6 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee6(_paused, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              txParams = txParams || {};
              txParams = Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context6.next = 4;
              return _this.contract.setPaused(_paused).send(txParams);

            case 4:
              txHash = _context6.sent;
              return _context6.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    return function (_x5, _x6) {
      return _ref6.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.SUSDsmallDeposits =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(address_1) {
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return _this.contract.SUSDsmallDeposits(address_1).call({
                _isConstant: true
              });

            case 2:
              return _context7.abrupt("return", _context7.sent);

            case 3:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x7) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee8() {
    return regenerator_default.a.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context8.abrupt("return", _context8.sent);

          case 3:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
   * @returns BigNumber
   **/

  this.withdrawMyDepositedUSDT =
  /*#__PURE__*/
  function () {
    var _ref9 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee9(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              txParams = txParams || {};
              txParams = Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context9.next = 4;
              return _this.contract.withdrawMyDepositedUSDT().send(txParams);

            case 4:
              txHash = _context9.sent;
              return _context9.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));

    return function (_x8) {
      return _ref9.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x9, _x10) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.fundsWallet =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.fundsWallet().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              txParams = txParams || {};
              txParams = Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context12.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context12.sent;
              return _context12.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x11) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
   * @returns BigNumber
   **/


  this.withdrawMyDepositedSUSD =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.withdrawMyDepositedSUSD().send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x12) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.USDTtotalSellableDeposits =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee14() {
    return regenerator_default.a.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            _context14.next = 2;
            return _this.contract.USDTtotalSellableDeposits().call({
              _isConstant: true
            });

          case 2:
            return _context14.abrupt("return", _context14.sent);

          case 3:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  }));
  /**
   * Set the Synth contract that the issuance controller uses to issue Synths.<br>
   * Transaction (consumes gas, requires signer)
   * @param _synth {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynth =
  /*#__PURE__*/
  function () {
    var _ref15 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee15(_synth, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              txParams = txParams || {};
              txParams = Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context15.next = 4;
              return _this.contract.setSynth(_synth).send(txParams);

            case 4:
              txHash = _context15.sent;
              return _context15.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    }));

    return function (_x13, _x14) {
      return _ref15.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.oksProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee16() {
    return regenerator_default.a.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            _context16.next = 2;
            return _this.contract.oksProxy().call({
              _isConstant: true
            });

          case 2:
            return _context16.abrupt("return", _context16.sent);

          case 3:
          case "end":
            return _context16.stop();
        }
      }
    }, _callee16);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/

  this.paused =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee18() {
    return regenerator_default.a.wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            _context18.next = 2;
            return _this.contract.paused().call({
              _isConstant: true
            });

          case 2:
            return _context18.abrupt("return", _context18.sent);

          case 3:
          case "end":
            return _context18.stop();
        }
      }
    }, _callee18);
  }));
  /**
   * Set the funds wallet where ETH raised is held.<br>
   * Transaction (consumes gas, requires signer)
   * @param _fundsWallet {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFundsWallet =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(_fundsWallet, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.setFundsWallet(_fundsWallet).send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x15, _x16) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref20 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee20(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              txParams = txParams || {};
              txParams = Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context20.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context20.sent;
              return _context20.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20);
    }));

    return function (_x17) {
      return _ref20.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.withdrawOikos =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.withdrawOikos(amount).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x18, _x19) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
   * @returns BigNumber
   **/


  this.exchangeUSDTForSynths =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.exchangeUSDTForSynths(amount).send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x20, _x21) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.USDTsmallDeposits =
  /*#__PURE__*/
  function () {
    var _ref23 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee23(address_1) {
      return regenerator_default.a.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              _context23.next = 2;
              return _this.contract.USDTsmallDeposits(address_1).call({
                _isConstant: true
              });

            case 2:
              return _context23.abrupt("return", _context23.sent);

            case 3:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23);
    }));

    return function (_x22) {
      return _ref23.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee24() {
    return regenerator_default.a.wrap(function _callee24$(_context24) {
      while (1) {
        switch (_context24.prev = _context24.next) {
          case 0:
            _context24.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context24.abrupt("return", _context24.sent);

          case 3:
          case "end":
            return _context24.stop();
        }
      }
    }, _callee24);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.SUSDdepositStartIndex =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.SUSDdepositStartIndex().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.lastPauseTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee26() {
    return regenerator_default.a.wrap(function _callee26$(_context26) {
      while (1) {
        switch (_context26.prev = _context26.next) {
          case 0:
            _context26.next = 2;
            return _this.contract.lastPauseTime().call({
              _isConstant: true
            });

          case 2:
            return _context26.abrupt("return", _context26.sent);

          case 3:
          case "end":
            return _context26.stop();
        }
      }
    }, _callee26);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
   * @returns BigNumber
   **/

  this.exchangeSynthsForUSDT =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.exchangeSynthsForUSDT(amount).send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x23, _x24) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SUSDtotalSellableDeposits =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.SUSDtotalSellableDeposits().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref29 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee29(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee29$(_context29) {
        while (1) {
          switch (_context29.prev = _context29.next) {
            case 0:
              txParams = txParams || {};
              txParams = Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context29.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context29.sent;
              return _context29.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context29.stop();
          }
        }
      }, _callee29);
    }));

    return function (_x25) {
      return _ref29.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SUSDdepositEndIndex =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.SUSDdepositEndIndex().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee31() {
    return regenerator_default.a.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {BigNumber}
   * @returns Object
   **/

  this.USDTdeposits =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(uint256_1) {
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              _context32.next = 2;
              return _this.contract.USDTdeposits(uint256_1).call({
                _isConstant: true
              });

            case 2:
              return _context32.abrupt("return", _context32.sent);

            case 3:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x26) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.USDTminimumDepositAmount =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee34() {
    return regenerator_default.a.wrap(function _callee34$(_context34) {
      while (1) {
        switch (_context34.prev = _context34.next) {
          case 0:
            _context34.next = 2;
            return _this.contract.USDTminimumDepositAmount().call({
              _isConstant: true
            });

          case 2:
            return _context34.abrupt("return", _context34.sent);

          case 3:
          case "end":
            return _context34.stop();
        }
      }
    }, _callee34);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref35 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee35(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee35$(_context35) {
        while (1) {
          switch (_context35.prev = _context35.next) {
            case 0:
              txParams = txParams || {};
              txParams = Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context35.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context35.sent;
              return _context35.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context35.stop();
          }
        }
      }, _callee35);
    }));

    return function (_x27) {
      return _ref35.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {BigNumber}
   * @returns Object
   **/

  this.SUSDdeposits =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(uint256_1) {
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              _context37.next = 2;
              return _this.contract.SUSDdeposits(uint256_1).call({
                _isConstant: true
              });

            case 2:
              return _context37.abrupt("return", _context37.sent);

            case 3:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x28) {
      return _ref37.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
   * @returns uint256[2]
   **/


  this.depositUSDT =
  /*#__PURE__*/
  function () {
    var _ref38 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee38(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee38$(_context38) {
        while (1) {
          switch (_context38.prev = _context38.next) {
            case 0:
              txParams = txParams || {};
              txParams = Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context38.next = 4;
              return _this.contract.depositUSDT(amount).send(txParams);

            case 4:
              txHash = _context38.sent;
              return _context38.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context38.stop();
          }
        }
      }, _callee38);
    }));

    return function (_x29, _x30) {
      return _ref38.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.USDTdepositEndIndex =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee39() {
    return regenerator_default.a.wrap(function _callee39$(_context39) {
      while (1) {
        switch (_context39.prev = _context39.next) {
          case 0:
            _context39.next = 2;
            return _this.contract.USDTdepositEndIndex().call({
              _isConstant: true
            });

          case 2:
            return _context39.abrupt("return", _context39.sent);

          case 3:
          case "end":
            return _context39.stop();
        }
      }
    }, _callee39);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _oksProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setOikos =
  /*#__PURE__*/
  function () {
    var _ref40 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee40(_oksProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee40$(_context40) {
        while (1) {
          switch (_context40.prev = _context40.next) {
            case 0:
              txParams = txParams || {};
              txParams = Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context40.next = 4;
              return _this.contract.setOikos(_oksProxy).send(txParams);

            case 4:
              txHash = _context40.sent;
              return _context40.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context40.stop();
          }
        }
      }, _callee40);
    }));

    return function (_x31, _x32) {
      return _ref40.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var contracts_mainnet_Depot = (Depot_Depot);
// CONCATENATED MODULE: ./src/contracts/mainnet/EscrowChecker.js





/** @constructor
 * @param contractSettings {ContractSettings}
 */

function EscrowChecker_EscrowChecker(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['EscrowChecker'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(EscrowChecker, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns uint256[16]
   **/

  this.checkAccountSchedule =
  /*#__PURE__*/
  function () {
    var _ref = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee(account) {
      return regenerator_default.a.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _this.contract.checkAccountSchedule(account).call({
                _isConstant: true
              });

            case 2:
              return _context.abrupt("return", _context.sent);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetix_escrow =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee2() {
    return regenerator_default.a.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _this.contract.synthetix_escrow().call({
              _isConstant: true
            });

          case 2:
            return _context2.abrupt("return", _context2.sent);

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
}

/* harmony default export */ var mainnet_EscrowChecker = (EscrowChecker_EscrowChecker);
// CONCATENATED MODULE: ./src/contracts/mainnet/ExchangeRates.js




function ExchangeRates_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function ExchangeRates_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ExchangeRates_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ExchangeRates_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function ExchangeRates_ExchangeRates(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ExchangeRates'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(ExchangeRates, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param currencyKey {bytes32}
   * @returns boolean
   **/

  this.rateIsStale =
  /*#__PURE__*/
  function () {
    var _ref = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee(currencyKey) {
      return regenerator_default.a.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _this.contract.rateIsStale(currencyKey).call({
                _isConstant: true
              });

            case 2:
              return _context.abrupt("return", _context.sent);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param currencyKeys {bytes32[]}
   * @returns uint256[]
   **/


  this.lastRateUpdateTimesForCurrencies =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(currencyKeys) {
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return _this.contract.lastRateUpdateTimesForCurrencies(currencyKeys).call({
                _isConstant: true
              });

            case 2:
              return _context2.abrupt("return", _context2.sent);

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x2) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.rateStalePeriod =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee3() {
    return regenerator_default.a.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return _this.contract.rateStalePeriod().call({
              _isConstant: true
            });

          case 2:
            return _context3.abrupt("return", _context3.sent);

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x3, _x4) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref6 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee6(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              txParams = txParams || {};
              txParams = ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context6.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context6.sent;
              return _context6.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    return function (_x5, _x6) {
      return _ref6.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param currencyKey {bytes32}
   * @param txParams {TxParams}
  
   **/


  this.removeAggregator =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(currencyKey, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.removeAggregator(currencyKey).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x7, _x8) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param currencyKeys {bytes32[]}
   * @returns boolean
   **/


  this.anyRateIsStale =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(currencyKeys) {
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return _this.contract.anyRateIsStale(currencyKeys).call({
                _isConstant: true
              });

            case 2:
              return _context8.abrupt("return", _context8.sent);

            case 3:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x9) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {BigNumber}
   * @returns bytes32
   **/


  this.invertedKeys =
  /*#__PURE__*/
  function () {
    var _ref9 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee9(uint256_1) {
      return regenerator_default.a.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return _this.contract.invertedKeys(uint256_1).call({
                _isConstant: true
              });

            case 2:
              return _context9.abrupt("return", _context9.sent);

            case 3:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));

    return function (_x10) {
      return _ref9.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x11) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param currencyKey {bytes32}
   * @param aggregatorAddress {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.addAggregator =
  /*#__PURE__*/
  function () {
    var _ref11 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee11(currencyKey, aggregatorAddress, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              txParams = txParams || {};
              txParams = ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context11.next = 4;
              return _this.contract.addAggregator(currencyKey, aggregatorAddress).send(txParams);

            case 4:
              txHash = _context11.sent;
              return _context11.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11);
    }));

    return function (_x12, _x13, _x14) {
      return _ref11.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param currencyKey {bytes32}
   * @param txParams {TxParams}
  
   **/


  this.deleteRate =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(currencyKey, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              txParams = txParams || {};
              txParams = ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context12.next = 4;
              return _this.contract.deleteRate(currencyKey).send(txParams);

            case 4:
              txHash = _context12.sent;
              return _context12.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15, _x16) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {BigNumber}
   * @returns bytes32
   **/


  this.aggregatorKeys =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(uint256_1) {
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return _this.contract.aggregatorKeys(uint256_1).call({
                _isConstant: true
              });

            case 2:
              return _context13.abrupt("return", _context13.sent);

            case 3:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x17) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee14() {
    return regenerator_default.a.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            _context14.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context14.abrupt("return", _context14.sent);

          case 3:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param sourceCurrencyKey {bytes32}
   * @param sourceAmount {BigNumber}
   * @param destinationCurrencyKey {bytes32}
   * @returns BigNumber
   **/

  this.effectiveValue =
  /*#__PURE__*/
  function () {
    var _ref15 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee15(sourceCurrencyKey, sourceAmount, destinationCurrencyKey) {
      return regenerator_default.a.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return _this.contract.effectiveValue(sourceCurrencyKey, sourceAmount, destinationCurrencyKey).call({
                _isConstant: true
              });

            case 2:
              return _context15.abrupt("return", _context15.sent);

            case 3:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    }));

    return function (_x18, _x19, _x20) {
      return _ref15.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {bytes32}
   * @returns String<TrxAddress>
   **/


  this.aggregators =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(bytes32_1) {
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return _this.contract.aggregators(bytes32_1).call({
                _isConstant: true
              });

            case 2:
              return _context16.abrupt("return", _context16.sent);

            case 3:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {bytes32}
   * @returns Object
   **/


  this.inversePricing =
  /*#__PURE__*/
  function () {
    var _ref17 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee17(bytes32_1) {
      return regenerator_default.a.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return _this.contract.inversePricing(bytes32_1).call({
                _isConstant: true
              });

            case 2:
              return _context17.abrupt("return", _context17.sent);

            case 3:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17);
    }));

    return function (_x22) {
      return _ref17.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _time {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.setRateStalePeriod =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(_time, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.setRateStalePeriod(_time).send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x24, _x25) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _oracle {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setOracle =
  /*#__PURE__*/
  function () {
    var _ref20 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee20(_oracle, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              txParams = txParams || {};
              txParams = ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context20.next = 4;
              return _this.contract.setOracle(_oracle).send(txParams);

            case 4:
              txHash = _context20.sent;
              return _context20.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20);
    }));

    return function (_x26, _x27) {
      return _ref20.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.oracle =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee21() {
    return regenerator_default.a.wrap(function _callee21$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            _context21.next = 2;
            return _this.contract.oracle().call({
              _isConstant: true
            });

          case 2:
            return _context21.abrupt("return", _context21.sent);

          case 3:
          case "end":
            return _context21.stop();
        }
      }
    }, _callee21);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {bytes32}
   * @returns boolean
   **/

  this.isXDRParticipant =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(bytes32_1) {
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              _context22.next = 2;
              return _this.contract.isXDRParticipant(bytes32_1).call({
                _isConstant: true
              });

            case 2:
              return _context22.abrupt("return", _context22.sent);

            case 3:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x29) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {BigNumber}
   * @returns bytes32
   **/

  this.xdrParticipants =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(uint256_1) {
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              _context26.next = 2;
              return _this.contract.xdrParticipants(uint256_1).call({
                _isConstant: true
              });

            case 2:
              return _context26.abrupt("return", _context26.sent);

            case 3:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x30) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param currencyKey {bytes32}
   * @returns BigNumber
   **/


  this.rateForCurrency =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(currencyKey) {
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              _context27.next = 2;
              return _this.contract.rateForCurrency(currencyKey).call({
                _isConstant: true
              });

            case 2:
              return _context27.abrupt("return", _context27.sent);

            case 3:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x31) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param currencyKey {bytes32}
   * @returns boolean
   **/


  this.rateIsFrozen =
  /*#__PURE__*/
  function () {
    var _ref28 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee28(currencyKey) {
      return regenerator_default.a.wrap(function _callee28$(_context28) {
        while (1) {
          switch (_context28.prev = _context28.next) {
            case 0:
              _context28.next = 2;
              return _this.contract.rateIsFrozen(currencyKey).call({
                _isConstant: true
              });

            case 2:
              return _context28.abrupt("return", _context28.sent);

            case 3:
            case "end":
              return _context28.stop();
          }
        }
      }, _callee28);
    }));

    return function (_x32) {
      return _ref28.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param currencyKey {bytes32}
   * @param entryPoint {BigNumber}
   * @param upperLimit {BigNumber}
   * @param lowerLimit {BigNumber}
   * @param freeze {boolean}
   * @param freezeAtUpperLimit {boolean}
   * @param txParams {TxParams}
  
   **/


  this.setInversePricing =
  /*#__PURE__*/
  function () {
    var _ref29 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee29(currencyKey, entryPoint, upperLimit, lowerLimit, freeze, freezeAtUpperLimit, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee29$(_context29) {
        while (1) {
          switch (_context29.prev = _context29.next) {
            case 0:
              txParams = txParams || {};
              txParams = ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context29.next = 4;
              return _this.contract.setInversePricing(currencyKey, entryPoint, upperLimit, lowerLimit, freeze, freezeAtUpperLimit).send(txParams);

            case 4:
              txHash = _context29.sent;
              return _context29.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context29.stop();
          }
        }
      }, _callee29);
    }));

    return function (_x33, _x34, _x35, _x36, _x37, _x38, _x39) {
      return _ref29.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param currencyKeys {bytes32[]}
   * @returns Object
   **/

  this.ratesAndStaleForCurrencies =
  /*#__PURE__*/
  function () {
    var _ref31 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee31(currencyKeys) {
      return regenerator_default.a.wrap(function _callee31$(_context31) {
        while (1) {
          switch (_context31.prev = _context31.next) {
            case 0:
              _context31.next = 2;
              return _this.contract.ratesAndStaleForCurrencies(currencyKeys).call({
                _isConstant: true
              });

            case 2:
              return _context31.abrupt("return", _context31.sent);

            case 3:
            case "end":
              return _context31.stop();
          }
        }
      }, _callee31);
    }));

    return function (_x40) {
      return _ref31.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x41) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param currencyKeys {bytes32[]}
   * @param newRates {uint256[]}
   * @param timeSent {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.updateRates =
  /*#__PURE__*/
  function () {
    var _ref33 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee33(currencyKeys, newRates, timeSent, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee33$(_context33) {
        while (1) {
          switch (_context33.prev = _context33.next) {
            case 0:
              txParams = txParams || {};
              txParams = ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context33.next = 4;
              return _this.contract.updateRates(currencyKeys, newRates, timeSent).send(txParams);

            case 4:
              txHash = _context33.sent;
              return _context33.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context33.stop();
          }
        }
      }, _callee33);
    }));

    return function (_x42, _x43, _x44, _x45) {
      return _ref33.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param currencyKeys {bytes32[]}
   * @returns uint256[]
   **/


  this.ratesForCurrencies =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(currencyKeys) {
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return _this.contract.ratesForCurrencies(currencyKeys).call({
                _isConstant: true
              });

            case 2:
              return _context34.abrupt("return", _context34.sent);

            case 3:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x46) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param currencyKey {bytes32}
   * @param txParams {TxParams}
  
   **/

  this.removeInversePricing =
  /*#__PURE__*/
  function () {
    var _ref36 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee36(currencyKey, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee36$(_context36) {
        while (1) {
          switch (_context36.prev = _context36.next) {
            case 0:
              txParams = txParams || {};
              txParams = ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context36.next = 4;
              return _this.contract.removeInversePricing(currencyKey).send(txParams);

            case 4:
              txHash = _context36.sent;
              return _context36.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context36.stop();
          }
        }
      }, _callee36);
    }));

    return function (_x47, _x48) {
      return _ref36.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param code {bytes32}
   * @returns BigNumber
   **/


  this.lastRateUpdateTimes =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(code) {
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              _context37.next = 2;
              return _this.contract.lastRateUpdateTimes(code).call({
                _isConstant: true
              });

            case 2:
              return _context37.abrupt("return", _context37.sent);

            case 3:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x49) {
      return _ref37.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param code {bytes32}
   * @returns BigNumber
   **/


  this.rates =
  /*#__PURE__*/
  function () {
    var _ref38 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee38(code) {
      return regenerator_default.a.wrap(function _callee38$(_context38) {
        while (1) {
          switch (_context38.prev = _context38.next) {
            case 0:
              _context38.next = 2;
              return _this.contract.rates(code).call({
                _isConstant: true
              });

            case 2:
              return _context38.abrupt("return", _context38.sent);

            case 3:
            case "end":
              return _context38.stop();
          }
        }
      }, _callee38);
    }));

    return function (_x50) {
      return _ref38.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var mainnet_ExchangeRates = (ExchangeRates_ExchangeRates);
// CONCATENATED MODULE: ./src/contracts/mainnet/FeePool.js




function FeePool_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function FeePool_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { FeePool_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { FeePool_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function FeePool_FeePool(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxyFeePool'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(FeePool, address, tronWeb, this.signer);
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePeriodDuration {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setFeePeriodDuration =
  /*#__PURE__*/
  function () {
    var _ref = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee(_feePeriodDuration, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context.next = 4;
              return _this.contract.setFeePeriodDuration(_feePeriodDuration).send(txParams);

            case 4:
              txHash = _context.sent;
              return _context.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setFeePoolState =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(_feePoolState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.setFeePoolState(_feePoolState).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param _claimingAddress {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.getLastFeeWithdrawal =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_claimingAddress) {
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return _this.contract.getLastFeeWithdrawal(_claimingAddress).call({
                _isConstant: true
              });

            case 2:
              return _context3.abrupt("return", _context3.sent);

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @param period {BigNumber}
   * @returns BigNumber
   **/


  this.effectiveDebtRatioForPeriod =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(account, period) {
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return _this.contract.effectiveDebtRatioForPeriod(account, period).call({
                _isConstant: true
              });

            case 2:
              return _context4.abrupt("return", _context4.sent);

            case 3:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.exchangeFeeRate =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.exchangeFeeRate().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref6 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee6(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context6.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context6.sent;
              return _context6.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    return function (_x8, _x9) {
      return _ref6.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x10, _x11) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee8() {
    return regenerator_default.a.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context8.abrupt("return", _context8.sent);

          case 3:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _rewardsAuthority {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setRewardsAuthority =
  /*#__PURE__*/
  function () {
    var _ref9 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee9(_rewardsAuthority, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context9.next = 4;
              return _this.contract.setRewardsAuthority(_rewardsAuthority).send(txParams);

            case 4:
              txHash = _context9.sent;
              return _context9.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));

    return function (_x12, _x13) {
      return _ref9.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14, _x15) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.feePeriodDuration =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.feePeriodDuration().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param xdrAmount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.recordFeePaid =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(xdrAmount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context12.next = 4;
              return _this.contract.recordFeePaid(xdrAmount).send(txParams);

            case 4:
              txHash = _context12.sent;
              return _context12.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x16, _x17) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _percent {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.setTargetThreshold =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(_percent, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.setTargetThreshold(_percent).send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x18, _x19) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x20) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns uint256[2][3]
   **/


  this.feesByPeriod =
  /*#__PURE__*/
  function () {
    var _ref15 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee15(account) {
      return regenerator_default.a.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return _this.contract.feesByPeriod(account).call({
                _isConstant: true
              });

            case 2:
              return _context15.abrupt("return", _context15.sent);

            case 3:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    }));

    return function (_x21) {
      return _ref15.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.closeCurrentFeePeriod =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.closeCurrentFeePeriod().send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x22) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param index {BigNumber}
   * @returns Object
   **/


  this.recentFeePeriods =
  /*#__PURE__*/
  function () {
    var _ref17 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee17(index) {
      return regenerator_default.a.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return _this.contract.recentFeePeriods(index).call({
                _isConstant: true
              });

            case 2:
              return _context17.abrupt("return", _context17.sent);

            case 3:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17);
    }));

    return function (_x23) {
      return _ref17.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.approveClaimOnBehalf =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(account, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.approveClaimOnBehalf(account).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x24, _x25) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.feePoolEternalStorage =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee19() {
    return regenerator_default.a.wrap(function _callee19$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            _context19.next = 2;
            return _this.contract.feePoolEternalStorage().call({
              _isConstant: true
            });

          case 2:
            return _context19.abrupt("return", _context19.sent);

          case 3:
          case "end":
            return _context19.stop();
        }
      }
    }, _callee19);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _exchangeFeeRate {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setExchangeFeeRate =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(_exchangeFeeRate, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.setExchangeFeeRate(_exchangeFeeRate).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x26, _x27) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns boolean
   **/


  this.isFeesClaimable =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(account) {
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              _context22.next = 2;
              return _this.contract.isFeesClaimable(account).call({
                _isConstant: true
              });

            case 2:
              return _context22.abrupt("return", _context22.sent);

            case 3:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _delegates {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setDelegateApprovals =
  /*#__PURE__*/
  function () {
    var _ref23 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee23(_delegates, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context23.next = 4;
              return _this.contract.setDelegateApprovals(_delegates).send(txParams);

            case 4:
              txHash = _context23.sent;
              return _context23.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23);
    }));

    return function (_x29, _x30) {
      return _ref23.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.delegates =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee24() {
    return regenerator_default.a.wrap(function _callee24$(_context24) {
      while (1) {
        switch (_context24.prev = _context24.next) {
          case 0:
            _context24.next = 2;
            return _this.contract.delegates().call({
              _isConstant: true
            });

          case 2:
            return _context24.abrupt("return", _context24.sent);

          case 3:
          case "end":
            return _context24.stop();
        }
      }
    }, _callee24);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param claimingForAddress {String<TrxAddress>}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.claimOnBehalf =
  /*#__PURE__*/
  function () {
    var _ref25 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee25(claimingForAddress, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context25.next = 4;
              return _this.contract.claimOnBehalf(claimingForAddress).send(txParams);

            case 4:
              txHash = _context25.sent;
              return _context25.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25);
    }));

    return function (_x31, _x32) {
      return _ref25.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.removeClaimOnBehalf =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(account, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.removeClaimOnBehalf(account).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x33, _x34) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.totalRewardsAvailable =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee27() {
    return regenerator_default.a.wrap(function _callee27$(_context27) {
      while (1) {
        switch (_context27.prev = _context27.next) {
          case 0:
            _context27.next = 2;
            return _this.contract.totalRewardsAvailable().call({
              _isConstant: true
            });

          case 2:
            return _context27.abrupt("return", _context27.sent);

          case 3:
          case "end":
            return _context27.stop();
        }
      }
    }, _callee27);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.synthetix =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetix().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref29 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee29(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee29$(_context29) {
        while (1) {
          switch (_context29.prev = _context29.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context29.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context29.sent;
              return _context29.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context29.stop();
          }
        }
      }, _callee29);
    }));

    return function (_x35) {
      return _ref29.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param debtRatio {BigNumber}
   * @param debtEntryIndex {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.appendAccountIssuanceRecord =
  /*#__PURE__*/
  function () {
    var _ref30 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee30(account, debtRatio, debtEntryIndex, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee30$(_context30) {
        while (1) {
          switch (_context30.prev = _context30.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context30.next = 4;
              return _this.contract.appendAccountIssuanceRecord(account, debtRatio, debtEntryIndex).send(txParams);

            case 4:
              txHash = _context30.sent;
              return _context30.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context30.stop();
          }
        }
      }, _callee30);
    }));

    return function (_x36, _x37, _x38, _x39) {
      return _ref30.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee31() {
    return regenerator_default.a.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x40, _x41) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @param currencyKey {bytes32}
   * @returns Object
   **/


  this.feesAvailable =
  /*#__PURE__*/
  function () {
    var _ref33 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee33(account, currencyKey) {
      return regenerator_default.a.wrap(function _callee33$(_context33) {
        while (1) {
          switch (_context33.prev = _context33.next) {
            case 0:
              _context33.next = 2;
              return _this.contract.feesAvailable(account, currencyKey).call({
                _isConstant: true
              });

            case 2:
              return _context33.abrupt("return", _context33.sent);

            case 3:
            case "end":
              return _context33.stop();
          }
        }
      }, _callee33);
    }));

    return function (_x42, _x43) {
      return _ref33.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context34.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context34.sent;
              return _context34.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x44) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.rewardEscrow =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.rewardEscrow().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee37() {
    return regenerator_default.a.wrap(function _callee37$(_context37) {
      while (1) {
        switch (_context37.prev = _context37.next) {
          case 0:
            _context37.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context37.abrupt("return", _context37.sent);

          case 3:
          case "end":
            return _context37.stop();
        }
      }
    }, _callee37);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.getPenaltyThresholdRatio =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee38() {
    return regenerator_default.a.wrap(function _callee38$(_context38) {
      while (1) {
        switch (_context38.prev = _context38.next) {
          case 0:
            _context38.next = 2;
            return _this.contract.getPenaltyThresholdRatio().call({
              _isConstant: true
            });

          case 2:
            return _context38.abrupt("return", _context38.sent);

          case 3:
          case "end":
            return _context38.stop();
        }
      }
    }, _callee38);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param feePeriodIndex {BigNumber}
   * @param feePeriodId {BigNumber}
   * @param startingDebtIndex {BigNumber}
   * @param startTime {BigNumber}
   * @param feesToDistribute {BigNumber}
   * @param feesClaimed {BigNumber}
   * @param rewardsToDistribute {BigNumber}
   * @param rewardsClaimed {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.importFeePeriod =
  /*#__PURE__*/
  function () {
    var _ref39 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee39(feePeriodIndex, feePeriodId, startingDebtIndex, startTime, feesToDistribute, feesClaimed, rewardsToDistribute, rewardsClaimed, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee39$(_context39) {
        while (1) {
          switch (_context39.prev = _context39.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context39.next = 4;
              return _this.contract.importFeePeriod(feePeriodIndex, feePeriodId, startingDebtIndex, startTime, feesToDistribute, feesClaimed, rewardsToDistribute, rewardsClaimed).send(txParams);

            case 4:
              txHash = _context39.sent;
              return _context39.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context39.stop();
          }
        }
      }, _callee39);
    }));

    return function (_x45, _x46, _x47, _x48, _x49, _x50, _x51, _x52, _x53) {
      return _ref39.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param quantity {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.appendVestingEntry =
  /*#__PURE__*/
  function () {
    var _ref40 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee40(account, quantity, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee40$(_context40) {
        while (1) {
          switch (_context40.prev = _context40.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context40.next = 4;
              return _this.contract.appendVestingEntry(account, quantity).send(txParams);

            case 4:
              txHash = _context40.sent;
              return _context40.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context40.stop();
          }
        }
      }, _callee40);
    }));

    return function (_x54, _x55, _x56) {
      return _ref40.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param value {BigNumber}
   * @returns BigNumber
   **/


  this.amountReceivedFromTransfer =
  /*#__PURE__*/
  function () {
    var _ref41 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee41(value) {
      return regenerator_default.a.wrap(function _callee41$(_context41) {
        while (1) {
          switch (_context41.prev = _context41.next) {
            case 0:
              _context41.next = 2;
              return _this.contract.amountReceivedFromTransfer(value).call({
                _isConstant: true
              });

            case 2:
              return _context41.abrupt("return", _context41.sent);

            case 3:
            case "end":
              return _context41.stop();
          }
        }
      }, _callee41);
    }));

    return function (_x57) {
      return _ref41.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee42() {
    return regenerator_default.a.wrap(function _callee42$(_context42) {
      while (1) {
        switch (_context42.prev = _context42.next) {
          case 0:
            _context42.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context42.abrupt("return", _context42.sent);

          case 3:
          case "end":
            return _context42.stop();
        }
      }
    }, _callee42);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref43 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee43(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee43$(_context43) {
        while (1) {
          switch (_context43.prev = _context43.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context43.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context43.sent;
              return _context43.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context43.stop();
          }
        }
      }, _callee43);
    }));

    return function (_x58, _x59) {
      return _ref43.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref44 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee44(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee44$(_context44) {
        while (1) {
          switch (_context44.prev = _context44.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context44.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context44.sent;
              return _context44.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context44.stop();
          }
        }
      }, _callee44);
    }));

    return function (_x60) {
      return _ref44.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee45() {
    return regenerator_default.a.wrap(function _callee45$(_context45) {
      while (1) {
        switch (_context45.prev = _context45.next) {
          case 0:
            _context45.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context45.abrupt("return", _context45.sent);

          case 3:
          case "end":
            return _context45.stop();
        }
      }
    }, _callee45);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param value {BigNumber}
   * @returns BigNumber
   **/

  this.exchangeFeeIncurred =
  /*#__PURE__*/
  function () {
    var _ref46 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee46(value) {
      return regenerator_default.a.wrap(function _callee46$(_context46) {
        while (1) {
          switch (_context46.prev = _context46.next) {
            case 0:
              _context46.next = 2;
              return _this.contract.exchangeFeeIncurred(value).call({
                _isConstant: true
              });

            case 2:
              return _context46.abrupt("return", _context46.sent);

            case 3:
            case "end":
              return _context46.stop();
          }
        }
      }, _callee46);
    }));

    return function (_x61) {
      return _ref46.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.FEE_PERIOD_LENGTH =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee47() {
    return regenerator_default.a.wrap(function _callee47$(_context47) {
      while (1) {
        switch (_context47.prev = _context47.next) {
          case 0:
            _context47.next = 2;
            return _this.contract.FEE_PERIOD_LENGTH().call({
              _isConstant: true
            });

          case 2:
            return _context47.abrupt("return", _context47.sent);

          case 3:
          case "end":
            return _context47.stop();
        }
      }
    }, _callee47);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.rewardsAuthority =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee48() {
    return regenerator_default.a.wrap(function _callee48$(_context48) {
      while (1) {
        switch (_context48.prev = _context48.next) {
          case 0:
            _context48.next = 2;
            return _this.contract.rewardsAuthority().call({
              _isConstant: true
            });

          case 2:
            return _context48.abrupt("return", _context48.sent);

          case 3:
          case "end":
            return _context48.stop();
        }
      }
    }, _callee48);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.claimFees =
  /*#__PURE__*/
  function () {
    var _ref49 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee49(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee49$(_context49) {
        while (1) {
          switch (_context49.prev = _context49.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context49.next = 4;
              return _this.contract.claimFees().send(txParams);

            case 4:
              txHash = _context49.sent;
              return _context49.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context49.stop();
          }
        }
      }, _callee49);
    }));

    return function (_x62) {
      return _ref49.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.MIN_FEE_PERIOD_DURATION =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee50() {
    return regenerator_default.a.wrap(function _callee50$(_context50) {
      while (1) {
        switch (_context50.prev = _context50.next) {
          case 0:
            _context50.next = 2;
            return _this.contract.MIN_FEE_PERIOD_DURATION().call({
              _isConstant: true
            });

          case 2:
            return _context50.abrupt("return", _context50.sent);

          case 3:
          case "end":
            return _context50.stop();
        }
      }
    }, _callee50);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee51() {
    return regenerator_default.a.wrap(function _callee51$(_context51) {
      while (1) {
        switch (_context51.prev = _context51.next) {
          case 0:
            _context51.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context51.abrupt("return", _context51.sent);

          case 3:
          case "end":
            return _context51.stop();
        }
      }
    }, _callee51);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.synthetixState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee52() {
    return regenerator_default.a.wrap(function _callee52$(_context52) {
      while (1) {
        switch (_context52.prev = _context52.next) {
          case 0:
            _context52.next = 2;
            return _this.contract.synthetixState().call({
              _isConstant: true
            });

          case 2:
            return _context52.abrupt("return", _context52.sent);

          case 3:
          case "end":
            return _context52.stop();
        }
      }
    }, _callee52);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param value {BigNumber}
   * @returns BigNumber
   **/

  this.amountReceivedFromExchange =
  /*#__PURE__*/
  function () {
    var _ref53 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee53(value) {
      return regenerator_default.a.wrap(function _callee53$(_context53) {
        while (1) {
          switch (_context53.prev = _context53.next) {
            case 0:
              _context53.next = 2;
              return _this.contract.amountReceivedFromExchange(value).call({
                _isConstant: true
              });

            case 2:
              return _context53.abrupt("return", _context53.sent);

            case 3:
            case "end":
              return _context53.stop();
          }
        }
      }, _callee53);
    }));

    return function (_x63) {
      return _ref53.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.targetThreshold =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee54() {
    return regenerator_default.a.wrap(function _callee54$(_context54) {
      while (1) {
        switch (_context54.prev = _context54.next) {
          case 0:
            _context54.next = 2;
            return _this.contract.targetThreshold().call({
              _isConstant: true
            });

          case 2:
            return _context54.abrupt("return", _context54.sent);

          case 3:
          case "end":
            return _context54.stop();
        }
      }
    }, _callee54);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee55() {
    return regenerator_default.a.wrap(function _callee55$(_context55) {
      while (1) {
        switch (_context55.prev = _context55.next) {
          case 0:
            _context55.next = 2;
            return _this.contract.feePoolState().call({
              _isConstant: true
            });

          case 2:
            return _context55.abrupt("return", _context55.sent);

          case 3:
          case "end":
            return _context55.stop();
        }
      }
    }, _callee55);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param currencyKey {bytes32}
   * @returns BigNumber
   **/

  this.totalFeesAvailable =
  /*#__PURE__*/
  function () {
    var _ref56 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee56(currencyKey) {
      return regenerator_default.a.wrap(function _callee56$(_context56) {
        while (1) {
          switch (_context56.prev = _context56.next) {
            case 0:
              _context56.next = 2;
              return _this.contract.totalFeesAvailable(currencyKey).call({
                _isConstant: true
              });

            case 2:
              return _context56.abrupt("return", _context56.sent);

            case 3:
            case "end":
              return _context56.stop();
          }
        }
      }, _callee56);
    }));

    return function (_x64) {
      return _ref56.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.FEE_ADDRESS =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee57() {
    return regenerator_default.a.wrap(function _callee57$(_context57) {
      while (1) {
        switch (_context57.prev = _context57.next) {
          case 0:
            _context57.next = 2;
            return _this.contract.FEE_ADDRESS().call({
              _isConstant: true
            });

          case 2:
            return _context57.abrupt("return", _context57.sent);

          case 3:
          case "end":
            return _context57.stop();
        }
      }
    }, _callee57);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee58() {
    return regenerator_default.a.wrap(function _callee58$(_context58) {
      while (1) {
        switch (_context58.prev = _context58.next) {
          case 0:
            _context58.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context58.abrupt("return", _context58.sent);

          case 3:
          case "end":
            return _context58.stop();
        }
      }
    }, _callee58);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.MAX_FEE_PERIOD_DURATION =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee59() {
    return regenerator_default.a.wrap(function _callee59$(_context59) {
      while (1) {
        switch (_context59.prev = _context59.next) {
          case 0:
            _context59.next = 2;
            return _this.contract.MAX_FEE_PERIOD_DURATION().call({
              _isConstant: true
            });

          case 2:
            return _context59.abrupt("return", _context59.sent);

          case 3:
          case "end":
            return _context59.stop();
        }
      }
    }, _callee59);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.MAX_EXCHANGE_FEE_RATE =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee60() {
    return regenerator_default.a.wrap(function _callee60$(_context60) {
      while (1) {
        switch (_context60.prev = _context60.next) {
          case 0:
            _context60.next = 2;
            return _this.contract.MAX_EXCHANGE_FEE_RATE().call({
              _isConstant: true
            });

          case 2:
            return _context60.abrupt("return", _context60.sent);

          case 3:
          case "end":
            return _context60.stop();
        }
      }
    }, _callee60);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setRewardsToDistribute =
  /*#__PURE__*/
  function () {
    var _ref61 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee61(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee61$(_context61) {
        while (1) {
          switch (_context61.prev = _context61.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context61.next = 4;
              return _this.contract.setRewardsToDistribute(amount).send(txParams);

            case 4:
              txHash = _context61.sent;
              return _context61.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context61.stop();
          }
        }
      }, _callee61);
    }));

    return function (_x65, _x66) {
      return _ref61.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetix {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setSynthetix =
  /*#__PURE__*/
  function () {
    var _ref62 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee62(_synthetix, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee62$(_context62) {
        while (1) {
          switch (_context62.prev = _context62.next) {
            case 0:
              txParams = txParams || {};
              txParams = FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context62.next = 4;
              return _this.contract.setSynthetix(_synthetix).send(txParams);

            case 4:
              txHash = _context62.sent;
              return _context62.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context62.stop();
          }
        }
      }, _callee62);
    }));

    return function (_x67, _x68) {
      return _ref62.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var mainnet_FeePool = (FeePool_FeePool);
// CONCATENATED MODULE: ./src/contracts/mainnet/ProxyERC20.js




function ProxyERC20_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function ProxyERC20_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ProxyERC20_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ProxyERC20_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function ProxyERC20_ProxyERC20(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxyERC20'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(ProxyERC20, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = ProxyERC20_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = ProxyERC20_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee4() {
    return regenerator_default.a.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context4.abrupt("return", _context4.sent);

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref5 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee5(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              txParams = txParams || {};
              txParams = ProxyERC20_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context5.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context5.sent;
              return _context5.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    return function (_x6, _x7, _x8, _x9) {
      return _ref5.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee7() {
    return regenerator_default.a.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context7.abrupt("return", _context7.sent);

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(account) {
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context8.abrupt("return", _context8.sent);

            case 3:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _target {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTarget =
  /*#__PURE__*/
  function () {
    var _ref9 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee9(_target, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              txParams = txParams || {};
              txParams = ProxyERC20_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context9.next = 4;
              return _this.contract.setTarget(_target).send(txParams);

            case 4:
              txHash = _context9.sent;
              return _context9.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));

    return function (_x11, _x12) {
      return _ref9.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = ProxyERC20_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x13) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param callData {bytes}
   * @param numTopics {BigNumber}
   * @param topic1 {bytes32}
   * @param topic2 {bytes32}
   * @param topic3 {bytes32}
   * @param topic4 {bytes32}
   * @param txParams {TxParams}
  
   **/

  this._emit =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(callData, numTopics, topic1, topic2, topic3, topic4, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              txParams = txParams || {};
              txParams = ProxyERC20_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context12.next = 4;
              return _this.contract._emit(callData, numTopics, topic1, topic2, topic3, topic4).send(txParams);

            case 4:
              txHash = _context12.sent;
              return _context12.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x14, _x15, _x16, _x17, _x18, _x19, _x20) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.useDELEGATECALL =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee13() {
    return regenerator_default.a.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            _context13.next = 2;
            return _this.contract.useDELEGATECALL().call({
              _isConstant: true
            });

          case 2:
            return _context13.abrupt("return", _context13.sent);

          case 3:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee14() {
    return regenerator_default.a.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            _context14.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context14.abrupt("return", _context14.sent);

          case 3:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref15 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee15(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              txParams = txParams || {};
              txParams = ProxyERC20_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context15.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context15.sent;
              return _context15.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    }));

    return function (_x21, _x22, _x23) {
      return _ref15.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param value {boolean}
   * @param txParams {TxParams}
  
   **/


  this.setUseDELEGATECALL =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = ProxyERC20_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setUseDELEGATECALL(value).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x24, _x25) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.target =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.target().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(owner, spender) {
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context18.abrupt("return", _context18.sent);

            case 3:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x26, _x27) {
      return _ref18.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var mainnet_ProxyERC20 = (ProxyERC20_ProxyERC20);
// CONCATENATED MODULE: ./src/contracts/mainnet/Synth.js




function Synth_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function Synth_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Synth_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Synth_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function Synth_Synth(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxysUSD'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(mainnet_Synth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Override ERC20 transferFrom function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.issue =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17, _x18, _x19) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x20, _x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x22, _x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x24) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x25, _x26, _x27) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28, _x29) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Override ERC20 transfer function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x30, _x31, _x32) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x33, _x34) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x35) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee31() {
    return regenerator_default.a.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x36, _x37) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(owner, spender) {
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context34.abrupt("return", _context34.sent);

            case 3:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x38, _x39) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context37.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context37.sent;
              return _context37.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x40, _x41) {
      return _ref37.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var contracts_mainnet_Synth = (Synth_Synth);
// CONCATENATED MODULE: ./src/contracts/mainnet/Synthetix.js




function Synthetix_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function Synthetix_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Synthetix_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Synthetix_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function Synthetix_Synthetix(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxySynthetix'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(mainnet_Synthetix, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _gasPriceLimit {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setGasPriceLimit =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(_gasPriceLimit, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.setGasPriceLimit(_gasPriceLimit).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.deprecateTronChain =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.deprecateTronChain().send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x3) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.approve =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x4, _x5, _x6) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Only the contract owner may call this., Remove an associated Synth contract from the Synthetix system.<br>
   * Transaction (consumes gas, requires signer)
   * @param currencyKey {bytes32}
   * @param txParams {TxParams}
  
   **/


  this.removeSynth =
  /*#__PURE__*/
  function () {
    var _ref5 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee5(currencyKey, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context5.next = 4;
              return _this.contract.removeSynth(currencyKey).send(txParams);

            case 4:
              txHash = _context5.sent;
              return _context5.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    return function (_x7, _x8) {
      return _ref5.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.mint =
  /*#__PURE__*/
  function () {
    var _ref6 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee6(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context6.next = 4;
              return _this.contract.mint().send(txParams);

            case 4:
              txHash = _context6.sent;
              return _context6.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    return function (_x9) {
      return _ref6.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x10, _x11) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {String<TrxAddress>}
   * @returns bytes32
   **/


  this.synthsByAddress =
  /*#__PURE__*/
  function () {
    var _ref9 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee9(address_1) {
      return regenerator_default.a.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return _this.contract.synthsByAddress(address_1).call({
                _isConstant: true
              });

            case 2:
              return _context9.abrupt("return", _context9.sent);

            case 3:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));

    return function (_x14) {
      return _ref9.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee10() {
    return regenerator_default.a.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context10.abrupt("return", _context10.sent);

          case 3:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePool {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePool =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(_feePool, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context12.next = 4;
              return _this.contract.setFeePool(_feePool).send(txParams);

            case 4:
              txHash = _context12.sent;
              return _context12.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15, _x16) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param sourceCurrencyKey {bytes32}
   * @param destinationCurrencyKey {bytes32}
   * @returns BigNumber
   **/


  this.feeRateForExchange =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(sourceCurrencyKey, destinationCurrencyKey) {
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return _this.contract.feeRateForExchange(sourceCurrencyKey, destinationCurrencyKey).call({
                _isConstant: true
              });

            case 2:
              return _context13.abrupt("return", _context13.sent);

            case 3:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x17, _x18) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _gasLimitOracle {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setGasLimitOracle =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(_gasLimitOracle, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.setGasLimitOracle(_gasLimitOracle).send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x19, _x20) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref15 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee15(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context15.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context15.sent;
              return _context15.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    }));

    return function (_x21, _x22) {
      return _ref15.apply(this, arguments);
    };
  }();
  /**
   * ERC20 transferFrom function.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x23, _x24, _x25, _x26) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Burn synths to clear issued synths/free SNX.<br>
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.burnSynths =
  /*#__PURE__*/
  function () {
    var _ref17 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee17(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context17.next = 4;
              return _this.contract.burnSynths(amount).send(txParams);

            case 4:
              txHash = _context17.sent;
              return _context17.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17);
    }));

    return function (_x27, _x28) {
      return _ref17.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee18() {
    return regenerator_default.a.wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            _context18.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context18.abrupt("return", _context18.sent);

          case 3:
          case "end":
            return _context18.stop();
        }
      }
    }, _callee18);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {bytes32}
   * @returns String<TrxAddress>
   **/

  this.synths =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(bytes32_1) {
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              _context19.next = 2;
              return _this.contract.synths(bytes32_1).call({
                _isConstant: true
              });

            case 2:
              return _context19.abrupt("return", _context19.sent);

            case 3:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x29) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref20 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee20(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context20.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context20.sent;
              return _context20.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20);
    }));

    return function (_x30) {
      return _ref20.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
   * @returns BigNumber
   **/


  this.immediateVestAll =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.immediateVestAll().send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x31) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {String<TrxAddress>}
   * @returns boolean
   **/


  this.hasVestedAll =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(address_1) {
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              _context22.next = 2;
              return _this.contract.hasVestedAll(address_1).call({
                _isConstant: true
              });

            case 2:
              return _context22.abrupt("return", _context22.sent);

            case 3:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x32) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.rewardsDistribution =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.rewardsDistribution().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.escrowedBalance =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(account) {
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              _context24.next = 2;
              return _this.contract.escrowedBalance(account).call({
                _isConstant: true
              });

            case 2:
              return _context24.abrupt("return", _context24.sent);

            case 3:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x33) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.exchangeRates =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.exchangeRates().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee26() {
    return regenerator_default.a.wrap(function _callee26$(_context26) {
      while (1) {
        switch (_context26.prev = _context26.next) {
          case 0:
            _context26.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context26.abrupt("return", _context26.sent);

          case 3:
          case "end":
            return _context26.stop();
        }
      }
    }, _callee26);
  }));
  /**
   * Only callable by the contract owner., Set the ExchangeRates contract address where rates are held.<br>
   * Transaction (consumes gas, requires signer)
   * @param _exchangeRates {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setExchangeRates =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(_exchangeRates, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.setExchangeRates(_exchangeRates).send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x34, _x35) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * A function that lets you easily convert an amount in a source currency to an amount in the destination currency.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param sourceCurrencyKey {bytes32}
   * @param sourceAmount {BigNumber}
   * @param destinationCurrencyKey {bytes32}
   * @returns BigNumber
   **/


  this.effectiveValue =
  /*#__PURE__*/
  function () {
    var _ref28 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee28(sourceCurrencyKey, sourceAmount, destinationCurrencyKey) {
      return regenerator_default.a.wrap(function _callee28$(_context28) {
        while (1) {
          switch (_context28.prev = _context28.next) {
            case 0:
              _context28.next = 2;
              return _this.contract.effectiveValue(sourceCurrencyKey, sourceAmount, destinationCurrencyKey).call({
                _isConstant: true
              });

            case 2:
              return _context28.abrupt("return", _context28.sent);

            case 3:
            case "end":
              return _context28.stop();
          }
        }
      }, _callee28);
    }));

    return function (_x36, _x37, _x38) {
      return _ref28.apply(this, arguments);
    };
  }();
  /**
   * When issuing, escrowed SNX are locked first, then non-escrowed SNX are locked last, but escrowed SNX are not transferable, so they are not included in this calculation., The number of SNX that are free to be transferred by an account.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.transferableSynthetix =
  /*#__PURE__*/
  function () {
    var _ref29 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee29(account) {
      return regenerator_default.a.wrap(function _callee29$(_context29) {
        while (1) {
          switch (_context29.prev = _context29.next) {
            case 0:
              _context29.next = 2;
              return _this.contract.transferableSynthetix(account).call({
                _isConstant: true
              });

            case 2:
              return _context29.abrupt("return", _context29.sent);

            case 3:
            case "end":
              return _context29.stop();
          }
        }
      }, _callee29);
    }));

    return function (_x39) {
      return _ref29.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param _givenGasPrice {BigNumber}
  
   **/


  this.validateGasPrice =
  /*#__PURE__*/
  function () {
    var _ref30 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee30(_givenGasPrice) {
      return regenerator_default.a.wrap(function _callee30$(_context30) {
        while (1) {
          switch (_context30.prev = _context30.next) {
            case 0:
              _context30.next = 2;
              return _this.contract.validateGasPrice(_givenGasPrice).call({
                _isConstant: true
              });

            case 2:
              return _context30.abrupt("return", _context30.sent);

            case 3:
            case "end":
              return _context30.stop();
          }
        }
      }, _callee30);
    }));

    return function (_x40) {
      return _ref30.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref31 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee31(account) {
      return regenerator_default.a.wrap(function _callee31$(_context31) {
        while (1) {
          switch (_context31.prev = _context31.next) {
            case 0:
              _context31.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context31.abrupt("return", _context31.sent);

            case 3:
            case "end":
              return _context31.stop();
          }
        }
      }, _callee31);
    }));

    return function (_x41) {
      return _ref31.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32[]
   **/


  this.availableCurrencyKeys =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee32() {
    return regenerator_default.a.wrap(function _callee32$(_context32) {
      while (1) {
        switch (_context32.prev = _context32.next) {
          case 0:
            _context32.next = 2;
            return _this.contract.availableCurrencyKeys().call({
              _isConstant: true
            });

          case 2:
            return _context32.abrupt("return", _context32.sent);

          case 3:
          case "end":
            return _context32.stop();
        }
      }
    }, _callee32);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/

  this.tronChainDeprecated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.tronChainDeprecated().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context34.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context34.sent;
              return _context34.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x42) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * The remaining synths an issuer can issue against their total synthetix balance.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param issuer {String<TrxAddress>}
   * @param currencyKey {bytes32}
   * @returns BigNumber
   **/


  this.remainingIssuableSynths =
  /*#__PURE__*/
  function () {
    var _ref35 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee35(issuer, currencyKey) {
      return regenerator_default.a.wrap(function _callee35$(_context35) {
        while (1) {
          switch (_context35.prev = _context35.next) {
            case 0:
              _context35.next = 2;
              return _this.contract.remainingIssuableSynths(issuer, currencyKey).call({
                _isConstant: true
              });

            case 2:
              return _context35.abrupt("return", _context35.sent);

            case 3:
            case "end":
              return _context35.stop();
          }
        }
      }, _callee35);
    }));

    return function (_x43, _x44) {
      return _ref35.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {BigNumber}
   * @returns String<TrxAddress>
   **/


  this.availableSynths =
  /*#__PURE__*/
  function () {
    var _ref36 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee36(uint256_1) {
      return regenerator_default.a.wrap(function _callee36$(_context36) {
        while (1) {
          switch (_context36.prev = _context36.next) {
            case 0:
              _context36.next = 2;
              return _this.contract.availableSynths(uint256_1).call({
                _isConstant: true
              });

            case 2:
              return _context36.abrupt("return", _context36.sent);

            case 3:
            case "end":
              return _context36.stop();
          }
        }
      }, _callee36);
    }));

    return function (_x45) {
      return _ref36.apply(this, arguments);
    };
  }();
  /**
   * Total amount of synths issued by the system, priced in currencyKey.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param currencyKey {bytes32}
   * @returns BigNumber
   **/


  this.totalIssuedSynths =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(currencyKey) {
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              _context37.next = 2;
              return _this.contract.totalIssuedSynths(currencyKey).call({
                _isConstant: true
              });

            case 2:
              return _context37.abrupt("return", _context37.sent);

            case 3:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x46) {
      return _ref37.apply(this, arguments);
    };
  }();
  /**
   * Only the contract owner may call this., Add an associated Synth contract to the Synthetix system.<br>
   * Transaction (consumes gas, requires signer)
   * @param synth {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.addSynth =
  /*#__PURE__*/
  function () {
    var _ref38 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee38(synth, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee38$(_context38) {
        while (1) {
          switch (_context38.prev = _context38.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context38.next = 4;
              return _this.contract.addSynth(synth).send(txParams);

            case 4:
              txHash = _context38.sent;
              return _context38.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context38.stop();
          }
        }
      }, _callee38);
    }));

    return function (_x47, _x48) {
      return _ref38.apply(this, arguments);
    };
  }();
  /**
   * Issuance is only allowed if the synthetix price isn't stale. Amount should be larger than 0., Issue synths against the sender's SNX.<br>
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.issueSynths =
  /*#__PURE__*/
  function () {
    var _ref39 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee39(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee39$(_context39) {
        while (1) {
          switch (_context39.prev = _context39.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context39.next = 4;
              return _this.contract.issueSynths(amount).send(txParams);

            case 4:
              txHash = _context39.sent;
              return _context39.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context39.stop();
          }
        }
      }, _callee39);
    }));

    return function (_x49, _x50) {
      return _ref39.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee40() {
    return regenerator_default.a.wrap(function _callee40$(_context40) {
      while (1) {
        switch (_context40.prev = _context40.next) {
          case 0:
            _context40.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context40.abrupt("return", _context40.sent);

          case 3:
          case "end":
            return _context40.stop();
        }
      }
    }, _callee40);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _exchangeEnabled {boolean}
   * @param txParams {TxParams}
  
   **/

  this.setExchangeEnabled =
  /*#__PURE__*/
  function () {
    var _ref41 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee41(_exchangeEnabled, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee41$(_context41) {
        while (1) {
          switch (_context41.prev = _context41.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context41.next = 4;
              return _this.contract.setExchangeEnabled(_exchangeEnabled).send(txParams);

            case 4:
              txHash = _context41.sent;
              return _context41.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context41.stop();
          }
        }
      }, _callee41);
    }));

    return function (_x51, _x52) {
      return _ref41.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee42() {
    return regenerator_default.a.wrap(function _callee42$(_context42) {
      while (1) {
        switch (_context42.prev = _context42.next) {
          case 0:
            _context42.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context42.abrupt("return", _context42.sent);

          case 3:
          case "end":
            return _context42.stop();
        }
      }
    }, _callee42);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.gasPriceLimit =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee43() {
    return regenerator_default.a.wrap(function _callee43$(_context43) {
      while (1) {
        switch (_context43.prev = _context43.next) {
          case 0:
            _context43.next = 2;
            return _this.contract.gasPriceLimit().call({
              _isConstant: true
            });

          case 2:
            return _context43.abrupt("return", _context43.sent);

          case 3:
          case "end":
            return _context43.stop();
        }
      }
    }, _callee43);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref44 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee44(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee44$(_context44) {
        while (1) {
          switch (_context44.prev = _context44.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context44.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context44.sent;
              return _context44.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context44.stop();
          }
        }
      }, _callee44);
    }));

    return function (_x53, _x54) {
      return _ref44.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref45 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee45(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee45$(_context45) {
        while (1) {
          switch (_context45.prev = _context45.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context45.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context45.sent;
              return _context45.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context45.stop();
          }
        }
      }, _callee45);
    }));

    return function (_x55) {
      return _ref45.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee46() {
    return regenerator_default.a.wrap(function _callee46$(_context46) {
      while (1) {
        switch (_context46.prev = _context46.next) {
          case 0:
            _context46.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context46.abrupt("return", _context46.sent);

          case 3:
          case "end":
            return _context46.stop();
        }
      }
    }, _callee46);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref47 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee47(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee47$(_context47) {
        while (1) {
          switch (_context47.prev = _context47.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context47.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context47.sent;
              return _context47.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context47.stop();
          }
        }
      }, _callee47);
    }));

    return function (_x56, _x57) {
      return _ref47.apply(this, arguments);
    };
  }();
  /**
   * The current collateralisation ratio for a user. Collateralisation ratio varies over time as the value of the underlying Synthetix asset changes, e.g. if a user issues their maximum available synths when they hold $10 worth of Synthetix, they will have issued $2 worth of synths. If the value of Synthetix changes, the ratio returned by this function will adjust accordlingly. Users are incentivised to maintain a collateralisation ratio as close to the issuance ratio as possible by altering the amount of fees they're able to claim from the system.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param issuer {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.collateralisationRatio =
  /*#__PURE__*/
  function () {
    var _ref48 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee48(issuer) {
      return regenerator_default.a.wrap(function _callee48$(_context48) {
        while (1) {
          switch (_context48.prev = _context48.next) {
            case 0:
              _context48.next = 2;
              return _this.contract.collateralisationRatio(issuer).call({
                _isConstant: true
              });

            case 2:
              return _context48.abrupt("return", _context48.sent);

            case 3:
            case "end":
              return _context48.stop();
          }
        }
      }, _callee48);
    }));

    return function (_x58) {
      return _ref48.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.rewardEscrow =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee49() {
    return regenerator_default.a.wrap(function _callee49$(_context49) {
      while (1) {
        switch (_context49.prev = _context49.next) {
          case 0:
            _context49.next = 2;
            return _this.contract.rewardEscrow().call({
              _isConstant: true
            });

          case 2:
            return _context49.abrupt("return", _context49.sent);

          case 3:
          case "end":
            return _context49.stop();
        }
      }
    }, _callee49);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee50() {
    return regenerator_default.a.wrap(function _callee50$(_context50) {
      while (1) {
        switch (_context50.prev = _context50.next) {
          case 0:
            _context50.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context50.abrupt("return", _context50.sent);

          case 3:
          case "end":
            return _context50.stop();
        }
      }
    }, _callee50);
  }));
  /**
   * The total SNX owned by this account, both escrowed and unescrowed, against which synths can be issued. This includes those already being used as collateral (locked), and those available for further issuance (unlocked).<br>
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.collateral =
  /*#__PURE__*/
  function () {
    var _ref51 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee51(account) {
      return regenerator_default.a.wrap(function _callee51$(_context51) {
        while (1) {
          switch (_context51.prev = _context51.next) {
            case 0:
              _context51.next = 2;
              return _this.contract.collateral(account).call({
                _isConstant: true
              });

            case 2:
              return _context51.abrupt("return", _context51.sent);

            case 3:
            case "end":
              return _context51.stop();
          }
        }
      }, _callee51);
    }));

    return function (_x59) {
      return _ref51.apply(this, arguments);
    };
  }();
  /**
   * The maximum synths an issuer can issue against their total synthetix quantity, priced in XDRs. This ignores any already issued synths, and is purely giving you the maximimum amount the user can issue.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param issuer {String<TrxAddress>}
   * @param currencyKey {bytes32}
   * @returns BigNumber
   **/


  this.maxIssuableSynths =
  /*#__PURE__*/
  function () {
    var _ref52 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee52(issuer, currencyKey) {
      return regenerator_default.a.wrap(function _callee52$(_context52) {
        while (1) {
          switch (_context52.prev = _context52.next) {
            case 0:
              _context52.next = 2;
              return _this.contract.maxIssuableSynths(issuer, currencyKey).call({
                _isConstant: true
              });

            case 2:
              return _context52.abrupt("return", _context52.sent);

            case 3:
            case "end":
              return _context52.stop();
          }
        }
      }, _callee52);
    }));

    return function (_x60, _x61) {
      return _ref52.apply(this, arguments);
    };
  }();
  /**
   * ERC20 transfer function.<br>
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref53 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee53(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee53$(_context53) {
        while (1) {
          switch (_context53.prev = _context53.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context53.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context53.sent;
              return _context53.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context53.stop();
          }
        }
      }, _callee53);
    }));

    return function (_x62, _x63, _x64) {
      return _ref53.apply(this, arguments);
    };
  }();
  /**
   * Only the synth contract can call this function, Function that allows synth contract to delegate exchanging of a synth that is not the same sourceCurrency.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param sourceCurrencyKey {bytes32}
   * @param sourceAmount {BigNumber}
   * @param destinationCurrencyKey {bytes32}
   * @param destinationAddress {String<TrxAddress>}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.synthInitiatedExchange =
  /*#__PURE__*/
  function () {
    var _ref54 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee54(from, sourceCurrencyKey, sourceAmount, destinationCurrencyKey, destinationAddress, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee54$(_context54) {
        while (1) {
          switch (_context54.prev = _context54.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context54.next = 4;
              return _this.contract.synthInitiatedExchange(from, sourceCurrencyKey, sourceAmount, destinationCurrencyKey, destinationAddress).send(txParams);

            case 4:
              txHash = _context54.sent;
              return _context54.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context54.stop();
          }
        }
      }, _callee54);
    }));

    return function (_x65, _x66, _x67, _x68, _x69, _x70) {
      return _ref54.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.feePool =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee55() {
    return regenerator_default.a.wrap(function _callee55$(_context55) {
      while (1) {
        switch (_context55.prev = _context55.next) {
          case 0:
            _context55.next = 2;
            return _this.contract.feePool().call({
              _isConstant: true
            });

          case 2:
            return _context55.abrupt("return", _context55.sent);

          case 3:
          case "end":
            return _context55.stop();
        }
      }
    }, _callee55);
  }));
  /**
   * Issuance is only allowed if the synthetix price isn't stale., Issue the maximum amount of Synths possible against the sender's SNX.<br>
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.issueMaxSynths =
  /*#__PURE__*/
  function () {
    var _ref56 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee56(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee56$(_context56) {
        while (1) {
          switch (_context56.prev = _context56.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context56.next = 4;
              return _this.contract.issueMaxSynths().send(txParams);

            case 4:
              txHash = _context56.sent;
              return _context56.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context56.stop();
          }
        }
      }, _callee56);
    }));

    return function (_x71) {
      return _ref56.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee57() {
    return regenerator_default.a.wrap(function _callee57$(_context57) {
      while (1) {
        switch (_context57.prev = _context57.next) {
          case 0:
            _context57.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context57.abrupt("return", _context57.sent);

          case 3:
          case "end":
            return _context57.stop();
        }
      }
    }, _callee57);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref58 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee58(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee58$(_context58) {
        while (1) {
          switch (_context58.prev = _context58.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context58.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context58.sent;
              return _context58.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context58.stop();
          }
        }
      }, _callee58);
    }));

    return function (_x72, _x73) {
      return _ref58.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref59 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee59(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee59$(_context59) {
        while (1) {
          switch (_context59.prev = _context59.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context59.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context59.sent;
              return _context59.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context59.stop();
          }
        }
      }, _callee59);
    }));

    return function (_x74) {
      return _ref59.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.supplySchedule =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee60() {
    return regenerator_default.a.wrap(function _callee60$(_context60) {
      while (1) {
        switch (_context60.prev = _context60.next) {
          case 0:
            _context60.next = 2;
            return _this.contract.supplySchedule().call({
              _isConstant: true
            });

          case 2:
            return _context60.abrupt("return", _context60.sent);

          case 3:
          case "end":
            return _context60.stop();
        }
      }
    }, _callee60);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee61() {
    return regenerator_default.a.wrap(function _callee61$(_context61) {
      while (1) {
        switch (_context61.prev = _context61.next) {
          case 0:
            _context61.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context61.abrupt("return", _context61.sent);

          case 3:
          case "end":
            return _context61.stop();
        }
      }
    }, _callee61);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _protectionCircuitIsActivated {boolean}
   * @param txParams {TxParams}
  
   **/

  this.setProtectionCircuit =
  /*#__PURE__*/
  function () {
    var _ref62 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee62(_protectionCircuitIsActivated, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee62$(_context62) {
        while (1) {
          switch (_context62.prev = _context62.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context62.next = 4;
              return _this.contract.setProtectionCircuit(_protectionCircuitIsActivated).send(txParams);

            case 4:
              txHash = _context62.sent;
              return _context62.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context62.stop();
          }
        }
      }, _callee62);
    }));

    return function (_x75, _x76) {
      return _ref62.apply(this, arguments);
    };
  }();
  /**
   * If a user issues synths backed by SNX in their wallet, the SNX become locked. This function will tell you how many synths a user has to give back to the system in order to unlock their original debt position. This is priced in whichever synth is passed in as a currency key, e.g. you can price the debt in sUSD, XDR, or any other synth you wish.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param issuer {String<TrxAddress>}
   * @param currencyKey {bytes32}
   * @returns BigNumber
   **/


  this.debtBalanceOf =
  /*#__PURE__*/
  function () {
    var _ref63 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee63(issuer, currencyKey) {
      return regenerator_default.a.wrap(function _callee63$(_context63) {
        while (1) {
          switch (_context63.prev = _context63.next) {
            case 0:
              _context63.next = 2;
              return _this.contract.debtBalanceOf(issuer, currencyKey).call({
                _isConstant: true
              });

            case 2:
              return _context63.abrupt("return", _context63.sent);

            case 3:
            case "end":
              return _context63.stop();
          }
        }
      }, _callee63);
    }));

    return function (_x77, _x78) {
      return _ref63.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee64() {
    return regenerator_default.a.wrap(function _callee64$(_context64) {
      while (1) {
        switch (_context64.prev = _context64.next) {
          case 0:
            _context64.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context64.abrupt("return", _context64.sent);

          case 3:
          case "end":
            return _context64.stop();
        }
      }
    }, _callee64);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.synthetixState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee65() {
    return regenerator_default.a.wrap(function _callee65$(_context65) {
      while (1) {
        switch (_context65.prev = _context65.next) {
          case 0:
            _context65.next = 2;
            return _this.contract.synthetixState().call({
              _isConstant: true
            });

          case 2:
            return _context65.abrupt("return", _context65.sent);

          case 3:
          case "end":
            return _context65.stop();
        }
      }
    }, _callee65);
  }));
  /**
   * Returns the count of available synths in the system, which you can use to iterate availableSynths.<br>
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.availableSynthCount =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee66() {
    return regenerator_default.a.wrap(function _callee66$(_context66) {
      while (1) {
        switch (_context66.prev = _context66.next) {
          case 0:
            _context66.next = 2;
            return _this.contract.availableSynthCount().call({
              _isConstant: true
            });

          case 2:
            return _context66.abrupt("return", _context66.sent);

          case 3:
          case "end":
            return _context66.stop();
        }
      }
    }, _callee66);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref67 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee67(owner, spender) {
      return regenerator_default.a.wrap(function _callee67$(_context67) {
        while (1) {
          switch (_context67.prev = _context67.next) {
            case 0:
              _context67.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context67.abrupt("return", _context67.sent);

            case 3:
            case "end":
              return _context67.stop();
          }
        }
      }, _callee67);
    }));

    return function (_x79, _x80) {
      return _ref67.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.escrow =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee68() {
    return regenerator_default.a.wrap(function _callee68$(_context68) {
      while (1) {
        switch (_context68.prev = _context68.next) {
          case 0:
            _context68.next = 2;
            return _this.contract.escrow().call({
              _isConstant: true
            });

          case 2:
            return _context68.abrupt("return", _context68.sent);

          case 3:
          case "end":
            return _context68.stop();
        }
      }
    }, _callee68);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee69() {
    return regenerator_default.a.wrap(function _callee69$(_context69) {
      while (1) {
        switch (_context69.prev = _context69.next) {
          case 0:
            _context69.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context69.abrupt("return", _context69.sent);

          case 3:
          case "end":
            return _context69.stop();
        }
      }
    }, _callee69);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee70() {
    return regenerator_default.a.wrap(function _callee70$(_context70) {
      while (1) {
        switch (_context70.prev = _context70.next) {
          case 0:
            _context70.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context70.abrupt("return", _context70.sent);

          case 3:
          case "end":
            return _context70.stop();
        }
      }
    }, _callee70);
  }));
  /**
   * Function that allows you to exchange synths you hold in one flavour for another.<br>
   * Transaction (consumes gas, requires signer)
   * @param sourceCurrencyKey {bytes32}
   * @param sourceAmount {BigNumber}
   * @param destinationCurrencyKey {bytes32}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.exchange =
  /*#__PURE__*/
  function () {
    var _ref71 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee71(sourceCurrencyKey, sourceAmount, destinationCurrencyKey, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee71$(_context71) {
        while (1) {
          switch (_context71.prev = _context71.next) {
            case 0:
              txParams = txParams || {};
              txParams = Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context71.next = 4;
              return _this.contract.exchange(sourceCurrencyKey, sourceAmount, destinationCurrencyKey).send(txParams);

            case 4:
              txHash = _context71.sent;
              return _context71.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context71.stop();
          }
        }
      }, _callee71);
    }));

    return function (_x81, _x82, _x83, _x84) {
      return _ref71.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.exchangeEnabled =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee72() {
    return regenerator_default.a.wrap(function _callee72$(_context72) {
      while (1) {
        switch (_context72.prev = _context72.next) {
          case 0:
            _context72.next = 2;
            return _this.contract.exchangeEnabled().call({
              _isConstant: true
            });

          case 2:
            return _context72.abrupt("return", _context72.sent);

          case 3:
          case "end":
            return _context72.stop();
        }
      }
    }, _callee72);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.gasLimitOracle =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee73() {
    return regenerator_default.a.wrap(function _callee73$(_context73) {
      while (1) {
        switch (_context73.prev = _context73.next) {
          case 0:
            _context73.next = 2;
            return _this.contract.gasLimitOracle().call({
              _isConstant: true
            });

          case 2:
            return _context73.abrupt("return", _context73.sent);

          case 3:
          case "end":
            return _context73.stop();
        }
      }
    }, _callee73);
  }));
}

/* harmony default export */ var contracts_mainnet_Synthetix = (Synthetix_Synthetix);
// CONCATENATED MODULE: ./src/contracts/mainnet/SynthetixEscrow.js




function SynthetixEscrow_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function SynthetixEscrow_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SynthetixEscrow_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SynthetixEscrow_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function SynthetixEscrow_SynthetixEscrow(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['SynthetixEscrow'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(SynthetixEscrow, address, tronWeb, this.signer);
  /**
   * Destroy the vesting information associated with an account.<br>
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.purgeAccount =
  /*#__PURE__*/
  function () {
    var _ref = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee(account, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              txParams = txParams || {};
              txParams = SynthetixEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context.next = 4;
              return _this.contract.purgeAccount(account).send(txParams);

            case 4:
              txHash = _context.sent;
              return _context.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = SynthetixEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Obtain the index of the next schedule entry that will vest for a given user.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.getNextVestingIndex =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(account) {
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return _this.contract.getNextVestingIndex(account).call({
                _isConstant: true
              });

            case 2:
              return _context3.abrupt("return", _context3.sent);

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * A call to this should be accompanied by either enough balance already available in this contract, or a corresponding call to synthetix.endow(), to ensure that when the funds are withdrawn, there is enough balance, as well as correctly calculating the fees. This may only be called by the owner during the contract's setup period. Note; although this function could technically be used to produce unbounded arrays, it's only in the foundation's command to add to these lists., Add a new vesting entry at a given time and quantity to an account's schedule.<br>
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param time {BigNumber}
   * @param quantity {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.appendVestingEntry =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(account, time, quantity, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = SynthetixEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.appendVestingEntry(account, time, quantity).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7, _x8, _x9) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * The number of vesting dates in an account's schedule.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.numVestingEntries =
  /*#__PURE__*/
  function () {
    var _ref5 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee5(account) {
      return regenerator_default.a.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return _this.contract.numVestingEntries(account).call({
                _isConstant: true
              });

            case 2:
              return _context5.abrupt("return", _context5.sent);

            case 3:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    return function (_x10) {
      return _ref5.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.totalVestedAccountBalance =
  /*#__PURE__*/
  function () {
    var _ref6 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee6(address_1) {
      return regenerator_default.a.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return _this.contract.totalVestedAccountBalance(address_1).call({
                _isConstant: true
              });

            case 2:
              return _context6.abrupt("return", _context6.sent);

            case 3:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    return function (_x11) {
      return _ref6.apply(this, arguments);
    };
  }();
  /**
   * Obtain the next schedule entry that will vest for a given user.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns uint256[2]
   **/


  this.getNextVestingEntry =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(account) {
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return _this.contract.getNextVestingEntry(account).call({
                _isConstant: true
              });

            case 2:
              return _context7.abrupt("return", _context7.sent);

            case 3:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x12) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Allow a user to withdraw any SNX in their schedule that have vested.<br>
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.vest =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = SynthetixEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.vest().send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {String<TrxAddress>}
   * @param  {BigNumber}
   * @param  {BigNumber}
   * @returns BigNumber
   **/


  this.vestingSchedules =
  /*#__PURE__*/
  function () {
    var _ref9 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee9(address_1, uint256_1, uint256_2) {
      return regenerator_default.a.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return _this.contract.vestingSchedules(address_1, uint256_1, uint256_2).call({
                _isConstant: true
              });

            case 2:
              return _context9.abrupt("return", _context9.sent);

            case 3:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));

    return function (_x14, _x15, _x16) {
      return _ref9.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee10() {
    return regenerator_default.a.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context10.abrupt("return", _context10.sent);

          case 3:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));
  /**
   * Obtain the time at which the next schedule entry will vest for a given user.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.getNextVestingTime =
  /*#__PURE__*/
  function () {
    var _ref11 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee11(account) {
      return regenerator_default.a.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return _this.contract.getNextVestingTime(account).call({
                _isConstant: true
              });

            case 2:
              return _context11.abrupt("return", _context11.sent);

            case 3:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11);
    }));

    return function (_x17) {
      return _ref11.apply(this, arguments);
    };
  }();
  /**
   * A simple alias to totalVestedAccountBalance: provides ERC20 balance integration.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x18) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetix =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee13() {
    return regenerator_default.a.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            _context13.next = 2;
            return _this.contract.synthetix().call({
              _isConstant: true
            });

          case 2:
            return _context13.abrupt("return", _context13.sent);

          case 3:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = SynthetixEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x19) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Obtain the quantity which the next schedule entry will vest for a given user.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.getNextVestingQuantity =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(account) {
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return _this.contract.getNextVestingQuantity(account).call({
                _isConstant: true
              });

            case 2:
              return _context16.abrupt("return", _context16.sent);

            case 3:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x20) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Get the time at which a given schedule entry will vest.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @param index {BigNumber}
   * @returns BigNumber
   **/


  this.getVestingTime =
  /*#__PURE__*/
  function () {
    var _ref17 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee17(account, index) {
      return regenerator_default.a.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return _this.contract.getVestingTime(account, index).call({
                _isConstant: true
              });

            case 2:
              return _context17.abrupt("return", _context17.sent);

            case 3:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17);
    }));

    return function (_x21, _x22) {
      return _ref17.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.totalVestedBalance =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee18() {
    return regenerator_default.a.wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            _context18.next = 2;
            return _this.contract.totalVestedBalance().call({
              _isConstant: true
            });

          case 2:
            return _context18.abrupt("return", _context18.sent);

          case 3:
          case "end":
            return _context18.stop();
        }
      }
    }, _callee18);
  }));
  /**
   * Assumes that the quantities are nonzero and that the sequence of timestamps is strictly increasing. This may only be called by the owner during the contract's setup period., Construct a vesting schedule to release a quantities of SNX over a series of intervals.<br>
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param times {uint256[]}
   * @param quantities {uint256[]}
   * @param txParams {TxParams}
  
   **/

  this.addVestingSchedule =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(account, times, quantities, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = SynthetixEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.addVestingSchedule(account, times, quantities).send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x23, _x24, _x25, _x26) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Get a particular schedule entry for an account.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @param index {BigNumber}
   * @returns uint256[2]
   **/


  this.getVestingScheduleEntry =
  /*#__PURE__*/
  function () {
    var _ref20 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee20(account, index) {
      return regenerator_default.a.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              _context20.next = 2;
              return _this.contract.getVestingScheduleEntry(account, index).call({
                _isConstant: true
              });

            case 2:
              return _context20.abrupt("return", _context20.sent);

            case 3:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20);
    }));

    return function (_x27, _x28) {
      return _ref20.apply(this, arguments);
    };
  }();
  /**
   * This may only be called by the owner during the contract's setup period., Withdraws a quantity of SNX back to the synthetix contract.<br>
   * Transaction (consumes gas, requires signer)
   * @param quantity {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.withdrawSynthetix =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(quantity, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = SynthetixEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.withdrawSynthetix(quantity).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x29, _x30) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Get the quantity of SNX associated with a given schedule entry.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @param index {BigNumber}
   * @returns BigNumber
   **/


  this.getVestingQuantity =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(account, index) {
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              _context22.next = 2;
              return _this.contract.getVestingQuantity(account, index).call({
                _isConstant: true
              });

            case 2:
              return _context22.abrupt("return", _context22.sent);

            case 3:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x31, _x32) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetix {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setSynthetix =
  /*#__PURE__*/
  function () {
    var _ref23 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee23(_synthetix, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              txParams = txParams || {};
              txParams = SynthetixEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context23.next = 4;
              return _this.contract.setSynthetix(_synthetix).send(txParams);

            case 4:
              txHash = _context23.sent;
              return _context23.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23);
    }));

    return function (_x33, _x34) {
      return _ref23.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var mainnet_SynthetixEscrow = (SynthetixEscrow_SynthetixEscrow);
// CONCATENATED MODULE: ./src/contracts/mainnet/SynthetixState.js




function SynthetixState_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function SynthetixState_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SynthetixState_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SynthetixState_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function SynthetixState_SynthetixState(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['SynthetixState'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(SynthetixState, address, tronWeb, this.signer);
  /**
   * Transaction (consumes gas, requires signer)
   * @param _issuanceRatio {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setIssuanceRatio =
  /*#__PURE__*/
  function () {
    var _ref = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee(_issuanceRatio, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              txParams = txParams || {};
              txParams = SynthetixState_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context.next = 4;
              return _this.contract.setIssuanceRatio(_issuanceRatio).send(txParams);

            case 4:
              txHash = _context.sent;
              return _context.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {BigNumber}
   * @returns BigNumber
   **/


  this.debtLedger =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(uint256_1) {
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return _this.contract.debtLedger(uint256_1).call({
                _isConstant: true
              });

            case 2:
              return _context2.abrupt("return", _context2.sent);

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = SynthetixState_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.importedXDRAmount =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee4() {
    return regenerator_default.a.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return _this.contract.importedXDRAmount().call({
              _isConstant: true
            });

          case 2:
            return _context4.abrupt("return", _context4.sent);

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.incrementTotalIssuerCount =
  /*#__PURE__*/
  function () {
    var _ref5 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee5(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              txParams = txParams || {};
              txParams = SynthetixState_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context5.next = 4;
              return _this.contract.incrementTotalIssuerCount().send(txParams);

            case 4:
              txHash = _context5.sent;
              return _context5.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    return function (_x6) {
      return _ref5.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param value {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.appendDebtLedgerValue =
  /*#__PURE__*/
  function () {
    var _ref6 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee6(value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              txParams = txParams || {};
              txParams = SynthetixState_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context6.next = 4;
              return _this.contract.appendDebtLedgerValue(value).send(txParams);

            case 4:
              txHash = _context6.sent;
              return _context6.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    return function (_x7, _x8) {
      return _ref6.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.lastDebtLedgerEntry =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee7() {
    return regenerator_default.a.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return _this.contract.lastDebtLedgerEntry().call({
              _isConstant: true
            });

          case 2:
            return _context7.abrupt("return", _context7.sent);

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param currencyKey {bytes4}
   * @param txParams {TxParams}
  
   **/

  this.setPreferredCurrency =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(account, currencyKey, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = SynthetixState_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.setPreferredCurrency(account, currencyKey).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x9, _x10, _x11) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _associatedContract {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setAssociatedContract =
  /*#__PURE__*/
  function () {
    var _ref9 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee9(_associatedContract, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              txParams = txParams || {};
              txParams = SynthetixState_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context9.next = 4;
              return _this.contract.setAssociatedContract(_associatedContract).send(txParams);

            case 4:
              txHash = _context9.sent;
              return _context9.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));

    return function (_x12, _x13) {
      return _ref9.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee10() {
    return regenerator_default.a.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context10.abrupt("return", _context10.sent);

          case 3:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref11 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee11(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              txParams = txParams || {};
              txParams = SynthetixState_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context11.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context11.sent;
              return _context11.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11);
    }));

    return function (_x14) {
      return _ref11.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {String<TrxAddress>}
   * @returns Object
   **/


  this.issuanceData =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(address_1) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.issuanceData(address_1).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee13() {
    return regenerator_default.a.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            _context13.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context13.abrupt("return", _context13.sent);

          case 3:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalIssuerCount =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee14() {
    return regenerator_default.a.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            _context14.next = 2;
            return _this.contract.totalIssuerCount().call({
              _isConstant: true
            });

          case 2:
            return _context14.abrupt("return", _context14.sent);

          case 3:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param accounts {address[]}
   * @param sUSDAmounts {uint256[]}
   * @param txParams {TxParams}
  
   **/

  this.importIssuerData =
  /*#__PURE__*/
  function () {
    var _ref15 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee15(accounts, sUSDAmounts, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              txParams = txParams || {};
              txParams = SynthetixState_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context15.next = 4;
              return _this.contract.importIssuerData(accounts, sUSDAmounts).send(txParams);

            case 4:
              txHash = _context15.sent;
              return _context15.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    }));

    return function (_x16, _x17, _x18) {
      return _ref15.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param initialDebtOwnership {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.setCurrentIssuanceData =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(account, initialDebtOwnership, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = SynthetixState_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setCurrentIssuanceData(account, initialDebtOwnership).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x19, _x20, _x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.associatedContract =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.associatedContract().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.clearIssuanceData =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(account, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = SynthetixState_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.clearIssuanceData(account).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x22, _x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.issuanceRatio =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee19() {
    return regenerator_default.a.wrap(function _callee19$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            _context19.next = 2;
            return _this.contract.issuanceRatio().call({
              _isConstant: true
            });

          case 2:
            return _context19.abrupt("return", _context19.sent);

          case 3:
          case "end":
            return _context19.stop();
        }
      }
    }, _callee19);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns boolean
   **/

  this.hasIssued =
  /*#__PURE__*/
  function () {
    var _ref20 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee20(account) {
      return regenerator_default.a.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              _context20.next = 2;
              return _this.contract.hasIssued(account).call({
                _isConstant: true
              });

            case 2:
              return _context20.abrupt("return", _context20.sent);

            case 3:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20);
    }));

    return function (_x24) {
      return _ref20.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.decrementTotalIssuerCount =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = SynthetixState_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.decrementTotalIssuerCount().send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x25) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {String<TrxAddress>}
   * @returns bytes4
   **/


  this.preferredCurrency =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(address_1) {
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              _context22.next = 2;
              return _this.contract.preferredCurrency(address_1).call({
                _isConstant: true
              });

            case 2:
              return _context22.abrupt("return", _context22.sent);

            case 3:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x26) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.debtLedgerLength =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.debtLedgerLength().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
}

/* harmony default export */ var mainnet_SynthetixState = (SynthetixState_SynthetixState);
// CONCATENATED MODULE: ./src/contracts/mainnet/RewardEscrow.js




function RewardEscrow_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function RewardEscrow_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { RewardEscrow_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { RewardEscrow_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function RewardEscrow_RewardEscrow(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['RewardEscrow'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(RewardEscrow, address, tronWeb, this.signer);
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              txParams = txParams || {};
              txParams = RewardEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context.sent;
              return _context.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePool {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setFeePool =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(_feePool, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = RewardEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.setFeePool(_feePool).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.getNextVestingIndex =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(account) {
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return _this.contract.getNextVestingIndex(account).call({
                _isConstant: true
              });

            case 2:
              return _context3.abrupt("return", _context3.sent);

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.numVestingEntries =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(account) {
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return _this.contract.numVestingEntries(account).call({
                _isConstant: true
              });

            case 2:
              return _context4.abrupt("return", _context4.sent);

            case 3:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.totalVestedAccountBalance =
  /*#__PURE__*/
  function () {
    var _ref5 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee5(address_1) {
      return regenerator_default.a.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return _this.contract.totalVestedAccountBalance(address_1).call({
                _isConstant: true
              });

            case 2:
              return _context5.abrupt("return", _context5.sent);

            case 3:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    return function (_x7) {
      return _ref5.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns uint256[2]
   **/


  this.getNextVestingEntry =
  /*#__PURE__*/
  function () {
    var _ref6 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee6(account) {
      return regenerator_default.a.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return _this.contract.getNextVestingEntry(account).call({
                _isConstant: true
              });

            case 2:
              return _context6.abrupt("return", _context6.sent);

            case 3:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    return function (_x8) {
      return _ref6.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.totalEscrowedAccountBalance =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(address_1) {
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return _this.contract.totalEscrowedAccountBalance(address_1).call({
                _isConstant: true
              });

            case 2:
              return _context7.abrupt("return", _context7.sent);

            case 3:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns uint256[520]
   **/


  this.checkAccountSchedule =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(account) {
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return _this.contract.checkAccountSchedule(account).call({
                _isConstant: true
              });

            case 2:
              return _context8.abrupt("return", _context8.sent);

            case 3:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.vest =
  /*#__PURE__*/
  function () {
    var _ref9 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee9(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              txParams = txParams || {};
              txParams = RewardEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context9.next = 4;
              return _this.contract.vest().send(txParams);

            case 4:
              txHash = _context9.sent;
              return _context9.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));

    return function (_x11) {
      return _ref9.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {String<TrxAddress>}
   * @param  {BigNumber}
   * @param  {BigNumber}
   * @returns BigNumber
   **/


  this.vestingSchedules =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(address_1, uint256_1, uint256_2) {
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return _this.contract.vestingSchedules(address_1, uint256_1, uint256_2).call({
                _isConstant: true
              });

            case 2:
              return _context10.abrupt("return", _context10.sent);

            case 3:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x12, _x13, _x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.getNextVestingTime =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.getNextVestingTime(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(account) {
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context13.abrupt("return", _context13.sent);

            case 3:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.totalEscrowedBalance =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee14() {
    return regenerator_default.a.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            _context14.next = 2;
            return _this.contract.totalEscrowedBalance().call({
              _isConstant: true
            });

          case 2:
            return _context14.abrupt("return", _context14.sent);

          case 3:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.synthetix =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.synthetix().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = RewardEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x17) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.getNextVestingQuantity =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(account) {
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return _this.contract.getNextVestingQuantity(account).call({
                _isConstant: true
              });

            case 2:
              return _context18.abrupt("return", _context18.sent);

            case 3:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x18) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @param index {BigNumber}
   * @returns BigNumber
   **/


  this.getVestingTime =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(account, index) {
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              _context19.next = 2;
              return _this.contract.getVestingTime(account, index).call({
                _isConstant: true
              });

            case 2:
              return _context19.abrupt("return", _context19.sent);

            case 3:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x19, _x20) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.feePool =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.feePool().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param quantity {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.appendVestingEntry =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(account, quantity, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = RewardEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.appendVestingEntry(account, quantity).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x21, _x22, _x23) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.MAX_VESTING_ENTRIES =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee22() {
    return regenerator_default.a.wrap(function _callee22$(_context22) {
      while (1) {
        switch (_context22.prev = _context22.next) {
          case 0:
            _context22.next = 2;
            return _this.contract.MAX_VESTING_ENTRIES().call({
              _isConstant: true
            });

          case 2:
            return _context22.abrupt("return", _context22.sent);

          case 3:
          case "end":
            return _context22.stop();
        }
      }
    }, _callee22);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @param index {BigNumber}
   * @returns uint256[2]
   **/

  this.getVestingScheduleEntry =
  /*#__PURE__*/
  function () {
    var _ref23 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee23(account, index) {
      return regenerator_default.a.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              _context23.next = 2;
              return _this.contract.getVestingScheduleEntry(account, index).call({
                _isConstant: true
              });

            case 2:
              return _context23.abrupt("return", _context23.sent);

            case 3:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23);
    }));

    return function (_x24, _x25) {
      return _ref23.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @param index {BigNumber}
   * @returns BigNumber
   **/


  this.getVestingQuantity =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(account, index) {
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              _context24.next = 2;
              return _this.contract.getVestingQuantity(account, index).call({
                _isConstant: true
              });

            case 2:
              return _context24.abrupt("return", _context24.sent);

            case 3:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x26, _x27) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetix {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setSynthetix =
  /*#__PURE__*/
  function () {
    var _ref25 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee25(_synthetix, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              txParams = txParams || {};
              txParams = RewardEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context25.next = 4;
              return _this.contract.setSynthetix(_synthetix).send(txParams);

            case 4:
              txHash = _context25.sent;
              return _context25.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25);
    }));

    return function (_x28, _x29) {
      return _ref25.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var mainnet_RewardEscrow = (RewardEscrow_RewardEscrow);
// CONCATENATED MODULE: ./src/contracts/mainnet/DappMaintenance.js




function DappMaintenance_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function DappMaintenance_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { DappMaintenance_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { DappMaintenance_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function DappMaintenance_DappMaintenance(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['DappMaintenance'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(DappMaintenance, address, tronWeb, this.signer);
  /**
   * Transaction (consumes gas, requires signer)
   * @param isPaused {boolean}
   * @param txParams {TxParams}
  
   **/

  this.setMaintenanceModeMintr =
  /*#__PURE__*/
  function () {
    var _ref = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee(isPaused, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              txParams = txParams || {};
              txParams = DappMaintenance_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context.next = 4;
              return _this.contract.setMaintenanceModeMintr(isPaused).send(txParams);

            case 4:
              txHash = _context.sent;
              return _context.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = DappMaintenance_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param isPaused {boolean}
   * @param txParams {TxParams}
  
   **/


  this.setMaintenanceModeAll =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(isPaused, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = DappMaintenance_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setMaintenanceModeAll(isPaused).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x5, _x6) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.isPausedMintr =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee4() {
    return regenerator_default.a.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return _this.contract.isPausedMintr().call({
              _isConstant: true
            });

          case 2:
            return _context4.abrupt("return", _context4.sent);

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref6 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee6(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              txParams = txParams || {};
              txParams = DappMaintenance_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context6.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context6.sent;
              return _context6.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    return function (_x7) {
      return _ref6.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee7() {
    return regenerator_default.a.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context7.abrupt("return", _context7.sent);

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/

  this.isPausedSX =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee8() {
    return regenerator_default.a.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return _this.contract.isPausedSX().call({
              _isConstant: true
            });

          case 2:
            return _context8.abrupt("return", _context8.sent);

          case 3:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param isPaused {boolean}
   * @param txParams {TxParams}
  
   **/

  this.setMaintenanceModeSX =
  /*#__PURE__*/
  function () {
    var _ref9 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee9(isPaused, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              txParams = txParams || {};
              txParams = DappMaintenance_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context9.next = 4;
              return _this.contract.setMaintenanceModeSX(isPaused).send(txParams);

            case 4:
              txHash = _context9.sent;
              return _context9.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));

    return function (_x8, _x9) {
      return _ref9.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var mainnet_DappMaintenance = (DappMaintenance_DappMaintenance);
// CONCATENATED MODULE: ./src/contracts/mainnet/ArbRewarder.js




function ArbRewarder_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function ArbRewarder_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ArbRewarder_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ArbRewarder_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function ArbRewarder_ArbRewarder(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ArbRewarder'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(ArbRewarder, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.uniswapAddress =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.uniswapAddress().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.synth =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee2() {
    return regenerator_default.a.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _this.contract.synth().call({
              _isConstant: true
            });

          case 2:
            return _context2.abrupt("return", _context2.sent);

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param to_addr {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.recoverETH =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(to_addr, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.recoverETH(to_addr).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x, _x2) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x3, _x4) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _paused {boolean}
   * @param txParams {TxParams}
  
   **/


  this.setPaused =
  /*#__PURE__*/
  function () {
    var _ref5 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee5(_paused, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              txParams = txParams || {};
              txParams = ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context5.next = 4;
              return _this.contract.setPaused(_paused).send(txParams);

            case 4:
              txHash = _context5.sent;
              return _context5.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    return function (_x5, _x6) {
      return _ref5.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x7, _x8) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.isArbable =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.isArbable().send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x9) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref9 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee9(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              txParams = txParams || {};
              txParams = ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context9.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context9.sent;
              return _context9.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));

    return function (_x10) {
      return _ref9.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.exchangeRates =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee10() {
    return regenerator_default.a.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return _this.contract.exchangeRates().call({
              _isConstant: true
            });

          case 2:
            return _context10.abrupt("return", _context10.sent);

          case 3:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _exchangeRatesAddress {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setExchangeRates =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(_exchangeRatesAddress, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              txParams = txParams || {};
              txParams = ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context12.next = 4;
              return _this.contract.setExchangeRates(_exchangeRatesAddress).send(txParams);

            case 4:
              txHash = _context12.sent;
              return _context12.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x11, _x12) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _acceptable_slippage {BigNumber}
   * @param _max_delay {BigNumber}
   * @param _off_peg_min {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.setParams =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(_acceptable_slippage, _max_delay, _off_peg_min, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.setParams(_acceptable_slippage, _max_delay, _off_peg_min).send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x13, _x14, _x15, _x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.paused =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee14() {
    return regenerator_default.a.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            _context14.next = 2;
            return _this.contract.paused().call({
              _isConstant: true
            });

          case 2:
            return _context14.abrupt("return", _context14.sent);

          case 3:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.uniswapExchange =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.uniswapExchange().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.synthetix =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee16() {
    return regenerator_default.a.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            _context16.next = 2;
            return _this.contract.synthetix().call({
              _isConstant: true
            });

          case 2:
            return _context16.abrupt("return", _context16.sent);

          case 3:
          case "end":
            return _context16.stop();
        }
      }
    }, _callee16);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthAddress {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthAddress =
  /*#__PURE__*/
  function () {
    var _ref17 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee17(_synthAddress, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              txParams = txParams || {};
              txParams = ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context17.next = 4;
              return _this.contract.setSynthAddress(_synthAddress).send(txParams);

            case 4:
              txHash = _context17.sent;
              return _context17.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17);
    }));

    return function (_x17, _x18) {
      return _ref17.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x19) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param erc20_addr {String<TrxAddress>}
   * @param to_addr {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.recoverERC20 =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(erc20_addr, to_addr, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.recoverERC20(erc20_addr, to_addr).send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x20, _x21, _x22) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.lastPauseTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee21() {
    return regenerator_default.a.wrap(function _callee21$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            _context21.next = 2;
            return _this.contract.lastPauseTime().call({
              _isConstant: true
            });

          case 2:
            return _context21.abrupt("return", _context21.sent);

          case 3:
          case "end":
            return _context21.stop();
        }
      }
    }, _callee21);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x23) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Transaction (consumes gas, requires signer)
  <br>Payable (to enter TRX amount set txParams.value)
   * @param txParams {TxParams}
   * @returns BigNumber
   **/

  this.arbSynthRate =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.arbSynthRate().send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x24) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _uniswapAddress {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setUniswapExchange =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(_uniswapAddress, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.setUniswapExchange(_uniswapAddress).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x25, _x26) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x27) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _address {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetix =
  /*#__PURE__*/
  function () {
    var _ref30 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee30(_address, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee30$(_context30) {
        while (1) {
          switch (_context30.prev = _context30.next) {
            case 0:
              txParams = txParams || {};
              txParams = ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context30.next = 4;
              return _this.contract.setSynthetix(_address).send(txParams);

            case 4:
              txHash = _context30.sent;
              return _context30.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context30.stop();
          }
        }
      }, _callee30);
    }));

    return function (_x28, _x29) {
      return _ref30.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var mainnet_ArbRewarder = (ArbRewarder_ArbRewarder);
// CONCATENATED MODULE: ./src/contracts/mainnet/ODR.js




function ODR_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function ODR_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ODR_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ODR_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function ODR(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxyODR'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(mainnet_Synth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Override ERC20 transferFrom function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.issue =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17, _x18, _x19) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x20, _x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x22, _x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x24) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x25, _x26, _x27) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28, _x29) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Override ERC20 transfer function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x30, _x31, _x32) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x33, _x34) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x35) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee31() {
    return regenerator_default.a.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x36, _x37) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(owner, spender) {
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context34.abrupt("return", _context34.sent);

            case 3:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x38, _x39) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              txParams = txParams || {};
              txParams = ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context37.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context37.sent;
              return _context37.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x40, _x41) {
      return _ref37.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var mainnet_ODR = (ODR);
// CONCATENATED MODULE: ./src/contracts/mainnet/sEUR.js




function sEUR_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function sEUR_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { sEUR_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { sEUR_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function sEUR(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxysEUR'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(mainnet_Synth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Override ERC20 transferFrom function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.issue =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17, _x18, _x19) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x20, _x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x22, _x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x24) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x25, _x26, _x27) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28, _x29) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Override ERC20 transfer function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x30, _x31, _x32) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x33, _x34) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x35) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee31() {
    return regenerator_default.a.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x36, _x37) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(owner, spender) {
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context34.abrupt("return", _context34.sent);

            case 3:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x38, _x39) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              txParams = txParams || {};
              txParams = sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context37.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context37.sent;
              return _context37.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x40, _x41) {
      return _ref37.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var mainnet_sEUR = (sEUR);
// CONCATENATED MODULE: ./src/contracts/mainnet/sUSD.js




function sUSD_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function sUSD_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { sUSD_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { sUSD_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function sUSD(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxysUSD'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(mainnet_Synth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Override ERC20 transferFrom function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.issue =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17, _x18, _x19) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x20, _x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x22, _x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x24) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x25, _x26, _x27) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28, _x29) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Override ERC20 transfer function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x30, _x31, _x32) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x33, _x34) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x35) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee31() {
    return regenerator_default.a.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x36, _x37) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(owner, spender) {
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context34.abrupt("return", _context34.sent);

            case 3:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x38, _x39) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              txParams = txParams || {};
              txParams = sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context37.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context37.sent;
              return _context37.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x40, _x41) {
      return _ref37.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var mainnet_sUSD = (sUSD);
// CONCATENATED MODULE: ./src/contracts/mainnet/sAUD.js




function sAUD_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function sAUD_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { sAUD_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { sAUD_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function sAUD(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxysAUD'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(mainnet_Synth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Override ERC20 transferFrom function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.issue =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17, _x18, _x19) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x20, _x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x22, _x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x24) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x25, _x26, _x27) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28, _x29) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Override ERC20 transfer function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x30, _x31, _x32) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x33, _x34) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x35) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee31() {
    return regenerator_default.a.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x36, _x37) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(owner, spender) {
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context34.abrupt("return", _context34.sent);

            case 3:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x38, _x39) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              txParams = txParams || {};
              txParams = sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context37.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context37.sent;
              return _context37.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x40, _x41) {
      return _ref37.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var mainnet_sAUD = (sAUD);
// CONCATENATED MODULE: ./src/contracts/mainnet/sGBP.js




function sGBP_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function sGBP_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { sGBP_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { sGBP_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function sGBP(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxysGBP'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(mainnet_Synth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Override ERC20 transferFrom function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.issue =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17, _x18, _x19) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x20, _x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x22, _x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x24) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x25, _x26, _x27) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28, _x29) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Override ERC20 transfer function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x30, _x31, _x32) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x33, _x34) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x35) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee31() {
    return regenerator_default.a.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x36, _x37) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(owner, spender) {
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context34.abrupt("return", _context34.sent);

            case 3:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x38, _x39) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              txParams = txParams || {};
              txParams = sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context37.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context37.sent;
              return _context37.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x40, _x41) {
      return _ref37.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var mainnet_sGBP = (sGBP);
// CONCATENATED MODULE: ./src/contracts/mainnet/sCHF.js




function sCHF_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function sCHF_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { sCHF_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { sCHF_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function sCHF(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxysCHF'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(mainnet_Synth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Override ERC20 transferFrom function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.issue =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17, _x18, _x19) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x20, _x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x22, _x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x24) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x25, _x26, _x27) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28, _x29) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Override ERC20 transfer function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x30, _x31, _x32) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x33, _x34) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x35) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee31() {
    return regenerator_default.a.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x36, _x37) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(owner, spender) {
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context34.abrupt("return", _context34.sent);

            case 3:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x38, _x39) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              txParams = txParams || {};
              txParams = sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context37.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context37.sent;
              return _context37.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x40, _x41) {
      return _ref37.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var mainnet_sCHF = (sCHF);
// CONCATENATED MODULE: ./src/contracts/mainnet/sBTC.js




function sBTC_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function sBTC_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { sBTC_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { sBTC_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function sBTC(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxysBTC'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(mainnet_Synth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Override ERC20 transferFrom function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.issue =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17, _x18, _x19) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x20, _x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x22, _x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x24) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x25, _x26, _x27) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28, _x29) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Override ERC20 transfer function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x30, _x31, _x32) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x33, _x34) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x35) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee31() {
    return regenerator_default.a.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x36, _x37) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(owner, spender) {
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context34.abrupt("return", _context34.sent);

            case 3:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x38, _x39) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              txParams = txParams || {};
              txParams = sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context37.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context37.sent;
              return _context37.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x40, _x41) {
      return _ref37.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var mainnet_sBTC = (sBTC);
// CONCATENATED MODULE: ./src/contracts/mainnet/sETH.js




function sETH_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function sETH_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { sETH_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { sETH_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function sETH(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxysETH'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(mainnet_Synth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Override ERC20 transferFrom function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.issue =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17, _x18, _x19) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x20, _x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x22, _x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x24) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x25, _x26, _x27) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28, _x29) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Override ERC20 transfer function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x30, _x31, _x32) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x33, _x34) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x35) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee31() {
    return regenerator_default.a.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x36, _x37) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(owner, spender) {
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context34.abrupt("return", _context34.sent);

            case 3:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x38, _x39) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              txParams = txParams || {};
              txParams = sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context37.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context37.sent;
              return _context37.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x40, _x41) {
      return _ref37.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var mainnet_sETH = (sETH);
// CONCATENATED MODULE: ./src/contracts/mainnet/sTRX.js




function sTRX_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function sTRX_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { sTRX_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { sTRX_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function sTRX(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxysTRX'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(mainnet_Synth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Override ERC20 transferFrom function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.issue =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17, _x18, _x19) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x20, _x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x22, _x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x24) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x25, _x26, _x27) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28, _x29) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Override ERC20 transfer function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x30, _x31, _x32) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x33, _x34) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x35) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee31() {
    return regenerator_default.a.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x36, _x37) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(owner, spender) {
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context34.abrupt("return", _context34.sent);

            case 3:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x38, _x39) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              txParams = txParams || {};
              txParams = sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context37.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context37.sent;
              return _context37.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x40, _x41) {
      return _ref37.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var mainnet_sTRX = (sTRX);
// EXTERNAL MODULE: ./lib/abis/mainnet/PurgeableSynth.json
var PurgeableSynth = __webpack_require__(31);

// CONCATENATED MODULE: ./src/contracts/mainnet/iBTC.js




function iBTC_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function iBTC_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { iBTC_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { iBTC_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function iBTC(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxyiBTC'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(PurgeableSynth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.exchangeRates =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.exchangeRates().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee12() {
    return regenerator_default.a.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            _context12.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context12.abrupt("return", _context12.sent);

          case 3:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _exchangeRates {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setExchangeRates =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(_exchangeRates, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.setExchangeRates(_exchangeRates).send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x15, _x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account) {
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context14.abrupt("return", _context14.sent);

            case 3:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref15 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee15(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              txParams = txParams || {};
              txParams = iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context15.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context15.sent;
              return _context15.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    }));

    return function (_x18) {
      return _ref15.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.maxSupplyToPurgeInUSD =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee16() {
    return regenerator_default.a.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            _context16.next = 2;
            return _this.contract.maxSupplyToPurgeInUSD().call({
              _isConstant: true
            });

          case 2:
            return _context16.abrupt("return", _context16.sent);

          case 3:
          case "end":
            return _context16.stop();
        }
      }
    }, _callee16);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.issue =
  /*#__PURE__*/
  function () {
    var _ref17 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee17(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              txParams = txParams || {};
              txParams = iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context17.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context17.sent;
              return _context17.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17);
    }));

    return function (_x19, _x20, _x21) {
      return _ref17.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee18() {
    return regenerator_default.a.wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            _context18.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context18.abrupt("return", _context18.sent);

          case 3:
          case "end":
            return _context18.stop();
        }
      }
    }, _callee18);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x22, _x23) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x24, _x25) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x26) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x27, _x28, _x29) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref25 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee25(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              txParams = txParams || {};
              txParams = iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context25.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context25.sent;
              return _context25.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25);
    }));

    return function (_x30, _x31) {
      return _ref25.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee26() {
    return regenerator_default.a.wrap(function _callee26$(_context26) {
      while (1) {
        switch (_context26.prev = _context26.next) {
          case 0:
            _context26.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context26.abrupt("return", _context26.sent);

          case 3:
          case "end":
            return _context26.stop();
        }
      }
    }, _callee26);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x32, _x33, _x34) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param addresses {address[]}
   * @param txParams {TxParams}
  
   **/


  this.purge =
  /*#__PURE__*/
  function () {
    var _ref28 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee28(addresses, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee28$(_context28) {
        while (1) {
          switch (_context28.prev = _context28.next) {
            case 0:
              txParams = txParams || {};
              txParams = iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context28.next = 4;
              return _this.contract.purge(addresses).send(txParams);

            case 4:
              txHash = _context28.sent;
              return _context28.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context28.stop();
          }
        }
      }, _callee28);
    }));

    return function (_x35, _x36) {
      return _ref28.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref30 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee30(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee30$(_context30) {
        while (1) {
          switch (_context30.prev = _context30.next) {
            case 0:
              txParams = txParams || {};
              txParams = iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context30.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context30.sent;
              return _context30.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context30.stop();
          }
        }
      }, _callee30);
    }));

    return function (_x37, _x38) {
      return _ref30.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref31 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee31(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee31$(_context31) {
        while (1) {
          switch (_context31.prev = _context31.next) {
            case 0:
              txParams = txParams || {};
              txParams = iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context31.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context31.sent;
              return _context31.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context31.stop();
          }
        }
      }, _callee31);
    }));

    return function (_x39) {
      return _ref31.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee32() {
    return regenerator_default.a.wrap(function _callee32$(_context32) {
      while (1) {
        switch (_context32.prev = _context32.next) {
          case 0:
            _context32.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context32.abrupt("return", _context32.sent);

          case 3:
          case "end":
            return _context32.stop();
        }
      }
    }, _callee32);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee34() {
    return regenerator_default.a.wrap(function _callee34$(_context34) {
      while (1) {
        switch (_context34.prev = _context34.next) {
          case 0:
            _context34.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context34.abrupt("return", _context34.sent);

          case 3:
          case "end":
            return _context34.stop();
        }
      }
    }, _callee34);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref36 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee36(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee36$(_context36) {
        while (1) {
          switch (_context36.prev = _context36.next) {
            case 0:
              txParams = txParams || {};
              txParams = iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context36.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context36.sent;
              return _context36.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context36.stop();
          }
        }
      }, _callee36);
    }));

    return function (_x40, _x41) {
      return _ref36.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee37() {
    return regenerator_default.a.wrap(function _callee37$(_context37) {
      while (1) {
        switch (_context37.prev = _context37.next) {
          case 0:
            _context37.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context37.abrupt("return", _context37.sent);

          case 3:
          case "end":
            return _context37.stop();
        }
      }
    }, _callee37);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref38 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee38(owner, spender) {
      return regenerator_default.a.wrap(function _callee38$(_context38) {
        while (1) {
          switch (_context38.prev = _context38.next) {
            case 0:
              _context38.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context38.abrupt("return", _context38.sent);

            case 3:
            case "end":
              return _context38.stop();
          }
        }
      }, _callee38);
    }));

    return function (_x42, _x43) {
      return _ref38.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee39() {
    return regenerator_default.a.wrap(function _callee39$(_context39) {
      while (1) {
        switch (_context39.prev = _context39.next) {
          case 0:
            _context39.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context39.abrupt("return", _context39.sent);

          case 3:
          case "end":
            return _context39.stop();
        }
      }
    }, _callee39);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee40() {
    return regenerator_default.a.wrap(function _callee40$(_context40) {
      while (1) {
        switch (_context40.prev = _context40.next) {
          case 0:
            _context40.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context40.abrupt("return", _context40.sent);

          case 3:
          case "end":
            return _context40.stop();
        }
      }
    }, _callee40);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref41 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee41(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee41$(_context41) {
        while (1) {
          switch (_context41.prev = _context41.next) {
            case 0:
              txParams = txParams || {};
              txParams = iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context41.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context41.sent;
              return _context41.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context41.stop();
          }
        }
      }, _callee41);
    }));

    return function (_x44, _x45) {
      return _ref41.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var mainnet_iBTC = (iBTC);
// CONCATENATED MODULE: ./src/contracts/mainnet/iTRX.js




function iTRX_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function iTRX_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { iTRX_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { iTRX_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function iTRX(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxyiTRX'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(PurgeableSynth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.exchangeRates =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.exchangeRates().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee12() {
    return regenerator_default.a.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            _context12.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context12.abrupt("return", _context12.sent);

          case 3:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _exchangeRates {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setExchangeRates =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(_exchangeRates, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.setExchangeRates(_exchangeRates).send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x15, _x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account) {
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context14.abrupt("return", _context14.sent);

            case 3:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref15 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee15(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              txParams = txParams || {};
              txParams = iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context15.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context15.sent;
              return _context15.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    }));

    return function (_x18) {
      return _ref15.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.maxSupplyToPurgeInUSD =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee16() {
    return regenerator_default.a.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            _context16.next = 2;
            return _this.contract.maxSupplyToPurgeInUSD().call({
              _isConstant: true
            });

          case 2:
            return _context16.abrupt("return", _context16.sent);

          case 3:
          case "end":
            return _context16.stop();
        }
      }
    }, _callee16);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.issue =
  /*#__PURE__*/
  function () {
    var _ref17 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee17(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              txParams = txParams || {};
              txParams = iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context17.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context17.sent;
              return _context17.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17);
    }));

    return function (_x19, _x20, _x21) {
      return _ref17.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee18() {
    return regenerator_default.a.wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            _context18.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context18.abrupt("return", _context18.sent);

          case 3:
          case "end":
            return _context18.stop();
        }
      }
    }, _callee18);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x22, _x23) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x24, _x25) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x26) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x27, _x28, _x29) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref25 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee25(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              txParams = txParams || {};
              txParams = iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context25.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context25.sent;
              return _context25.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25);
    }));

    return function (_x30, _x31) {
      return _ref25.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee26() {
    return regenerator_default.a.wrap(function _callee26$(_context26) {
      while (1) {
        switch (_context26.prev = _context26.next) {
          case 0:
            _context26.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context26.abrupt("return", _context26.sent);

          case 3:
          case "end":
            return _context26.stop();
        }
      }
    }, _callee26);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x32, _x33, _x34) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param addresses {address[]}
   * @param txParams {TxParams}
  
   **/


  this.purge =
  /*#__PURE__*/
  function () {
    var _ref28 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee28(addresses, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee28$(_context28) {
        while (1) {
          switch (_context28.prev = _context28.next) {
            case 0:
              txParams = txParams || {};
              txParams = iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context28.next = 4;
              return _this.contract.purge(addresses).send(txParams);

            case 4:
              txHash = _context28.sent;
              return _context28.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context28.stop();
          }
        }
      }, _callee28);
    }));

    return function (_x35, _x36) {
      return _ref28.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref30 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee30(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee30$(_context30) {
        while (1) {
          switch (_context30.prev = _context30.next) {
            case 0:
              txParams = txParams || {};
              txParams = iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context30.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context30.sent;
              return _context30.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context30.stop();
          }
        }
      }, _callee30);
    }));

    return function (_x37, _x38) {
      return _ref30.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref31 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee31(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee31$(_context31) {
        while (1) {
          switch (_context31.prev = _context31.next) {
            case 0:
              txParams = txParams || {};
              txParams = iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context31.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context31.sent;
              return _context31.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context31.stop();
          }
        }
      }, _callee31);
    }));

    return function (_x39) {
      return _ref31.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee32() {
    return regenerator_default.a.wrap(function _callee32$(_context32) {
      while (1) {
        switch (_context32.prev = _context32.next) {
          case 0:
            _context32.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context32.abrupt("return", _context32.sent);

          case 3:
          case "end":
            return _context32.stop();
        }
      }
    }, _callee32);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee34() {
    return regenerator_default.a.wrap(function _callee34$(_context34) {
      while (1) {
        switch (_context34.prev = _context34.next) {
          case 0:
            _context34.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context34.abrupt("return", _context34.sent);

          case 3:
          case "end":
            return _context34.stop();
        }
      }
    }, _callee34);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref36 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee36(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee36$(_context36) {
        while (1) {
          switch (_context36.prev = _context36.next) {
            case 0:
              txParams = txParams || {};
              txParams = iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context36.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context36.sent;
              return _context36.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context36.stop();
          }
        }
      }, _callee36);
    }));

    return function (_x40, _x41) {
      return _ref36.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee37() {
    return regenerator_default.a.wrap(function _callee37$(_context37) {
      while (1) {
        switch (_context37.prev = _context37.next) {
          case 0:
            _context37.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context37.abrupt("return", _context37.sent);

          case 3:
          case "end":
            return _context37.stop();
        }
      }
    }, _callee37);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref38 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee38(owner, spender) {
      return regenerator_default.a.wrap(function _callee38$(_context38) {
        while (1) {
          switch (_context38.prev = _context38.next) {
            case 0:
              _context38.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context38.abrupt("return", _context38.sent);

            case 3:
            case "end":
              return _context38.stop();
          }
        }
      }, _callee38);
    }));

    return function (_x42, _x43) {
      return _ref38.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee39() {
    return regenerator_default.a.wrap(function _callee39$(_context39) {
      while (1) {
        switch (_context39.prev = _context39.next) {
          case 0:
            _context39.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context39.abrupt("return", _context39.sent);

          case 3:
          case "end":
            return _context39.stop();
        }
      }
    }, _callee39);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee40() {
    return regenerator_default.a.wrap(function _callee40$(_context40) {
      while (1) {
        switch (_context40.prev = _context40.next) {
          case 0:
            _context40.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context40.abrupt("return", _context40.sent);

          case 3:
          case "end":
            return _context40.stop();
        }
      }
    }, _callee40);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref41 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee41(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee41$(_context41) {
        while (1) {
          switch (_context41.prev = _context41.next) {
            case 0:
              txParams = txParams || {};
              txParams = iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context41.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context41.sent;
              return _context41.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context41.stop();
          }
        }
      }, _callee41);
    }));

    return function (_x44, _x45) {
      return _ref41.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var mainnet_iTRX = (iTRX);
// CONCATENATED MODULE: ./src/contracts/mainnet/iETH.js




function iETH_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function iETH_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { iETH_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { iETH_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function iETH(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxyiETH'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(PurgeableSynth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.exchangeRates =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.exchangeRates().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee12() {
    return regenerator_default.a.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            _context12.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context12.abrupt("return", _context12.sent);

          case 3:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _exchangeRates {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setExchangeRates =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(_exchangeRates, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.setExchangeRates(_exchangeRates).send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x15, _x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account) {
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context14.abrupt("return", _context14.sent);

            case 3:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref15 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee15(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              txParams = txParams || {};
              txParams = iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context15.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context15.sent;
              return _context15.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    }));

    return function (_x18) {
      return _ref15.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.maxSupplyToPurgeInUSD =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee16() {
    return regenerator_default.a.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            _context16.next = 2;
            return _this.contract.maxSupplyToPurgeInUSD().call({
              _isConstant: true
            });

          case 2:
            return _context16.abrupt("return", _context16.sent);

          case 3:
          case "end":
            return _context16.stop();
        }
      }
    }, _callee16);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.issue =
  /*#__PURE__*/
  function () {
    var _ref17 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee17(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              txParams = txParams || {};
              txParams = iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context17.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context17.sent;
              return _context17.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17);
    }));

    return function (_x19, _x20, _x21) {
      return _ref17.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee18() {
    return regenerator_default.a.wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            _context18.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context18.abrupt("return", _context18.sent);

          case 3:
          case "end":
            return _context18.stop();
        }
      }
    }, _callee18);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x22, _x23) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x24, _x25) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x26) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x27, _x28, _x29) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref25 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee25(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              txParams = txParams || {};
              txParams = iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context25.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context25.sent;
              return _context25.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25);
    }));

    return function (_x30, _x31) {
      return _ref25.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee26() {
    return regenerator_default.a.wrap(function _callee26$(_context26) {
      while (1) {
        switch (_context26.prev = _context26.next) {
          case 0:
            _context26.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context26.abrupt("return", _context26.sent);

          case 3:
          case "end":
            return _context26.stop();
        }
      }
    }, _callee26);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x32, _x33, _x34) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param addresses {address[]}
   * @param txParams {TxParams}
  
   **/


  this.purge =
  /*#__PURE__*/
  function () {
    var _ref28 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee28(addresses, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee28$(_context28) {
        while (1) {
          switch (_context28.prev = _context28.next) {
            case 0:
              txParams = txParams || {};
              txParams = iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context28.next = 4;
              return _this.contract.purge(addresses).send(txParams);

            case 4:
              txHash = _context28.sent;
              return _context28.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context28.stop();
          }
        }
      }, _callee28);
    }));

    return function (_x35, _x36) {
      return _ref28.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref30 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee30(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee30$(_context30) {
        while (1) {
          switch (_context30.prev = _context30.next) {
            case 0:
              txParams = txParams || {};
              txParams = iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context30.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context30.sent;
              return _context30.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context30.stop();
          }
        }
      }, _callee30);
    }));

    return function (_x37, _x38) {
      return _ref30.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref31 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee31(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee31$(_context31) {
        while (1) {
          switch (_context31.prev = _context31.next) {
            case 0:
              txParams = txParams || {};
              txParams = iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context31.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context31.sent;
              return _context31.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context31.stop();
          }
        }
      }, _callee31);
    }));

    return function (_x39) {
      return _ref31.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee32() {
    return regenerator_default.a.wrap(function _callee32$(_context32) {
      while (1) {
        switch (_context32.prev = _context32.next) {
          case 0:
            _context32.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context32.abrupt("return", _context32.sent);

          case 3:
          case "end":
            return _context32.stop();
        }
      }
    }, _callee32);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee34() {
    return regenerator_default.a.wrap(function _callee34$(_context34) {
      while (1) {
        switch (_context34.prev = _context34.next) {
          case 0:
            _context34.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context34.abrupt("return", _context34.sent);

          case 3:
          case "end":
            return _context34.stop();
        }
      }
    }, _callee34);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref36 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee36(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee36$(_context36) {
        while (1) {
          switch (_context36.prev = _context36.next) {
            case 0:
              txParams = txParams || {};
              txParams = iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context36.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context36.sent;
              return _context36.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context36.stop();
          }
        }
      }, _callee36);
    }));

    return function (_x40, _x41) {
      return _ref36.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee37() {
    return regenerator_default.a.wrap(function _callee37$(_context37) {
      while (1) {
        switch (_context37.prev = _context37.next) {
          case 0:
            _context37.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context37.abrupt("return", _context37.sent);

          case 3:
          case "end":
            return _context37.stop();
        }
      }
    }, _callee37);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref38 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee38(owner, spender) {
      return regenerator_default.a.wrap(function _callee38$(_context38) {
        while (1) {
          switch (_context38.prev = _context38.next) {
            case 0:
              _context38.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context38.abrupt("return", _context38.sent);

            case 3:
            case "end":
              return _context38.stop();
          }
        }
      }, _callee38);
    }));

    return function (_x42, _x43) {
      return _ref38.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee39() {
    return regenerator_default.a.wrap(function _callee39$(_context39) {
      while (1) {
        switch (_context39.prev = _context39.next) {
          case 0:
            _context39.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context39.abrupt("return", _context39.sent);

          case 3:
          case "end":
            return _context39.stop();
        }
      }
    }, _callee39);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee40() {
    return regenerator_default.a.wrap(function _callee40$(_context40) {
      while (1) {
        switch (_context40.prev = _context40.next) {
          case 0:
            _context40.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context40.abrupt("return", _context40.sent);

          case 3:
          case "end":
            return _context40.stop();
        }
      }
    }, _callee40);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref41 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee41(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee41$(_context41) {
        while (1) {
          switch (_context41.prev = _context41.next) {
            case 0:
              txParams = txParams || {};
              txParams = iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context41.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context41.sent;
              return _context41.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context41.stop();
          }
        }
      }, _callee41);
    }));

    return function (_x44, _x45) {
      return _ref41.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var mainnet_iETH = (iETH);
// CONCATENATED MODULE: ./src/contracts/mainnet/sLINK.js




function sLINK_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function sLINK_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { sLINK_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { sLINK_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function sLINK(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxysLINK'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(mainnet_Synth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = sLINK_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = sLINK_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = sLINK_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = sLINK_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Override ERC20 transferFrom function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = sLINK_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = sLINK_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = sLINK_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.issue =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = sLINK_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17, _x18, _x19) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = sLINK_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x20, _x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = sLINK_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x22, _x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = sLINK_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x24) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = sLINK_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x25, _x26, _x27) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = sLINK_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28, _x29) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Override ERC20 transfer function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = sLINK_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x30, _x31, _x32) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = sLINK_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x33, _x34) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = sLINK_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x35) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee31() {
    return regenerator_default.a.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = sLINK_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x36, _x37) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(owner, spender) {
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context34.abrupt("return", _context34.sent);

            case 3:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x38, _x39) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              txParams = txParams || {};
              txParams = sLINK_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context37.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context37.sent;
              return _context37.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x40, _x41) {
      return _ref37.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var mainnet_sLINK = (sLINK);
// CONCATENATED MODULE: ./src/contracts/mainnet/index.js

























/* harmony default export */ var contracts_mainnet = ({
  Depot: contracts_mainnet_Depot,
  EscrowChecker: mainnet_EscrowChecker,
  ExchangeRates: mainnet_ExchangeRates,
  FeePool: mainnet_FeePool,
  ProxyERC20: mainnet_ProxyERC20,
  Synth: contracts_mainnet_Synth,
  Synthetix: contracts_mainnet_Synthetix,
  SynthetixEscrow: mainnet_SynthetixEscrow,
  SynthetixState: mainnet_SynthetixState,
  RewardEscrow: mainnet_RewardEscrow,
  DappMaintenance: mainnet_DappMaintenance,
  ArbRewarder: mainnet_ArbRewarder,
  ODR: mainnet_ODR,
  sEUR: mainnet_sEUR,
  sUSD: mainnet_sUSD,
  sAUD: mainnet_sAUD,
  sGBP: mainnet_sGBP,
  sCHF: mainnet_sCHF,
  sBTC: mainnet_sBTC,
  sETH: mainnet_sETH,
  sTRX: mainnet_sTRX,
  iBTC: mainnet_iBTC,
  iTRX: mainnet_iTRX,
  iETH: mainnet_iETH,
  sLINK: mainnet_sLINK
});
// CONCATENATED MODULE: ./src/contracts/shasta/Depot.js




function shasta_Depot_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function shasta_Depot_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { shasta_Depot_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { shasta_Depot_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function shasta_Depot_Depot(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['Depot'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(shasta_Depot, address, tronWeb, this.signer);
  /**
   * Transaction (consumes gas, requires signer)
  <br>Payable (to enter TRX amount set txParams.value)
   * @param txParams {TxParams}
   * @returns BigNumber
   **/

  this.exchangeEtherForSNX =
  /*#__PURE__*/
  function () {
    var _ref = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context.next = 4;
              return _this.contract.exchangeEtherForSNX().send(txParams);

            case 4:
              txHash = _context.sent;
              return _context.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.minimumDepositAmount =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee2() {
    return regenerator_default.a.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _this.contract.minimumDepositAmount().call({
              _isConstant: true
            });

          case 2:
            return _context2.abrupt("return", _context2.sent);

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  /**
   * Exchange ETH to sUSD while insisting on a particular rate. This allows a user to exchange while protecting against frontrunning by the contract owner on the exchange rate.<br>
   * Transaction (consumes gas, requires signer)
  <br>Payable (to enter TRX amount set txParams.value)
   * @param guaranteedRate {BigNumber}
   * @param txParams {TxParams}
   * @returns BigNumber
   **/

  this.exchangeEtherForSynthsAtRate =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(guaranteedRate, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.exchangeEtherForSynthsAtRate(guaranteedRate).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x2, _x3) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Calculate how many synths you will receive if you transfer an amount of ether.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param amount {BigNumber}
   * @returns BigNumber
   **/


  this.synthsReceivedForEther =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(amount) {
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return _this.contract.synthsReceivedForEther(amount).call({
                _isConstant: true
              });

            case 2:
              return _context4.abrupt("return", _context4.sent);

            case 3:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x4) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synth =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.synth().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Exchange sUSD for SNX.<br>
   * Transaction (consumes gas, requires signer)
   * @param synthAmount {BigNumber}
   * @param txParams {TxParams}
   * @returns BigNumber
   **/

  this.exchangeSynthsForSynthetix =
  /*#__PURE__*/
  function () {
    var _ref6 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee6(synthAmount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context6.next = 4;
              return _this.contract.exchangeSynthsForSynthetix(synthAmount).send(txParams);

            case 4:
              txHash = _context6.sent;
              return _context6.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    return function (_x5, _x6) {
      return _ref6.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x7, _x8) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _paused {boolean}
   * @param txParams {TxParams}
  
   **/


  this.setPaused =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(_paused, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.setPaused(_paused).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x9, _x10) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Exchange ETH to sUSD.<br>
   * Transaction (consumes gas, requires signer)
  <br>Payable (to enter TRX amount set txParams.value)
   * @param txParams {TxParams}
   * @returns BigNumber
   **/

  this.exchangeEtherForSynths =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.exchangeEtherForSynths().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x11) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref11 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee11(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context11.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context11.sent;
              return _context11.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11);
    }));

    return function (_x12, _x13) {
      return _ref11.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.fundsWallet =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee12() {
    return regenerator_default.a.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            _context12.next = 2;
            return _this.contract.fundsWallet().call({
              _isConstant: true
            });

          case 2:
            return _context12.abrupt("return", _context12.sent);

          case 3:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.priceStalePeriod =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee13() {
    return regenerator_default.a.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            _context13.next = 2;
            return _this.contract.priceStalePeriod().call({
              _isConstant: true
            });

          case 2:
            return _context13.abrupt("return", _context13.sent);

          case 3:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13);
  }));
  /**
   * Set the stale period on the updated price variables.<br>
   * Transaction (consumes gas, requires signer)
   * @param _time {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setPriceStalePeriod =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(_time, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.setPriceStalePeriod(_time).send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x14, _x15) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref15 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee15(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context15.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context15.sent;
              return _context15.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    }));

    return function (_x16) {
      return _ref15.apply(this, arguments);
    };
  }();
  /**
   * Set the Synth contract that the issuance controller uses to issue Synths.<br>
   * Transaction (consumes gas, requires signer)
   * @param _synth {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setSynth =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(_synth, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setSynth(_synth).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x17, _x18) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Check if the prices haven't been updated for longer than the stale period.<br>
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.pricesAreStale =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.pricesAreStale().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Access point for the oracle to update the prices of SNX / eth.<br>
   * Transaction (consumes gas, requires signer)
   * @param newEthPrice {BigNumber}
   * @param newSynthetixPrice {BigNumber}
   * @param timeSent {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.updatePrices =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(newEthPrice, newSynthetixPrice, timeSent, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.updatePrices(newEthPrice, newSynthetixPrice, timeSent).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x19, _x20, _x21, _x22) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.lastPriceUpdateTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee19() {
    return regenerator_default.a.wrap(function _callee19$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            _context19.next = 2;
            return _this.contract.lastPriceUpdateTime().call({
              _isConstant: true
            });

          case 2:
            return _context19.abrupt("return", _context19.sent);

          case 3:
          case "end":
            return _context19.stop();
        }
      }
    }, _callee19);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSellableDeposits =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.totalSellableDeposits().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.snxProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee21() {
    return regenerator_default.a.wrap(function _callee21$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            _context21.next = 2;
            return _this.contract.snxProxy().call({
              _isConstant: true
            });

          case 2:
            return _context21.abrupt("return", _context21.sent);

          case 3:
          case "end":
            return _context21.stop();
        }
      }
    }, _callee21);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee22() {
    return regenerator_default.a.wrap(function _callee22$(_context22) {
      while (1) {
        switch (_context22.prev = _context22.next) {
          case 0:
            _context22.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context22.abrupt("return", _context22.sent);

          case 3:
          case "end":
            return _context22.stop();
        }
      }
    }, _callee22);
  }));
  /**
   * Exchange sUSD for SNX while insisting on a particular rate. This allows a user to exchange while protecting against frontrunning by the contract owner on the exchange rate.<br>
   * Transaction (consumes gas, requires signer)
   * @param synthAmount {BigNumber}
   * @param guaranteedRate {BigNumber}
   * @param txParams {TxParams}
   * @returns BigNumber
   **/

  this.exchangeSynthsForSynthetixAtRate =
  /*#__PURE__*/
  function () {
    var _ref23 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee23(synthAmount, guaranteedRate, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context23.next = 4;
              return _this.contract.exchangeSynthsForSynthetixAtRate(synthAmount, guaranteedRate).send(txParams);

            case 4:
              txHash = _context23.sent;
              return _context23.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23);
    }));

    return function (_x23, _x24, _x25) {
      return _ref23.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.paused =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee24() {
    return regenerator_default.a.wrap(function _callee24$(_context24) {
      while (1) {
        switch (_context24.prev = _context24.next) {
          case 0:
            _context24.next = 2;
            return _this.contract.paused().call({
              _isConstant: true
            });

          case 2:
            return _context24.abrupt("return", _context24.sent);

          case 3:
          case "end":
            return _context24.stop();
        }
      }
    }, _callee24);
  }));
  /**
   * Set the funds wallet where ETH raised is held.<br>
   * Transaction (consumes gas, requires signer)
   * @param _fundsWallet {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFundsWallet =
  /*#__PURE__*/
  function () {
    var _ref25 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee25(_fundsWallet, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context25.next = 4;
              return _this.contract.setFundsWallet(_fundsWallet).send(txParams);

            case 4:
              txHash = _context25.sent;
              return _context25.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25);
    }));

    return function (_x26, _x27) {
      return _ref25.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.depositStartIndex =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee26() {
    return regenerator_default.a.wrap(function _callee26$(_context26) {
      while (1) {
        switch (_context26.prev = _context26.next) {
          case 0:
            _context26.next = 2;
            return _this.contract.depositStartIndex().call({
              _isConstant: true
            });

          case 2:
            return _context26.abrupt("return", _context26.sent);

          case 3:
          case "end":
            return _context26.stop();
        }
      }
    }, _callee26);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x28) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Set the Oracle that pushes the synthetix price to this contract.<br>
   * Transaction (consumes gas, requires signer)
   * @param _oracle {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setOracle =
  /*#__PURE__*/
  function () {
    var _ref28 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee28(_oracle, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee28$(_context28) {
        while (1) {
          switch (_context28.prev = _context28.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context28.next = 4;
              return _this.contract.setOracle(_oracle).send(txParams);

            case 4:
              txHash = _context28.sent;
              return _context28.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context28.stop();
          }
        }
      }, _callee28);
    }));

    return function (_x29, _x30) {
      return _ref28.apply(this, arguments);
    };
  }();
  /**
   * Exchange ETH to SNX while insisting on a particular set of rates. This allows a user to exchange while protecting against frontrunning by the contract owner on the exchange rates.<br>
   * Transaction (consumes gas, requires signer)
  <br>Payable (to enter TRX amount set txParams.value)
   * @param guaranteedEtherRate {BigNumber}
   * @param guaranteedSynthetixRate {BigNumber}
   * @param txParams {TxParams}
   * @returns BigNumber
   **/


  this.exchangeEtherForSynthetixAtRate =
  /*#__PURE__*/
  function () {
    var _ref29 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee29(guaranteedEtherRate, guaranteedSynthetixRate, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee29$(_context29) {
        while (1) {
          switch (_context29.prev = _context29.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context29.next = 4;
              return _this.contract.exchangeEtherForSynthetixAtRate(guaranteedEtherRate, guaranteedSynthetixRate).send(txParams);

            case 4:
              txHash = _context29.sent;
              return _context29.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context29.stop();
          }
        }
      }, _callee29);
    }));

    return function (_x31, _x32, _x33) {
      return _ref29.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.oracle =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.oracle().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Allows a user to withdraw all of their previously deposited synths from this contract if needed. Developer note: We could keep an index of address to deposits to make this operation more efficient but then all the other operations on the queue become less efficient. It's expected that this function will be very rarely used, so placing the inefficiency here is intentional. The usual use case does not involve a withdrawal.<br>
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.withdrawMyDepositedSynths =
  /*#__PURE__*/
  function () {
    var _ref31 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee31(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee31$(_context31) {
        while (1) {
          switch (_context31.prev = _context31.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context31.next = 4;
              return _this.contract.withdrawMyDepositedSynths().send(txParams);

            case 4:
              txHash = _context31.sent;
              return _context31.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context31.stop();
          }
        }
      }, _callee31);
    }));

    return function (_x34) {
      return _ref31.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee32() {
    return regenerator_default.a.wrap(function _callee32$(_context32) {
      while (1) {
        switch (_context32.prev = _context32.next) {
          case 0:
            _context32.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context32.abrupt("return", _context32.sent);

          case 3:
          case "end":
            return _context32.stop();
        }
      }
    }, _callee32);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.lastPauseTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.lastPauseTime().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context34.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context34.sent;
              return _context34.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x35) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Calculate how many SNX you will receive if you transfer an amount of synths.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param amount {BigNumber}
   * @returns BigNumber
   **/


  this.synthetixReceivedForSynths =
  /*#__PURE__*/
  function () {
    var _ref35 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee35(amount) {
      return regenerator_default.a.wrap(function _callee35$(_context35) {
        while (1) {
          switch (_context35.prev = _context35.next) {
            case 0:
              _context35.next = 2;
              return _this.contract.synthetixReceivedForSynths(amount).call({
                _isConstant: true
              });

            case 2:
              return _context35.abrupt("return", _context35.sent);

            case 3:
            case "end":
              return _context35.stop();
          }
        }
      }, _callee35);
    }));

    return function (_x36) {
      return _ref35.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Set the minimum deposit amount required to depoist sUSD into the FIFO queue.<br>
   * Transaction (consumes gas, requires signer)
   * @param _amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setMinimumDepositAmount =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(_amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context37.next = 4;
              return _this.contract.setMinimumDepositAmount(_amount).send(txParams);

            case 4:
              txHash = _context37.sent;
              return _context37.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x37, _x38) {
      return _ref37.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.feePool =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee38() {
    return regenerator_default.a.wrap(function _callee38$(_context38) {
      while (1) {
        switch (_context38.prev = _context38.next) {
          case 0:
            _context38.next = 2;
            return _this.contract.feePool().call({
              _isConstant: true
            });

          case 2:
            return _context38.abrupt("return", _context38.sent);

          case 3:
          case "end":
            return _context38.stop();
        }
      }
    }, _callee38);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {BigNumber}
   * @returns Object
   **/

  this.deposits =
  /*#__PURE__*/
  function () {
    var _ref39 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee39(uint256_1) {
      return regenerator_default.a.wrap(function _callee39$(_context39) {
        while (1) {
          switch (_context39.prev = _context39.next) {
            case 0:
              _context39.next = 2;
              return _this.contract.deposits(uint256_1).call({
                _isConstant: true
              });

            case 2:
              return _context39.abrupt("return", _context39.sent);

            case 3:
            case "end":
              return _context39.stop();
          }
        }
      }, _callee39);
    }));

    return function (_x39) {
      return _ref39.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee40() {
    return regenerator_default.a.wrap(function _callee40$(_context40) {
      while (1) {
        switch (_context40.prev = _context40.next) {
          case 0:
            _context40.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context40.abrupt("return", _context40.sent);

          case 3:
          case "end":
            return _context40.stop();
        }
      }
    }, _callee40);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.usdToEthPrice =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee41() {
    return regenerator_default.a.wrap(function _callee41$(_context41) {
      while (1) {
        switch (_context41.prev = _context41.next) {
          case 0:
            _context41.next = 2;
            return _this.contract.usdToEthPrice().call({
              _isConstant: true
            });

          case 2:
            return _context41.abrupt("return", _context41.sent);

          case 3:
          case "end":
            return _context41.stop();
        }
      }
    }, _callee41);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref42 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee42(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee42$(_context42) {
        while (1) {
          switch (_context42.prev = _context42.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context42.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context42.sent;
              return _context42.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context42.stop();
          }
        }
      }, _callee42);
    }));

    return function (_x40) {
      return _ref42.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee43() {
    return regenerator_default.a.wrap(function _callee43$(_context43) {
      while (1) {
        switch (_context43.prev = _context43.next) {
          case 0:
            _context43.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context43.abrupt("return", _context43.sent);

          case 3:
          case "end":
            return _context43.stop();
        }
      }
    }, _callee43);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.smallDeposits =
  /*#__PURE__*/
  function () {
    var _ref44 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee44(address_1) {
      return regenerator_default.a.wrap(function _callee44$(_context44) {
        while (1) {
          switch (_context44.prev = _context44.next) {
            case 0:
              _context44.next = 2;
              return _this.contract.smallDeposits(address_1).call({
                _isConstant: true
              });

            case 2:
              return _context44.abrupt("return", _context44.sent);

            case 3:
            case "end":
              return _context44.stop();
          }
        }
      }, _callee44);
    }));

    return function (_x41) {
      return _ref44.apply(this, arguments);
    };
  }();
  /**
   * Calculate how many SNX you will receive if you transfer an amount of ether.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param amount {BigNumber}
   * @returns BigNumber
   **/


  this.synthetixReceivedForEther =
  /*#__PURE__*/
  function () {
    var _ref45 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee45(amount) {
      return regenerator_default.a.wrap(function _callee45$(_context45) {
        while (1) {
          switch (_context45.prev = _context45.next) {
            case 0:
              _context45.next = 2;
              return _this.contract.synthetixReceivedForEther(amount).call({
                _isConstant: true
              });

            case 2:
              return _context45.abrupt("return", _context45.sent);

            case 3:
            case "end":
              return _context45.stop();
          }
        }
      }, _callee45);
    }));

    return function (_x42) {
      return _ref45.apply(this, arguments);
    };
  }();
  /**
   * DepositSynths: Allows users to deposit synths via the approve / transferFrom workflow if they'd like. You can equally just transfer synths to this contract and it will work exactly the same way but with one less call (and therefore cheaper transaction fees).<br>
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.depositSynths =
  /*#__PURE__*/
  function () {
    var _ref46 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee46(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee46$(_context46) {
        while (1) {
          switch (_context46.prev = _context46.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context46.next = 4;
              return _this.contract.depositSynths(amount).send(txParams);

            case 4:
              txHash = _context46.sent;
              return _context46.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context46.stop();
          }
        }
      }, _callee46);
    }));

    return function (_x43, _x44) {
      return _ref46.apply(this, arguments);
    };
  }();
  /**
   * Allows the owner to withdraw SNX from this contract if needed.<br>
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.withdrawSynthetix =
  /*#__PURE__*/
  function () {
    var _ref47 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee47(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee47$(_context47) {
        while (1) {
          switch (_context47.prev = _context47.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context47.next = 4;
              return _this.contract.withdrawSynthetix(amount).send(txParams);

            case 4:
              txHash = _context47.sent;
              return _context47.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context47.stop();
          }
        }
      }, _callee47);
    }));

    return function (_x45, _x46) {
      return _ref47.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.usdToSnxPrice =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee48() {
    return regenerator_default.a.wrap(function _callee48$(_context48) {
      while (1) {
        switch (_context48.prev = _context48.next) {
          case 0:
            _context48.next = 2;
            return _this.contract.usdToSnxPrice().call({
              _isConstant: true
            });

          case 2:
            return _context48.abrupt("return", _context48.sent);

          case 3:
          case "end":
            return _context48.stop();
        }
      }
    }, _callee48);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.ORACLE_FUTURE_LIMIT =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee49() {
    return regenerator_default.a.wrap(function _callee49$(_context49) {
      while (1) {
        switch (_context49.prev = _context49.next) {
          case 0:
            _context49.next = 2;
            return _this.contract.ORACLE_FUTURE_LIMIT().call({
              _isConstant: true
            });

          case 2:
            return _context49.abrupt("return", _context49.sent);

          case 3:
          case "end":
            return _context49.stop();
        }
      }
    }, _callee49);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.depositEndIndex =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee50() {
    return regenerator_default.a.wrap(function _callee50$(_context50) {
      while (1) {
        switch (_context50.prev = _context50.next) {
          case 0:
            _context50.next = 2;
            return _this.contract.depositEndIndex().call({
              _isConstant: true
            });

          case 2:
            return _context50.abrupt("return", _context50.sent);

          case 3:
          case "end":
            return _context50.stop();
        }
      }
    }, _callee50);
  }));
  /**
   * Set the Synthetix contract that the issuance controller uses to issue SNX.<br>
   * Transaction (consumes gas, requires signer)
   * @param _snxProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetix =
  /*#__PURE__*/
  function () {
    var _ref51 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee51(_snxProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee51$(_context51) {
        while (1) {
          switch (_context51.prev = _context51.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Depot_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context51.next = 4;
              return _this.contract.setSynthetix(_snxProxy).send(txParams);

            case 4:
              txHash = _context51.sent;
              return _context51.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context51.stop();
          }
        }
      }, _callee51);
    }));

    return function (_x47, _x48) {
      return _ref51.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var contracts_shasta_Depot = (shasta_Depot_Depot);
// CONCATENATED MODULE: ./src/contracts/shasta/EscrowChecker.js





/** @constructor
 * @param contractSettings {ContractSettings}
 */

function shasta_EscrowChecker_EscrowChecker(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['EscrowChecker'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(shasta_EscrowChecker, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns uint256[16]
   **/

  this.checkAccountSchedule =
  /*#__PURE__*/
  function () {
    var _ref = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee(account) {
      return regenerator_default.a.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _this.contract.checkAccountSchedule(account).call({
                _isConstant: true
              });

            case 2:
              return _context.abrupt("return", _context.sent);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetix_escrow =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee2() {
    return regenerator_default.a.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _this.contract.synthetix_escrow().call({
              _isConstant: true
            });

          case 2:
            return _context2.abrupt("return", _context2.sent);

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
}

/* harmony default export */ var contracts_shasta_EscrowChecker = (shasta_EscrowChecker_EscrowChecker);
// CONCATENATED MODULE: ./src/contracts/shasta/ExchangeRates.js




function shasta_ExchangeRates_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function shasta_ExchangeRates_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { shasta_ExchangeRates_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { shasta_ExchangeRates_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function shasta_ExchangeRates_ExchangeRates(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ExchangeRates'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(shasta_ExchangeRates, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param currencyKey {bytes32}
   * @returns boolean
   **/

  this.rateIsStale =
  /*#__PURE__*/
  function () {
    var _ref = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee(currencyKey) {
      return regenerator_default.a.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _this.contract.rateIsStale(currencyKey).call({
                _isConstant: true
              });

            case 2:
              return _context.abrupt("return", _context.sent);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param currencyKeys {bytes32[]}
   * @returns uint256[]
   **/


  this.lastRateUpdateTimesForCurrencies =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(currencyKeys) {
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return _this.contract.lastRateUpdateTimesForCurrencies(currencyKeys).call({
                _isConstant: true
              });

            case 2:
              return _context2.abrupt("return", _context2.sent);

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x2) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.rateStalePeriod =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee3() {
    return regenerator_default.a.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return _this.contract.rateStalePeriod().call({
              _isConstant: true
            });

          case 2:
            return _context3.abrupt("return", _context3.sent);

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x3, _x4) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref6 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee6(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context6.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context6.sent;
              return _context6.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    return function (_x5, _x6) {
      return _ref6.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param currencyKey {bytes32}
   * @param txParams {TxParams}
  
   **/


  this.removeAggregator =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(currencyKey, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.removeAggregator(currencyKey).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x7, _x8) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param currencyKeys {bytes32[]}
   * @returns boolean
   **/


  this.anyRateIsStale =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(currencyKeys) {
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return _this.contract.anyRateIsStale(currencyKeys).call({
                _isConstant: true
              });

            case 2:
              return _context8.abrupt("return", _context8.sent);

            case 3:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x9) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {BigNumber}
   * @returns bytes32
   **/


  this.invertedKeys =
  /*#__PURE__*/
  function () {
    var _ref9 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee9(uint256_1) {
      return regenerator_default.a.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return _this.contract.invertedKeys(uint256_1).call({
                _isConstant: true
              });

            case 2:
              return _context9.abrupt("return", _context9.sent);

            case 3:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));

    return function (_x10) {
      return _ref9.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x11) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param currencyKey {bytes32}
   * @param aggregatorAddress {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.addAggregator =
  /*#__PURE__*/
  function () {
    var _ref11 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee11(currencyKey, aggregatorAddress, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context11.next = 4;
              return _this.contract.addAggregator(currencyKey, aggregatorAddress).send(txParams);

            case 4:
              txHash = _context11.sent;
              return _context11.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11);
    }));

    return function (_x12, _x13, _x14) {
      return _ref11.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param currencyKey {bytes32}
   * @param txParams {TxParams}
  
   **/


  this.deleteRate =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(currencyKey, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context12.next = 4;
              return _this.contract.deleteRate(currencyKey).send(txParams);

            case 4:
              txHash = _context12.sent;
              return _context12.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15, _x16) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {BigNumber}
   * @returns bytes32
   **/


  this.aggregatorKeys =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(uint256_1) {
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return _this.contract.aggregatorKeys(uint256_1).call({
                _isConstant: true
              });

            case 2:
              return _context13.abrupt("return", _context13.sent);

            case 3:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x17) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee14() {
    return regenerator_default.a.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            _context14.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context14.abrupt("return", _context14.sent);

          case 3:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param sourceCurrencyKey {bytes32}
   * @param sourceAmount {BigNumber}
   * @param destinationCurrencyKey {bytes32}
   * @returns BigNumber
   **/

  this.effectiveValue =
  /*#__PURE__*/
  function () {
    var _ref15 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee15(sourceCurrencyKey, sourceAmount, destinationCurrencyKey) {
      return regenerator_default.a.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return _this.contract.effectiveValue(sourceCurrencyKey, sourceAmount, destinationCurrencyKey).call({
                _isConstant: true
              });

            case 2:
              return _context15.abrupt("return", _context15.sent);

            case 3:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    }));

    return function (_x18, _x19, _x20) {
      return _ref15.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {bytes32}
   * @returns String<TrxAddress>
   **/


  this.aggregators =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(bytes32_1) {
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return _this.contract.aggregators(bytes32_1).call({
                _isConstant: true
              });

            case 2:
              return _context16.abrupt("return", _context16.sent);

            case 3:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {bytes32}
   * @returns Object
   **/


  this.inversePricing =
  /*#__PURE__*/
  function () {
    var _ref17 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee17(bytes32_1) {
      return regenerator_default.a.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return _this.contract.inversePricing(bytes32_1).call({
                _isConstant: true
              });

            case 2:
              return _context17.abrupt("return", _context17.sent);

            case 3:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17);
    }));

    return function (_x22) {
      return _ref17.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _time {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.setRateStalePeriod =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(_time, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.setRateStalePeriod(_time).send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x24, _x25) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _oracle {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setOracle =
  /*#__PURE__*/
  function () {
    var _ref20 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee20(_oracle, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context20.next = 4;
              return _this.contract.setOracle(_oracle).send(txParams);

            case 4:
              txHash = _context20.sent;
              return _context20.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20);
    }));

    return function (_x26, _x27) {
      return _ref20.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.oracle =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee21() {
    return regenerator_default.a.wrap(function _callee21$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            _context21.next = 2;
            return _this.contract.oracle().call({
              _isConstant: true
            });

          case 2:
            return _context21.abrupt("return", _context21.sent);

          case 3:
          case "end":
            return _context21.stop();
        }
      }
    }, _callee21);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {bytes32}
   * @returns boolean
   **/

  this.isXDRParticipant =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(bytes32_1) {
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              _context22.next = 2;
              return _this.contract.isXDRParticipant(bytes32_1).call({
                _isConstant: true
              });

            case 2:
              return _context22.abrupt("return", _context22.sent);

            case 3:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x29) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {BigNumber}
   * @returns bytes32
   **/

  this.xdrParticipants =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(uint256_1) {
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              _context26.next = 2;
              return _this.contract.xdrParticipants(uint256_1).call({
                _isConstant: true
              });

            case 2:
              return _context26.abrupt("return", _context26.sent);

            case 3:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x30) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param currencyKey {bytes32}
   * @returns BigNumber
   **/


  this.rateForCurrency =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(currencyKey) {
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              _context27.next = 2;
              return _this.contract.rateForCurrency(currencyKey).call({
                _isConstant: true
              });

            case 2:
              return _context27.abrupt("return", _context27.sent);

            case 3:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x31) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param currencyKey {bytes32}
   * @returns boolean
   **/


  this.rateIsFrozen =
  /*#__PURE__*/
  function () {
    var _ref28 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee28(currencyKey) {
      return regenerator_default.a.wrap(function _callee28$(_context28) {
        while (1) {
          switch (_context28.prev = _context28.next) {
            case 0:
              _context28.next = 2;
              return _this.contract.rateIsFrozen(currencyKey).call({
                _isConstant: true
              });

            case 2:
              return _context28.abrupt("return", _context28.sent);

            case 3:
            case "end":
              return _context28.stop();
          }
        }
      }, _callee28);
    }));

    return function (_x32) {
      return _ref28.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param currencyKey {bytes32}
   * @param entryPoint {BigNumber}
   * @param upperLimit {BigNumber}
   * @param lowerLimit {BigNumber}
   * @param freeze {boolean}
   * @param freezeAtUpperLimit {boolean}
   * @param txParams {TxParams}
  
   **/


  this.setInversePricing =
  /*#__PURE__*/
  function () {
    var _ref29 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee29(currencyKey, entryPoint, upperLimit, lowerLimit, freeze, freezeAtUpperLimit, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee29$(_context29) {
        while (1) {
          switch (_context29.prev = _context29.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context29.next = 4;
              return _this.contract.setInversePricing(currencyKey, entryPoint, upperLimit, lowerLimit, freeze, freezeAtUpperLimit).send(txParams);

            case 4:
              txHash = _context29.sent;
              return _context29.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context29.stop();
          }
        }
      }, _callee29);
    }));

    return function (_x33, _x34, _x35, _x36, _x37, _x38, _x39) {
      return _ref29.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param currencyKeys {bytes32[]}
   * @returns Object
   **/

  this.ratesAndStaleForCurrencies =
  /*#__PURE__*/
  function () {
    var _ref31 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee31(currencyKeys) {
      return regenerator_default.a.wrap(function _callee31$(_context31) {
        while (1) {
          switch (_context31.prev = _context31.next) {
            case 0:
              _context31.next = 2;
              return _this.contract.ratesAndStaleForCurrencies(currencyKeys).call({
                _isConstant: true
              });

            case 2:
              return _context31.abrupt("return", _context31.sent);

            case 3:
            case "end":
              return _context31.stop();
          }
        }
      }, _callee31);
    }));

    return function (_x40) {
      return _ref31.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x41) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param currencyKeys {bytes32[]}
   * @param newRates {uint256[]}
   * @param timeSent {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.updateRates =
  /*#__PURE__*/
  function () {
    var _ref33 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee33(currencyKeys, newRates, timeSent, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee33$(_context33) {
        while (1) {
          switch (_context33.prev = _context33.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context33.next = 4;
              return _this.contract.updateRates(currencyKeys, newRates, timeSent).send(txParams);

            case 4:
              txHash = _context33.sent;
              return _context33.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context33.stop();
          }
        }
      }, _callee33);
    }));

    return function (_x42, _x43, _x44, _x45) {
      return _ref33.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param currencyKeys {bytes32[]}
   * @returns uint256[]
   **/


  this.ratesForCurrencies =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(currencyKeys) {
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return _this.contract.ratesForCurrencies(currencyKeys).call({
                _isConstant: true
              });

            case 2:
              return _context34.abrupt("return", _context34.sent);

            case 3:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x46) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param currencyKey {bytes32}
   * @param txParams {TxParams}
  
   **/

  this.removeInversePricing =
  /*#__PURE__*/
  function () {
    var _ref36 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee36(currencyKey, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee36$(_context36) {
        while (1) {
          switch (_context36.prev = _context36.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ExchangeRates_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context36.next = 4;
              return _this.contract.removeInversePricing(currencyKey).send(txParams);

            case 4:
              txHash = _context36.sent;
              return _context36.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context36.stop();
          }
        }
      }, _callee36);
    }));

    return function (_x47, _x48) {
      return _ref36.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param code {bytes32}
   * @returns BigNumber
   **/


  this.lastRateUpdateTimes =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(code) {
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              _context37.next = 2;
              return _this.contract.lastRateUpdateTimes(code).call({
                _isConstant: true
              });

            case 2:
              return _context37.abrupt("return", _context37.sent);

            case 3:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x49) {
      return _ref37.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param code {bytes32}
   * @returns BigNumber
   **/


  this.rates =
  /*#__PURE__*/
  function () {
    var _ref38 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee38(code) {
      return regenerator_default.a.wrap(function _callee38$(_context38) {
        while (1) {
          switch (_context38.prev = _context38.next) {
            case 0:
              _context38.next = 2;
              return _this.contract.rates(code).call({
                _isConstant: true
              });

            case 2:
              return _context38.abrupt("return", _context38.sent);

            case 3:
            case "end":
              return _context38.stop();
          }
        }
      }, _callee38);
    }));

    return function (_x50) {
      return _ref38.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var contracts_shasta_ExchangeRates = (shasta_ExchangeRates_ExchangeRates);
// CONCATENATED MODULE: ./src/contracts/shasta/FeePool.js




function shasta_FeePool_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function shasta_FeePool_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { shasta_FeePool_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { shasta_FeePool_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function shasta_FeePool_FeePool(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxyFeePool'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(shasta_FeePool, address, tronWeb, this.signer);
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePeriodDuration {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setFeePeriodDuration =
  /*#__PURE__*/
  function () {
    var _ref = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee(_feePeriodDuration, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context.next = 4;
              return _this.contract.setFeePeriodDuration(_feePeriodDuration).send(txParams);

            case 4:
              txHash = _context.sent;
              return _context.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setFeePoolState =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(_feePoolState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.setFeePoolState(_feePoolState).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param _claimingAddress {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.getLastFeeWithdrawal =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_claimingAddress) {
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return _this.contract.getLastFeeWithdrawal(_claimingAddress).call({
                _isConstant: true
              });

            case 2:
              return _context3.abrupt("return", _context3.sent);

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @param period {BigNumber}
   * @returns BigNumber
   **/


  this.effectiveDebtRatioForPeriod =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(account, period) {
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return _this.contract.effectiveDebtRatioForPeriod(account, period).call({
                _isConstant: true
              });

            case 2:
              return _context4.abrupt("return", _context4.sent);

            case 3:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.exchangeFeeRate =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.exchangeFeeRate().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref6 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee6(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context6.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context6.sent;
              return _context6.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    return function (_x8, _x9) {
      return _ref6.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x10, _x11) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee8() {
    return regenerator_default.a.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context8.abrupt("return", _context8.sent);

          case 3:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _rewardsAuthority {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setRewardsAuthority =
  /*#__PURE__*/
  function () {
    var _ref9 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee9(_rewardsAuthority, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context9.next = 4;
              return _this.contract.setRewardsAuthority(_rewardsAuthority).send(txParams);

            case 4:
              txHash = _context9.sent;
              return _context9.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));

    return function (_x12, _x13) {
      return _ref9.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14, _x15) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.feePeriodDuration =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.feePeriodDuration().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param xdrAmount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.recordFeePaid =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(xdrAmount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context12.next = 4;
              return _this.contract.recordFeePaid(xdrAmount).send(txParams);

            case 4:
              txHash = _context12.sent;
              return _context12.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x16, _x17) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _percent {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.setTargetThreshold =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(_percent, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.setTargetThreshold(_percent).send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x18, _x19) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x20) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns uint256[2][3]
   **/


  this.feesByPeriod =
  /*#__PURE__*/
  function () {
    var _ref15 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee15(account) {
      return regenerator_default.a.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return _this.contract.feesByPeriod(account).call({
                _isConstant: true
              });

            case 2:
              return _context15.abrupt("return", _context15.sent);

            case 3:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    }));

    return function (_x21) {
      return _ref15.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.closeCurrentFeePeriod =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.closeCurrentFeePeriod().send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x22) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param index {BigNumber}
   * @returns Object
   **/


  this.recentFeePeriods =
  /*#__PURE__*/
  function () {
    var _ref17 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee17(index) {
      return regenerator_default.a.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return _this.contract.recentFeePeriods(index).call({
                _isConstant: true
              });

            case 2:
              return _context17.abrupt("return", _context17.sent);

            case 3:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17);
    }));

    return function (_x23) {
      return _ref17.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.approveClaimOnBehalf =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(account, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.approveClaimOnBehalf(account).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x24, _x25) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.feePoolEternalStorage =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee19() {
    return regenerator_default.a.wrap(function _callee19$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            _context19.next = 2;
            return _this.contract.feePoolEternalStorage().call({
              _isConstant: true
            });

          case 2:
            return _context19.abrupt("return", _context19.sent);

          case 3:
          case "end":
            return _context19.stop();
        }
      }
    }, _callee19);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _exchangeFeeRate {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setExchangeFeeRate =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(_exchangeFeeRate, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.setExchangeFeeRate(_exchangeFeeRate).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x26, _x27) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns boolean
   **/


  this.isFeesClaimable =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(account) {
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              _context22.next = 2;
              return _this.contract.isFeesClaimable(account).call({
                _isConstant: true
              });

            case 2:
              return _context22.abrupt("return", _context22.sent);

            case 3:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _delegates {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setDelegateApprovals =
  /*#__PURE__*/
  function () {
    var _ref23 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee23(_delegates, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context23.next = 4;
              return _this.contract.setDelegateApprovals(_delegates).send(txParams);

            case 4:
              txHash = _context23.sent;
              return _context23.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23);
    }));

    return function (_x29, _x30) {
      return _ref23.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.delegates =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee24() {
    return regenerator_default.a.wrap(function _callee24$(_context24) {
      while (1) {
        switch (_context24.prev = _context24.next) {
          case 0:
            _context24.next = 2;
            return _this.contract.delegates().call({
              _isConstant: true
            });

          case 2:
            return _context24.abrupt("return", _context24.sent);

          case 3:
          case "end":
            return _context24.stop();
        }
      }
    }, _callee24);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param claimingForAddress {String<TrxAddress>}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.claimOnBehalf =
  /*#__PURE__*/
  function () {
    var _ref25 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee25(claimingForAddress, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context25.next = 4;
              return _this.contract.claimOnBehalf(claimingForAddress).send(txParams);

            case 4:
              txHash = _context25.sent;
              return _context25.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25);
    }));

    return function (_x31, _x32) {
      return _ref25.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.removeClaimOnBehalf =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(account, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.removeClaimOnBehalf(account).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x33, _x34) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.totalRewardsAvailable =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee27() {
    return regenerator_default.a.wrap(function _callee27$(_context27) {
      while (1) {
        switch (_context27.prev = _context27.next) {
          case 0:
            _context27.next = 2;
            return _this.contract.totalRewardsAvailable().call({
              _isConstant: true
            });

          case 2:
            return _context27.abrupt("return", _context27.sent);

          case 3:
          case "end":
            return _context27.stop();
        }
      }
    }, _callee27);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.synthetix =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetix().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref29 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee29(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee29$(_context29) {
        while (1) {
          switch (_context29.prev = _context29.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context29.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context29.sent;
              return _context29.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context29.stop();
          }
        }
      }, _callee29);
    }));

    return function (_x35) {
      return _ref29.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param debtRatio {BigNumber}
   * @param debtEntryIndex {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.appendAccountIssuanceRecord =
  /*#__PURE__*/
  function () {
    var _ref30 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee30(account, debtRatio, debtEntryIndex, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee30$(_context30) {
        while (1) {
          switch (_context30.prev = _context30.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context30.next = 4;
              return _this.contract.appendAccountIssuanceRecord(account, debtRatio, debtEntryIndex).send(txParams);

            case 4:
              txHash = _context30.sent;
              return _context30.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context30.stop();
          }
        }
      }, _callee30);
    }));

    return function (_x36, _x37, _x38, _x39) {
      return _ref30.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee31() {
    return regenerator_default.a.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x40, _x41) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @param currencyKey {bytes32}
   * @returns Object
   **/


  this.feesAvailable =
  /*#__PURE__*/
  function () {
    var _ref33 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee33(account, currencyKey) {
      return regenerator_default.a.wrap(function _callee33$(_context33) {
        while (1) {
          switch (_context33.prev = _context33.next) {
            case 0:
              _context33.next = 2;
              return _this.contract.feesAvailable(account, currencyKey).call({
                _isConstant: true
              });

            case 2:
              return _context33.abrupt("return", _context33.sent);

            case 3:
            case "end":
              return _context33.stop();
          }
        }
      }, _callee33);
    }));

    return function (_x42, _x43) {
      return _ref33.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context34.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context34.sent;
              return _context34.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x44) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.rewardEscrow =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.rewardEscrow().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee37() {
    return regenerator_default.a.wrap(function _callee37$(_context37) {
      while (1) {
        switch (_context37.prev = _context37.next) {
          case 0:
            _context37.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context37.abrupt("return", _context37.sent);

          case 3:
          case "end":
            return _context37.stop();
        }
      }
    }, _callee37);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.getPenaltyThresholdRatio =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee38() {
    return regenerator_default.a.wrap(function _callee38$(_context38) {
      while (1) {
        switch (_context38.prev = _context38.next) {
          case 0:
            _context38.next = 2;
            return _this.contract.getPenaltyThresholdRatio().call({
              _isConstant: true
            });

          case 2:
            return _context38.abrupt("return", _context38.sent);

          case 3:
          case "end":
            return _context38.stop();
        }
      }
    }, _callee38);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param feePeriodIndex {BigNumber}
   * @param feePeriodId {BigNumber}
   * @param startingDebtIndex {BigNumber}
   * @param startTime {BigNumber}
   * @param feesToDistribute {BigNumber}
   * @param feesClaimed {BigNumber}
   * @param rewardsToDistribute {BigNumber}
   * @param rewardsClaimed {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.importFeePeriod =
  /*#__PURE__*/
  function () {
    var _ref39 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee39(feePeriodIndex, feePeriodId, startingDebtIndex, startTime, feesToDistribute, feesClaimed, rewardsToDistribute, rewardsClaimed, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee39$(_context39) {
        while (1) {
          switch (_context39.prev = _context39.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context39.next = 4;
              return _this.contract.importFeePeriod(feePeriodIndex, feePeriodId, startingDebtIndex, startTime, feesToDistribute, feesClaimed, rewardsToDistribute, rewardsClaimed).send(txParams);

            case 4:
              txHash = _context39.sent;
              return _context39.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context39.stop();
          }
        }
      }, _callee39);
    }));

    return function (_x45, _x46, _x47, _x48, _x49, _x50, _x51, _x52, _x53) {
      return _ref39.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param quantity {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.appendVestingEntry =
  /*#__PURE__*/
  function () {
    var _ref40 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee40(account, quantity, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee40$(_context40) {
        while (1) {
          switch (_context40.prev = _context40.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context40.next = 4;
              return _this.contract.appendVestingEntry(account, quantity).send(txParams);

            case 4:
              txHash = _context40.sent;
              return _context40.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context40.stop();
          }
        }
      }, _callee40);
    }));

    return function (_x54, _x55, _x56) {
      return _ref40.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param value {BigNumber}
   * @returns BigNumber
   **/


  this.amountReceivedFromTransfer =
  /*#__PURE__*/
  function () {
    var _ref41 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee41(value) {
      return regenerator_default.a.wrap(function _callee41$(_context41) {
        while (1) {
          switch (_context41.prev = _context41.next) {
            case 0:
              _context41.next = 2;
              return _this.contract.amountReceivedFromTransfer(value).call({
                _isConstant: true
              });

            case 2:
              return _context41.abrupt("return", _context41.sent);

            case 3:
            case "end":
              return _context41.stop();
          }
        }
      }, _callee41);
    }));

    return function (_x57) {
      return _ref41.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee42() {
    return regenerator_default.a.wrap(function _callee42$(_context42) {
      while (1) {
        switch (_context42.prev = _context42.next) {
          case 0:
            _context42.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context42.abrupt("return", _context42.sent);

          case 3:
          case "end":
            return _context42.stop();
        }
      }
    }, _callee42);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref43 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee43(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee43$(_context43) {
        while (1) {
          switch (_context43.prev = _context43.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context43.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context43.sent;
              return _context43.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context43.stop();
          }
        }
      }, _callee43);
    }));

    return function (_x58, _x59) {
      return _ref43.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref44 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee44(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee44$(_context44) {
        while (1) {
          switch (_context44.prev = _context44.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context44.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context44.sent;
              return _context44.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context44.stop();
          }
        }
      }, _callee44);
    }));

    return function (_x60) {
      return _ref44.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee45() {
    return regenerator_default.a.wrap(function _callee45$(_context45) {
      while (1) {
        switch (_context45.prev = _context45.next) {
          case 0:
            _context45.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context45.abrupt("return", _context45.sent);

          case 3:
          case "end":
            return _context45.stop();
        }
      }
    }, _callee45);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param value {BigNumber}
   * @returns BigNumber
   **/

  this.exchangeFeeIncurred =
  /*#__PURE__*/
  function () {
    var _ref46 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee46(value) {
      return regenerator_default.a.wrap(function _callee46$(_context46) {
        while (1) {
          switch (_context46.prev = _context46.next) {
            case 0:
              _context46.next = 2;
              return _this.contract.exchangeFeeIncurred(value).call({
                _isConstant: true
              });

            case 2:
              return _context46.abrupt("return", _context46.sent);

            case 3:
            case "end":
              return _context46.stop();
          }
        }
      }, _callee46);
    }));

    return function (_x61) {
      return _ref46.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.FEE_PERIOD_LENGTH =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee47() {
    return regenerator_default.a.wrap(function _callee47$(_context47) {
      while (1) {
        switch (_context47.prev = _context47.next) {
          case 0:
            _context47.next = 2;
            return _this.contract.FEE_PERIOD_LENGTH().call({
              _isConstant: true
            });

          case 2:
            return _context47.abrupt("return", _context47.sent);

          case 3:
          case "end":
            return _context47.stop();
        }
      }
    }, _callee47);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.rewardsAuthority =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee48() {
    return regenerator_default.a.wrap(function _callee48$(_context48) {
      while (1) {
        switch (_context48.prev = _context48.next) {
          case 0:
            _context48.next = 2;
            return _this.contract.rewardsAuthority().call({
              _isConstant: true
            });

          case 2:
            return _context48.abrupt("return", _context48.sent);

          case 3:
          case "end":
            return _context48.stop();
        }
      }
    }, _callee48);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.claimFees =
  /*#__PURE__*/
  function () {
    var _ref49 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee49(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee49$(_context49) {
        while (1) {
          switch (_context49.prev = _context49.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context49.next = 4;
              return _this.contract.claimFees().send(txParams);

            case 4:
              txHash = _context49.sent;
              return _context49.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context49.stop();
          }
        }
      }, _callee49);
    }));

    return function (_x62) {
      return _ref49.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.MIN_FEE_PERIOD_DURATION =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee50() {
    return regenerator_default.a.wrap(function _callee50$(_context50) {
      while (1) {
        switch (_context50.prev = _context50.next) {
          case 0:
            _context50.next = 2;
            return _this.contract.MIN_FEE_PERIOD_DURATION().call({
              _isConstant: true
            });

          case 2:
            return _context50.abrupt("return", _context50.sent);

          case 3:
          case "end":
            return _context50.stop();
        }
      }
    }, _callee50);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee51() {
    return regenerator_default.a.wrap(function _callee51$(_context51) {
      while (1) {
        switch (_context51.prev = _context51.next) {
          case 0:
            _context51.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context51.abrupt("return", _context51.sent);

          case 3:
          case "end":
            return _context51.stop();
        }
      }
    }, _callee51);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.synthetixState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee52() {
    return regenerator_default.a.wrap(function _callee52$(_context52) {
      while (1) {
        switch (_context52.prev = _context52.next) {
          case 0:
            _context52.next = 2;
            return _this.contract.synthetixState().call({
              _isConstant: true
            });

          case 2:
            return _context52.abrupt("return", _context52.sent);

          case 3:
          case "end":
            return _context52.stop();
        }
      }
    }, _callee52);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param value {BigNumber}
   * @returns BigNumber
   **/

  this.amountReceivedFromExchange =
  /*#__PURE__*/
  function () {
    var _ref53 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee53(value) {
      return regenerator_default.a.wrap(function _callee53$(_context53) {
        while (1) {
          switch (_context53.prev = _context53.next) {
            case 0:
              _context53.next = 2;
              return _this.contract.amountReceivedFromExchange(value).call({
                _isConstant: true
              });

            case 2:
              return _context53.abrupt("return", _context53.sent);

            case 3:
            case "end":
              return _context53.stop();
          }
        }
      }, _callee53);
    }));

    return function (_x63) {
      return _ref53.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.targetThreshold =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee54() {
    return regenerator_default.a.wrap(function _callee54$(_context54) {
      while (1) {
        switch (_context54.prev = _context54.next) {
          case 0:
            _context54.next = 2;
            return _this.contract.targetThreshold().call({
              _isConstant: true
            });

          case 2:
            return _context54.abrupt("return", _context54.sent);

          case 3:
          case "end":
            return _context54.stop();
        }
      }
    }, _callee54);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee55() {
    return regenerator_default.a.wrap(function _callee55$(_context55) {
      while (1) {
        switch (_context55.prev = _context55.next) {
          case 0:
            _context55.next = 2;
            return _this.contract.feePoolState().call({
              _isConstant: true
            });

          case 2:
            return _context55.abrupt("return", _context55.sent);

          case 3:
          case "end":
            return _context55.stop();
        }
      }
    }, _callee55);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param currencyKey {bytes32}
   * @returns BigNumber
   **/

  this.totalFeesAvailable =
  /*#__PURE__*/
  function () {
    var _ref56 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee56(currencyKey) {
      return regenerator_default.a.wrap(function _callee56$(_context56) {
        while (1) {
          switch (_context56.prev = _context56.next) {
            case 0:
              _context56.next = 2;
              return _this.contract.totalFeesAvailable(currencyKey).call({
                _isConstant: true
              });

            case 2:
              return _context56.abrupt("return", _context56.sent);

            case 3:
            case "end":
              return _context56.stop();
          }
        }
      }, _callee56);
    }));

    return function (_x64) {
      return _ref56.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.FEE_ADDRESS =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee57() {
    return regenerator_default.a.wrap(function _callee57$(_context57) {
      while (1) {
        switch (_context57.prev = _context57.next) {
          case 0:
            _context57.next = 2;
            return _this.contract.FEE_ADDRESS().call({
              _isConstant: true
            });

          case 2:
            return _context57.abrupt("return", _context57.sent);

          case 3:
          case "end":
            return _context57.stop();
        }
      }
    }, _callee57);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee58() {
    return regenerator_default.a.wrap(function _callee58$(_context58) {
      while (1) {
        switch (_context58.prev = _context58.next) {
          case 0:
            _context58.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context58.abrupt("return", _context58.sent);

          case 3:
          case "end":
            return _context58.stop();
        }
      }
    }, _callee58);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.MAX_FEE_PERIOD_DURATION =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee59() {
    return regenerator_default.a.wrap(function _callee59$(_context59) {
      while (1) {
        switch (_context59.prev = _context59.next) {
          case 0:
            _context59.next = 2;
            return _this.contract.MAX_FEE_PERIOD_DURATION().call({
              _isConstant: true
            });

          case 2:
            return _context59.abrupt("return", _context59.sent);

          case 3:
          case "end":
            return _context59.stop();
        }
      }
    }, _callee59);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.MAX_EXCHANGE_FEE_RATE =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee60() {
    return regenerator_default.a.wrap(function _callee60$(_context60) {
      while (1) {
        switch (_context60.prev = _context60.next) {
          case 0:
            _context60.next = 2;
            return _this.contract.MAX_EXCHANGE_FEE_RATE().call({
              _isConstant: true
            });

          case 2:
            return _context60.abrupt("return", _context60.sent);

          case 3:
          case "end":
            return _context60.stop();
        }
      }
    }, _callee60);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setRewardsToDistribute =
  /*#__PURE__*/
  function () {
    var _ref61 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee61(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee61$(_context61) {
        while (1) {
          switch (_context61.prev = _context61.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context61.next = 4;
              return _this.contract.setRewardsToDistribute(amount).send(txParams);

            case 4:
              txHash = _context61.sent;
              return _context61.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context61.stop();
          }
        }
      }, _callee61);
    }));

    return function (_x65, _x66) {
      return _ref61.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetix {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setSynthetix =
  /*#__PURE__*/
  function () {
    var _ref62 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee62(_synthetix, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee62$(_context62) {
        while (1) {
          switch (_context62.prev = _context62.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_FeePool_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context62.next = 4;
              return _this.contract.setSynthetix(_synthetix).send(txParams);

            case 4:
              txHash = _context62.sent;
              return _context62.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context62.stop();
          }
        }
      }, _callee62);
    }));

    return function (_x67, _x68) {
      return _ref62.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var contracts_shasta_FeePool = (shasta_FeePool_FeePool);
// CONCATENATED MODULE: ./src/contracts/shasta/ProxyERC20.js




function shasta_ProxyERC20_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function shasta_ProxyERC20_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { shasta_ProxyERC20_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { shasta_ProxyERC20_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function shasta_ProxyERC20_ProxyERC20(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxyERC20'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(shasta_ProxyERC20, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ProxyERC20_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ProxyERC20_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee4() {
    return regenerator_default.a.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context4.abrupt("return", _context4.sent);

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref5 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee5(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ProxyERC20_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context5.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context5.sent;
              return _context5.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    return function (_x6, _x7, _x8, _x9) {
      return _ref5.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee7() {
    return regenerator_default.a.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context7.abrupt("return", _context7.sent);

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(account) {
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context8.abrupt("return", _context8.sent);

            case 3:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _target {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTarget =
  /*#__PURE__*/
  function () {
    var _ref9 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee9(_target, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ProxyERC20_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context9.next = 4;
              return _this.contract.setTarget(_target).send(txParams);

            case 4:
              txHash = _context9.sent;
              return _context9.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));

    return function (_x11, _x12) {
      return _ref9.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ProxyERC20_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x13) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param callData {bytes}
   * @param numTopics {BigNumber}
   * @param topic1 {bytes32}
   * @param topic2 {bytes32}
   * @param topic3 {bytes32}
   * @param topic4 {bytes32}
   * @param txParams {TxParams}
  
   **/

  this._emit =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(callData, numTopics, topic1, topic2, topic3, topic4, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ProxyERC20_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context12.next = 4;
              return _this.contract._emit(callData, numTopics, topic1, topic2, topic3, topic4).send(txParams);

            case 4:
              txHash = _context12.sent;
              return _context12.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x14, _x15, _x16, _x17, _x18, _x19, _x20) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.useDELEGATECALL =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee13() {
    return regenerator_default.a.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            _context13.next = 2;
            return _this.contract.useDELEGATECALL().call({
              _isConstant: true
            });

          case 2:
            return _context13.abrupt("return", _context13.sent);

          case 3:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee14() {
    return regenerator_default.a.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            _context14.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context14.abrupt("return", _context14.sent);

          case 3:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref15 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee15(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ProxyERC20_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context15.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context15.sent;
              return _context15.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    }));

    return function (_x21, _x22, _x23) {
      return _ref15.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param value {boolean}
   * @param txParams {TxParams}
  
   **/


  this.setUseDELEGATECALL =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ProxyERC20_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setUseDELEGATECALL(value).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x24, _x25) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.target =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.target().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(owner, spender) {
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context18.abrupt("return", _context18.sent);

            case 3:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x26, _x27) {
      return _ref18.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var contracts_shasta_ProxyERC20 = (shasta_ProxyERC20_ProxyERC20);
// CONCATENATED MODULE: ./src/contracts/shasta/Synth.js




function shasta_Synth_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function shasta_Synth_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { shasta_Synth_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { shasta_Synth_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function shasta_Synth_Synth(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxysUSD'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(shasta_Synth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Override ERC20 transferFrom function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.issue =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17, _x18, _x19) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x20, _x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x22, _x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x24) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x25, _x26, _x27) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28, _x29) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Override ERC20 transfer function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x30, _x31, _x32) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x33, _x34) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x35) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee31() {
    return regenerator_default.a.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x36, _x37) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(owner, spender) {
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context34.abrupt("return", _context34.sent);

            case 3:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x38, _x39) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synth_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context37.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context37.sent;
              return _context37.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x40, _x41) {
      return _ref37.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var contracts_shasta_Synth = (shasta_Synth_Synth);
// CONCATENATED MODULE: ./src/contracts/shasta/Synthetix.js




function shasta_Synthetix_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function shasta_Synthetix_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { shasta_Synthetix_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { shasta_Synthetix_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function shasta_Synthetix_Synthetix(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxySynthetix'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(shasta_Synthetix, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _gasPriceLimit {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setGasPriceLimit =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(_gasPriceLimit, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.setGasPriceLimit(_gasPriceLimit).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.approve =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x3, _x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Only the contract owner may call this., Remove an associated Synth contract from the Synthetix system.<br>
   * Transaction (consumes gas, requires signer)
   * @param currencyKey {bytes32}
   * @param txParams {TxParams}
  
   **/


  this.removeSynth =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(currencyKey, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.removeSynth(currencyKey).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.mint =
  /*#__PURE__*/
  function () {
    var _ref5 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee5(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context5.next = 4;
              return _this.contract.mint().send(txParams);

            case 4:
              txHash = _context5.sent;
              return _context5.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    return function (_x8) {
      return _ref5.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref6 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee6(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context6.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context6.sent;
              return _context6.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    return function (_x9, _x10) {
      return _ref6.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x11, _x12) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {String<TrxAddress>}
   * @returns bytes32
   **/


  this.synthsByAddress =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(address_1) {
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return _this.contract.synthsByAddress(address_1).call({
                _isConstant: true
              });

            case 2:
              return _context8.abrupt("return", _context8.sent);

            case 3:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee10() {
    return regenerator_default.a.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context10.abrupt("return", _context10.sent);

          case 3:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePool {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePool =
  /*#__PURE__*/
  function () {
    var _ref11 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee11(_feePool, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context11.next = 4;
              return _this.contract.setFeePool(_feePool).send(txParams);

            case 4:
              txHash = _context11.sent;
              return _context11.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11);
    }));

    return function (_x14, _x15) {
      return _ref11.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param sourceCurrencyKey {bytes32}
   * @param destinationCurrencyKey {bytes32}
   * @returns BigNumber
   **/


  this.feeRateForExchange =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(sourceCurrencyKey, destinationCurrencyKey) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.feeRateForExchange(sourceCurrencyKey, destinationCurrencyKey).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x16, _x17) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _gasLimitOracle {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setGasLimitOracle =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(_gasLimitOracle, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.setGasLimitOracle(_gasLimitOracle).send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x18, _x19) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x20, _x21) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * ERC20 transferFrom function.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref15 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee15(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context15.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context15.sent;
              return _context15.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    }));

    return function (_x22, _x23, _x24, _x25) {
      return _ref15.apply(this, arguments);
    };
  }();
  /**
   * Burn synths to clear issued synths/free SNX.<br>
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.burnSynths =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.burnSynths(amount).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x26, _x27) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {bytes32}
   * @returns String<TrxAddress>
   **/

  this.synths =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(bytes32_1) {
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return _this.contract.synths(bytes32_1).call({
                _isConstant: true
              });

            case 2:
              return _context18.abrupt("return", _context18.sent);

            case 3:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x28) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x29) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.rewardsDistribution =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.rewardsDistribution().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.exchangeRates =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee21() {
    return regenerator_default.a.wrap(function _callee21$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            _context21.next = 2;
            return _this.contract.exchangeRates().call({
              _isConstant: true
            });

          case 2:
            return _context21.abrupt("return", _context21.sent);

          case 3:
          case "end":
            return _context21.stop();
        }
      }
    }, _callee21);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee22() {
    return regenerator_default.a.wrap(function _callee22$(_context22) {
      while (1) {
        switch (_context22.prev = _context22.next) {
          case 0:
            _context22.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context22.abrupt("return", _context22.sent);

          case 3:
          case "end":
            return _context22.stop();
        }
      }
    }, _callee22);
  }));
  /**
   * Only callable by the contract owner., Set the ExchangeRates contract address where rates are held.<br>
   * Transaction (consumes gas, requires signer)
   * @param _exchangeRates {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setExchangeRates =
  /*#__PURE__*/
  function () {
    var _ref23 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee23(_exchangeRates, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context23.next = 4;
              return _this.contract.setExchangeRates(_exchangeRates).send(txParams);

            case 4:
              txHash = _context23.sent;
              return _context23.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23);
    }));

    return function (_x30, _x31) {
      return _ref23.apply(this, arguments);
    };
  }();
  /**
   * A function that lets you easily convert an amount in a source currency to an amount in the destination currency.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param sourceCurrencyKey {bytes32}
   * @param sourceAmount {BigNumber}
   * @param destinationCurrencyKey {bytes32}
   * @returns BigNumber
   **/


  this.effectiveValue =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(sourceCurrencyKey, sourceAmount, destinationCurrencyKey) {
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              _context24.next = 2;
              return _this.contract.effectiveValue(sourceCurrencyKey, sourceAmount, destinationCurrencyKey).call({
                _isConstant: true
              });

            case 2:
              return _context24.abrupt("return", _context24.sent);

            case 3:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x32, _x33, _x34) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * When issuing, escrowed SNX are locked first, then non-escrowed SNX are locked last, but escrowed SNX are not transferable, so they are not included in this calculation., The number of SNX that are free to be transferred by an account.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.transferableSynthetix =
  /*#__PURE__*/
  function () {
    var _ref25 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee25(account) {
      return regenerator_default.a.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              _context25.next = 2;
              return _this.contract.transferableSynthetix(account).call({
                _isConstant: true
              });

            case 2:
              return _context25.abrupt("return", _context25.sent);

            case 3:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25);
    }));

    return function (_x35) {
      return _ref25.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param _givenGasPrice {BigNumber}
  
   **/


  this.validateGasPrice =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(_givenGasPrice) {
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              _context26.next = 2;
              return _this.contract.validateGasPrice(_givenGasPrice).call({
                _isConstant: true
              });

            case 2:
              return _context26.abrupt("return", _context26.sent);

            case 3:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x36) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(account) {
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              _context27.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context27.abrupt("return", _context27.sent);

            case 3:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x37) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32[]
   **/


  this.availableCurrencyKeys =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.availableCurrencyKeys().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref29 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee29(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee29$(_context29) {
        while (1) {
          switch (_context29.prev = _context29.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context29.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context29.sent;
              return _context29.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context29.stop();
          }
        }
      }, _callee29);
    }));

    return function (_x38) {
      return _ref29.apply(this, arguments);
    };
  }();
  /**
   * The remaining synths an issuer can issue against their total synthetix balance.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param issuer {String<TrxAddress>}
   * @param currencyKey {bytes32}
   * @returns BigNumber
   **/


  this.remainingIssuableSynths =
  /*#__PURE__*/
  function () {
    var _ref30 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee30(issuer, currencyKey) {
      return regenerator_default.a.wrap(function _callee30$(_context30) {
        while (1) {
          switch (_context30.prev = _context30.next) {
            case 0:
              _context30.next = 2;
              return _this.contract.remainingIssuableSynths(issuer, currencyKey).call({
                _isConstant: true
              });

            case 2:
              return _context30.abrupt("return", _context30.sent);

            case 3:
            case "end":
              return _context30.stop();
          }
        }
      }, _callee30);
    }));

    return function (_x39, _x40) {
      return _ref30.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {BigNumber}
   * @returns String<TrxAddress>
   **/


  this.availableSynths =
  /*#__PURE__*/
  function () {
    var _ref31 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee31(uint256_1) {
      return regenerator_default.a.wrap(function _callee31$(_context31) {
        while (1) {
          switch (_context31.prev = _context31.next) {
            case 0:
              _context31.next = 2;
              return _this.contract.availableSynths(uint256_1).call({
                _isConstant: true
              });

            case 2:
              return _context31.abrupt("return", _context31.sent);

            case 3:
            case "end":
              return _context31.stop();
          }
        }
      }, _callee31);
    }));

    return function (_x41) {
      return _ref31.apply(this, arguments);
    };
  }();
  /**
   * Total amount of synths issued by the system, priced in currencyKey.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param currencyKey {bytes32}
   * @returns BigNumber
   **/


  this.totalIssuedSynths =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(currencyKey) {
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              _context32.next = 2;
              return _this.contract.totalIssuedSynths(currencyKey).call({
                _isConstant: true
              });

            case 2:
              return _context32.abrupt("return", _context32.sent);

            case 3:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x42) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Only the contract owner may call this., Add an associated Synth contract to the Synthetix system.<br>
   * Transaction (consumes gas, requires signer)
   * @param synth {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.addSynth =
  /*#__PURE__*/
  function () {
    var _ref33 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee33(synth, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee33$(_context33) {
        while (1) {
          switch (_context33.prev = _context33.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context33.next = 4;
              return _this.contract.addSynth(synth).send(txParams);

            case 4:
              txHash = _context33.sent;
              return _context33.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context33.stop();
          }
        }
      }, _callee33);
    }));

    return function (_x43, _x44) {
      return _ref33.apply(this, arguments);
    };
  }();
  /**
   * Issuance is only allowed if the synthetix price isn't stale. Amount should be larger than 0., Issue synths against the sender's SNX.<br>
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.issueSynths =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context34.next = 4;
              return _this.contract.issueSynths(amount).send(txParams);

            case 4:
              txHash = _context34.sent;
              return _context34.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x45, _x46) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _exchangeEnabled {boolean}
   * @param txParams {TxParams}
  
   **/

  this.setExchangeEnabled =
  /*#__PURE__*/
  function () {
    var _ref36 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee36(_exchangeEnabled, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee36$(_context36) {
        while (1) {
          switch (_context36.prev = _context36.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context36.next = 4;
              return _this.contract.setExchangeEnabled(_exchangeEnabled).send(txParams);

            case 4:
              txHash = _context36.sent;
              return _context36.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context36.stop();
          }
        }
      }, _callee36);
    }));

    return function (_x47, _x48) {
      return _ref36.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee37() {
    return regenerator_default.a.wrap(function _callee37$(_context37) {
      while (1) {
        switch (_context37.prev = _context37.next) {
          case 0:
            _context37.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context37.abrupt("return", _context37.sent);

          case 3:
          case "end":
            return _context37.stop();
        }
      }
    }, _callee37);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.gasPriceLimit =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee38() {
    return regenerator_default.a.wrap(function _callee38$(_context38) {
      while (1) {
        switch (_context38.prev = _context38.next) {
          case 0:
            _context38.next = 2;
            return _this.contract.gasPriceLimit().call({
              _isConstant: true
            });

          case 2:
            return _context38.abrupt("return", _context38.sent);

          case 3:
          case "end":
            return _context38.stop();
        }
      }
    }, _callee38);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref39 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee39(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee39$(_context39) {
        while (1) {
          switch (_context39.prev = _context39.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context39.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context39.sent;
              return _context39.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context39.stop();
          }
        }
      }, _callee39);
    }));

    return function (_x49, _x50) {
      return _ref39.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref40 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee40(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee40$(_context40) {
        while (1) {
          switch (_context40.prev = _context40.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context40.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context40.sent;
              return _context40.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context40.stop();
          }
        }
      }, _callee40);
    }));

    return function (_x51) {
      return _ref40.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee41() {
    return regenerator_default.a.wrap(function _callee41$(_context41) {
      while (1) {
        switch (_context41.prev = _context41.next) {
          case 0:
            _context41.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context41.abrupt("return", _context41.sent);

          case 3:
          case "end":
            return _context41.stop();
        }
      }
    }, _callee41);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref42 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee42(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee42$(_context42) {
        while (1) {
          switch (_context42.prev = _context42.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context42.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context42.sent;
              return _context42.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context42.stop();
          }
        }
      }, _callee42);
    }));

    return function (_x52, _x53) {
      return _ref42.apply(this, arguments);
    };
  }();
  /**
   * The current collateralisation ratio for a user. Collateralisation ratio varies over time as the value of the underlying Synthetix asset changes, e.g. if a user issues their maximum available synths when they hold $10 worth of Synthetix, they will have issued $2 worth of synths. If the value of Synthetix changes, the ratio returned by this function will adjust accordlingly. Users are incentivised to maintain a collateralisation ratio as close to the issuance ratio as possible by altering the amount of fees they're able to claim from the system.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param issuer {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.collateralisationRatio =
  /*#__PURE__*/
  function () {
    var _ref43 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee43(issuer) {
      return regenerator_default.a.wrap(function _callee43$(_context43) {
        while (1) {
          switch (_context43.prev = _context43.next) {
            case 0:
              _context43.next = 2;
              return _this.contract.collateralisationRatio(issuer).call({
                _isConstant: true
              });

            case 2:
              return _context43.abrupt("return", _context43.sent);

            case 3:
            case "end":
              return _context43.stop();
          }
        }
      }, _callee43);
    }));

    return function (_x54) {
      return _ref43.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.rewardEscrow =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee44() {
    return regenerator_default.a.wrap(function _callee44$(_context44) {
      while (1) {
        switch (_context44.prev = _context44.next) {
          case 0:
            _context44.next = 2;
            return _this.contract.rewardEscrow().call({
              _isConstant: true
            });

          case 2:
            return _context44.abrupt("return", _context44.sent);

          case 3:
          case "end":
            return _context44.stop();
        }
      }
    }, _callee44);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee45() {
    return regenerator_default.a.wrap(function _callee45$(_context45) {
      while (1) {
        switch (_context45.prev = _context45.next) {
          case 0:
            _context45.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context45.abrupt("return", _context45.sent);

          case 3:
          case "end":
            return _context45.stop();
        }
      }
    }, _callee45);
  }));
  /**
   * The total SNX owned by this account, both escrowed and unescrowed, against which synths can be issued. This includes those already being used as collateral (locked), and those available for further issuance (unlocked).<br>
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.collateral =
  /*#__PURE__*/
  function () {
    var _ref46 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee46(account) {
      return regenerator_default.a.wrap(function _callee46$(_context46) {
        while (1) {
          switch (_context46.prev = _context46.next) {
            case 0:
              _context46.next = 2;
              return _this.contract.collateral(account).call({
                _isConstant: true
              });

            case 2:
              return _context46.abrupt("return", _context46.sent);

            case 3:
            case "end":
              return _context46.stop();
          }
        }
      }, _callee46);
    }));

    return function (_x55) {
      return _ref46.apply(this, arguments);
    };
  }();
  /**
   * The maximum synths an issuer can issue against their total synthetix quantity, priced in XDRs. This ignores any already issued synths, and is purely giving you the maximimum amount the user can issue.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param issuer {String<TrxAddress>}
   * @param currencyKey {bytes32}
   * @returns BigNumber
   **/


  this.maxIssuableSynths =
  /*#__PURE__*/
  function () {
    var _ref47 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee47(issuer, currencyKey) {
      return regenerator_default.a.wrap(function _callee47$(_context47) {
        while (1) {
          switch (_context47.prev = _context47.next) {
            case 0:
              _context47.next = 2;
              return _this.contract.maxIssuableSynths(issuer, currencyKey).call({
                _isConstant: true
              });

            case 2:
              return _context47.abrupt("return", _context47.sent);

            case 3:
            case "end":
              return _context47.stop();
          }
        }
      }, _callee47);
    }));

    return function (_x56, _x57) {
      return _ref47.apply(this, arguments);
    };
  }();
  /**
   * ERC20 transfer function.<br>
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref48 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee48(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee48$(_context48) {
        while (1) {
          switch (_context48.prev = _context48.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context48.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context48.sent;
              return _context48.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context48.stop();
          }
        }
      }, _callee48);
    }));

    return function (_x58, _x59, _x60) {
      return _ref48.apply(this, arguments);
    };
  }();
  /**
   * Only the synth contract can call this function, Function that allows synth contract to delegate exchanging of a synth that is not the same sourceCurrency.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param sourceCurrencyKey {bytes32}
   * @param sourceAmount {BigNumber}
   * @param destinationCurrencyKey {bytes32}
   * @param destinationAddress {String<TrxAddress>}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.synthInitiatedExchange =
  /*#__PURE__*/
  function () {
    var _ref49 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee49(from, sourceCurrencyKey, sourceAmount, destinationCurrencyKey, destinationAddress, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee49$(_context49) {
        while (1) {
          switch (_context49.prev = _context49.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context49.next = 4;
              return _this.contract.synthInitiatedExchange(from, sourceCurrencyKey, sourceAmount, destinationCurrencyKey, destinationAddress).send(txParams);

            case 4:
              txHash = _context49.sent;
              return _context49.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context49.stop();
          }
        }
      }, _callee49);
    }));

    return function (_x61, _x62, _x63, _x64, _x65, _x66) {
      return _ref49.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.feePool =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee50() {
    return regenerator_default.a.wrap(function _callee50$(_context50) {
      while (1) {
        switch (_context50.prev = _context50.next) {
          case 0:
            _context50.next = 2;
            return _this.contract.feePool().call({
              _isConstant: true
            });

          case 2:
            return _context50.abrupt("return", _context50.sent);

          case 3:
          case "end":
            return _context50.stop();
        }
      }
    }, _callee50);
  }));
  /**
   * Issuance is only allowed if the synthetix price isn't stale., Issue the maximum amount of Synths possible against the sender's SNX.<br>
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.issueMaxSynths =
  /*#__PURE__*/
  function () {
    var _ref51 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee51(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee51$(_context51) {
        while (1) {
          switch (_context51.prev = _context51.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context51.next = 4;
              return _this.contract.issueMaxSynths().send(txParams);

            case 4:
              txHash = _context51.sent;
              return _context51.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context51.stop();
          }
        }
      }, _callee51);
    }));

    return function (_x67) {
      return _ref51.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee52() {
    return regenerator_default.a.wrap(function _callee52$(_context52) {
      while (1) {
        switch (_context52.prev = _context52.next) {
          case 0:
            _context52.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context52.abrupt("return", _context52.sent);

          case 3:
          case "end":
            return _context52.stop();
        }
      }
    }, _callee52);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref53 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee53(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee53$(_context53) {
        while (1) {
          switch (_context53.prev = _context53.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context53.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context53.sent;
              return _context53.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context53.stop();
          }
        }
      }, _callee53);
    }));

    return function (_x68, _x69) {
      return _ref53.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref54 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee54(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee54$(_context54) {
        while (1) {
          switch (_context54.prev = _context54.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context54.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context54.sent;
              return _context54.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context54.stop();
          }
        }
      }, _callee54);
    }));

    return function (_x70) {
      return _ref54.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.supplySchedule =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee55() {
    return regenerator_default.a.wrap(function _callee55$(_context55) {
      while (1) {
        switch (_context55.prev = _context55.next) {
          case 0:
            _context55.next = 2;
            return _this.contract.supplySchedule().call({
              _isConstant: true
            });

          case 2:
            return _context55.abrupt("return", _context55.sent);

          case 3:
          case "end":
            return _context55.stop();
        }
      }
    }, _callee55);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee56() {
    return regenerator_default.a.wrap(function _callee56$(_context56) {
      while (1) {
        switch (_context56.prev = _context56.next) {
          case 0:
            _context56.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context56.abrupt("return", _context56.sent);

          case 3:
          case "end":
            return _context56.stop();
        }
      }
    }, _callee56);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _protectionCircuitIsActivated {boolean}
   * @param txParams {TxParams}
  
   **/

  this.setProtectionCircuit =
  /*#__PURE__*/
  function () {
    var _ref57 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee57(_protectionCircuitIsActivated, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee57$(_context57) {
        while (1) {
          switch (_context57.prev = _context57.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context57.next = 4;
              return _this.contract.setProtectionCircuit(_protectionCircuitIsActivated).send(txParams);

            case 4:
              txHash = _context57.sent;
              return _context57.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context57.stop();
          }
        }
      }, _callee57);
    }));

    return function (_x71, _x72) {
      return _ref57.apply(this, arguments);
    };
  }();
  /**
   * If a user issues synths backed by SNX in their wallet, the SNX become locked. This function will tell you how many synths a user has to give back to the system in order to unlock their original debt position. This is priced in whichever synth is passed in as a currency key, e.g. you can price the debt in sUSD, XDR, or any other synth you wish.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param issuer {String<TrxAddress>}
   * @param currencyKey {bytes32}
   * @returns BigNumber
   **/


  this.debtBalanceOf =
  /*#__PURE__*/
  function () {
    var _ref58 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee58(issuer, currencyKey) {
      return regenerator_default.a.wrap(function _callee58$(_context58) {
        while (1) {
          switch (_context58.prev = _context58.next) {
            case 0:
              _context58.next = 2;
              return _this.contract.debtBalanceOf(issuer, currencyKey).call({
                _isConstant: true
              });

            case 2:
              return _context58.abrupt("return", _context58.sent);

            case 3:
            case "end":
              return _context58.stop();
          }
        }
      }, _callee58);
    }));

    return function (_x73, _x74) {
      return _ref58.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee59() {
    return regenerator_default.a.wrap(function _callee59$(_context59) {
      while (1) {
        switch (_context59.prev = _context59.next) {
          case 0:
            _context59.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context59.abrupt("return", _context59.sent);

          case 3:
          case "end":
            return _context59.stop();
        }
      }
    }, _callee59);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.synthetixState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee60() {
    return regenerator_default.a.wrap(function _callee60$(_context60) {
      while (1) {
        switch (_context60.prev = _context60.next) {
          case 0:
            _context60.next = 2;
            return _this.contract.synthetixState().call({
              _isConstant: true
            });

          case 2:
            return _context60.abrupt("return", _context60.sent);

          case 3:
          case "end":
            return _context60.stop();
        }
      }
    }, _callee60);
  }));
  /**
   * Returns the count of available synths in the system, which you can use to iterate availableSynths.<br>
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.availableSynthCount =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee61() {
    return regenerator_default.a.wrap(function _callee61$(_context61) {
      while (1) {
        switch (_context61.prev = _context61.next) {
          case 0:
            _context61.next = 2;
            return _this.contract.availableSynthCount().call({
              _isConstant: true
            });

          case 2:
            return _context61.abrupt("return", _context61.sent);

          case 3:
          case "end":
            return _context61.stop();
        }
      }
    }, _callee61);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref62 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee62(owner, spender) {
      return regenerator_default.a.wrap(function _callee62$(_context62) {
        while (1) {
          switch (_context62.prev = _context62.next) {
            case 0:
              _context62.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context62.abrupt("return", _context62.sent);

            case 3:
            case "end":
              return _context62.stop();
          }
        }
      }, _callee62);
    }));

    return function (_x75, _x76) {
      return _ref62.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.escrow =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee63() {
    return regenerator_default.a.wrap(function _callee63$(_context63) {
      while (1) {
        switch (_context63.prev = _context63.next) {
          case 0:
            _context63.next = 2;
            return _this.contract.escrow().call({
              _isConstant: true
            });

          case 2:
            return _context63.abrupt("return", _context63.sent);

          case 3:
          case "end":
            return _context63.stop();
        }
      }
    }, _callee63);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee64() {
    return regenerator_default.a.wrap(function _callee64$(_context64) {
      while (1) {
        switch (_context64.prev = _context64.next) {
          case 0:
            _context64.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context64.abrupt("return", _context64.sent);

          case 3:
          case "end":
            return _context64.stop();
        }
      }
    }, _callee64);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee65() {
    return regenerator_default.a.wrap(function _callee65$(_context65) {
      while (1) {
        switch (_context65.prev = _context65.next) {
          case 0:
            _context65.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context65.abrupt("return", _context65.sent);

          case 3:
          case "end":
            return _context65.stop();
        }
      }
    }, _callee65);
  }));
  /**
   * Function that allows you to exchange synths you hold in one flavour for another.<br>
   * Transaction (consumes gas, requires signer)
   * @param sourceCurrencyKey {bytes32}
   * @param sourceAmount {BigNumber}
   * @param destinationCurrencyKey {bytes32}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.exchange =
  /*#__PURE__*/
  function () {
    var _ref66 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee66(sourceCurrencyKey, sourceAmount, destinationCurrencyKey, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee66$(_context66) {
        while (1) {
          switch (_context66.prev = _context66.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_Synthetix_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context66.next = 4;
              return _this.contract.exchange(sourceCurrencyKey, sourceAmount, destinationCurrencyKey).send(txParams);

            case 4:
              txHash = _context66.sent;
              return _context66.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context66.stop();
          }
        }
      }, _callee66);
    }));

    return function (_x77, _x78, _x79, _x80) {
      return _ref66.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.exchangeEnabled =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee67() {
    return regenerator_default.a.wrap(function _callee67$(_context67) {
      while (1) {
        switch (_context67.prev = _context67.next) {
          case 0:
            _context67.next = 2;
            return _this.contract.exchangeEnabled().call({
              _isConstant: true
            });

          case 2:
            return _context67.abrupt("return", _context67.sent);

          case 3:
          case "end":
            return _context67.stop();
        }
      }
    }, _callee67);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.gasLimitOracle =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee68() {
    return regenerator_default.a.wrap(function _callee68$(_context68) {
      while (1) {
        switch (_context68.prev = _context68.next) {
          case 0:
            _context68.next = 2;
            return _this.contract.gasLimitOracle().call({
              _isConstant: true
            });

          case 2:
            return _context68.abrupt("return", _context68.sent);

          case 3:
          case "end":
            return _context68.stop();
        }
      }
    }, _callee68);
  }));
}

/* harmony default export */ var contracts_shasta_Synthetix = (shasta_Synthetix_Synthetix);
// CONCATENATED MODULE: ./src/contracts/shasta/SynthetixEscrow.js




function shasta_SynthetixEscrow_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function shasta_SynthetixEscrow_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { shasta_SynthetixEscrow_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { shasta_SynthetixEscrow_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function shasta_SynthetixEscrow_SynthetixEscrow(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['SynthetixEscrow'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(shasta_SynthetixEscrow, address, tronWeb, this.signer);
  /**
   * Destroy the vesting information associated with an account.<br>
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.purgeAccount =
  /*#__PURE__*/
  function () {
    var _ref = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee(account, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_SynthetixEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context.next = 4;
              return _this.contract.purgeAccount(account).send(txParams);

            case 4:
              txHash = _context.sent;
              return _context.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_SynthetixEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Obtain the index of the next schedule entry that will vest for a given user.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.getNextVestingIndex =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(account) {
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return _this.contract.getNextVestingIndex(account).call({
                _isConstant: true
              });

            case 2:
              return _context3.abrupt("return", _context3.sent);

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * A call to this should be accompanied by either enough balance already available in this contract, or a corresponding call to synthetix.endow(), to ensure that when the funds are withdrawn, there is enough balance, as well as correctly calculating the fees. This may only be called by the owner during the contract's setup period. Note; although this function could technically be used to produce unbounded arrays, it's only in the foundation's command to add to these lists., Add a new vesting entry at a given time and quantity to an account's schedule.<br>
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param time {BigNumber}
   * @param quantity {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.appendVestingEntry =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(account, time, quantity, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_SynthetixEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.appendVestingEntry(account, time, quantity).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7, _x8, _x9) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * The number of vesting dates in an account's schedule.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.numVestingEntries =
  /*#__PURE__*/
  function () {
    var _ref5 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee5(account) {
      return regenerator_default.a.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return _this.contract.numVestingEntries(account).call({
                _isConstant: true
              });

            case 2:
              return _context5.abrupt("return", _context5.sent);

            case 3:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    return function (_x10) {
      return _ref5.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.totalVestedAccountBalance =
  /*#__PURE__*/
  function () {
    var _ref6 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee6(address_1) {
      return regenerator_default.a.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return _this.contract.totalVestedAccountBalance(address_1).call({
                _isConstant: true
              });

            case 2:
              return _context6.abrupt("return", _context6.sent);

            case 3:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    return function (_x11) {
      return _ref6.apply(this, arguments);
    };
  }();
  /**
   * Obtain the next schedule entry that will vest for a given user.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns uint256[2]
   **/


  this.getNextVestingEntry =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(account) {
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return _this.contract.getNextVestingEntry(account).call({
                _isConstant: true
              });

            case 2:
              return _context7.abrupt("return", _context7.sent);

            case 3:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x12) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Allow a user to withdraw any SNX in their schedule that have vested.<br>
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.vest =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_SynthetixEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.vest().send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {String<TrxAddress>}
   * @param  {BigNumber}
   * @param  {BigNumber}
   * @returns BigNumber
   **/


  this.vestingSchedules =
  /*#__PURE__*/
  function () {
    var _ref9 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee9(address_1, uint256_1, uint256_2) {
      return regenerator_default.a.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return _this.contract.vestingSchedules(address_1, uint256_1, uint256_2).call({
                _isConstant: true
              });

            case 2:
              return _context9.abrupt("return", _context9.sent);

            case 3:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));

    return function (_x14, _x15, _x16) {
      return _ref9.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee10() {
    return regenerator_default.a.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context10.abrupt("return", _context10.sent);

          case 3:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));
  /**
   * Obtain the time at which the next schedule entry will vest for a given user.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.getNextVestingTime =
  /*#__PURE__*/
  function () {
    var _ref11 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee11(account) {
      return regenerator_default.a.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return _this.contract.getNextVestingTime(account).call({
                _isConstant: true
              });

            case 2:
              return _context11.abrupt("return", _context11.sent);

            case 3:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11);
    }));

    return function (_x17) {
      return _ref11.apply(this, arguments);
    };
  }();
  /**
   * A simple alias to totalVestedAccountBalance: provides ERC20 balance integration.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x18) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetix =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee13() {
    return regenerator_default.a.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            _context13.next = 2;
            return _this.contract.synthetix().call({
              _isConstant: true
            });

          case 2:
            return _context13.abrupt("return", _context13.sent);

          case 3:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_SynthetixEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x19) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Obtain the quantity which the next schedule entry will vest for a given user.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.getNextVestingQuantity =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(account) {
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return _this.contract.getNextVestingQuantity(account).call({
                _isConstant: true
              });

            case 2:
              return _context16.abrupt("return", _context16.sent);

            case 3:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x20) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Get the time at which a given schedule entry will vest.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @param index {BigNumber}
   * @returns BigNumber
   **/


  this.getVestingTime =
  /*#__PURE__*/
  function () {
    var _ref17 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee17(account, index) {
      return regenerator_default.a.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return _this.contract.getVestingTime(account, index).call({
                _isConstant: true
              });

            case 2:
              return _context17.abrupt("return", _context17.sent);

            case 3:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17);
    }));

    return function (_x21, _x22) {
      return _ref17.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.totalVestedBalance =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee18() {
    return regenerator_default.a.wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            _context18.next = 2;
            return _this.contract.totalVestedBalance().call({
              _isConstant: true
            });

          case 2:
            return _context18.abrupt("return", _context18.sent);

          case 3:
          case "end":
            return _context18.stop();
        }
      }
    }, _callee18);
  }));
  /**
   * Assumes that the quantities are nonzero and that the sequence of timestamps is strictly increasing. This may only be called by the owner during the contract's setup period., Construct a vesting schedule to release a quantities of SNX over a series of intervals.<br>
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param times {uint256[]}
   * @param quantities {uint256[]}
   * @param txParams {TxParams}
  
   **/

  this.addVestingSchedule =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(account, times, quantities, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_SynthetixEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.addVestingSchedule(account, times, quantities).send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x23, _x24, _x25, _x26) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Get a particular schedule entry for an account.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @param index {BigNumber}
   * @returns uint256[2]
   **/


  this.getVestingScheduleEntry =
  /*#__PURE__*/
  function () {
    var _ref20 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee20(account, index) {
      return regenerator_default.a.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              _context20.next = 2;
              return _this.contract.getVestingScheduleEntry(account, index).call({
                _isConstant: true
              });

            case 2:
              return _context20.abrupt("return", _context20.sent);

            case 3:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20);
    }));

    return function (_x27, _x28) {
      return _ref20.apply(this, arguments);
    };
  }();
  /**
   * This may only be called by the owner during the contract's setup period., Withdraws a quantity of SNX back to the synthetix contract.<br>
   * Transaction (consumes gas, requires signer)
   * @param quantity {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.withdrawSynthetix =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(quantity, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_SynthetixEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.withdrawSynthetix(quantity).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x29, _x30) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Get the quantity of SNX associated with a given schedule entry.<br>
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @param index {BigNumber}
   * @returns BigNumber
   **/


  this.getVestingQuantity =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(account, index) {
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              _context22.next = 2;
              return _this.contract.getVestingQuantity(account, index).call({
                _isConstant: true
              });

            case 2:
              return _context22.abrupt("return", _context22.sent);

            case 3:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x31, _x32) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetix {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setSynthetix =
  /*#__PURE__*/
  function () {
    var _ref23 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee23(_synthetix, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_SynthetixEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context23.next = 4;
              return _this.contract.setSynthetix(_synthetix).send(txParams);

            case 4:
              txHash = _context23.sent;
              return _context23.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23);
    }));

    return function (_x33, _x34) {
      return _ref23.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var contracts_shasta_SynthetixEscrow = (shasta_SynthetixEscrow_SynthetixEscrow);
// CONCATENATED MODULE: ./src/contracts/shasta/SynthetixState.js




function shasta_SynthetixState_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function shasta_SynthetixState_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { shasta_SynthetixState_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { shasta_SynthetixState_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function shasta_SynthetixState_SynthetixState(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['SynthetixState'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(shasta_SynthetixState, address, tronWeb, this.signer);
  /**
   * Transaction (consumes gas, requires signer)
   * @param _issuanceRatio {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setIssuanceRatio =
  /*#__PURE__*/
  function () {
    var _ref = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee(_issuanceRatio, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_SynthetixState_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context.next = 4;
              return _this.contract.setIssuanceRatio(_issuanceRatio).send(txParams);

            case 4:
              txHash = _context.sent;
              return _context.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {BigNumber}
   * @returns BigNumber
   **/


  this.debtLedger =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(uint256_1) {
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return _this.contract.debtLedger(uint256_1).call({
                _isConstant: true
              });

            case 2:
              return _context2.abrupt("return", _context2.sent);

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_SynthetixState_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.importedXDRAmount =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee4() {
    return regenerator_default.a.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return _this.contract.importedXDRAmount().call({
              _isConstant: true
            });

          case 2:
            return _context4.abrupt("return", _context4.sent);

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.incrementTotalIssuerCount =
  /*#__PURE__*/
  function () {
    var _ref5 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee5(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_SynthetixState_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context5.next = 4;
              return _this.contract.incrementTotalIssuerCount().send(txParams);

            case 4:
              txHash = _context5.sent;
              return _context5.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    return function (_x6) {
      return _ref5.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param value {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.appendDebtLedgerValue =
  /*#__PURE__*/
  function () {
    var _ref6 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee6(value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_SynthetixState_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context6.next = 4;
              return _this.contract.appendDebtLedgerValue(value).send(txParams);

            case 4:
              txHash = _context6.sent;
              return _context6.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    return function (_x7, _x8) {
      return _ref6.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.lastDebtLedgerEntry =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee7() {
    return regenerator_default.a.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return _this.contract.lastDebtLedgerEntry().call({
              _isConstant: true
            });

          case 2:
            return _context7.abrupt("return", _context7.sent);

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param currencyKey {bytes4}
   * @param txParams {TxParams}
  
   **/

  this.setPreferredCurrency =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(account, currencyKey, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_SynthetixState_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.setPreferredCurrency(account, currencyKey).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x9, _x10, _x11) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _associatedContract {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setAssociatedContract =
  /*#__PURE__*/
  function () {
    var _ref9 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee9(_associatedContract, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_SynthetixState_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context9.next = 4;
              return _this.contract.setAssociatedContract(_associatedContract).send(txParams);

            case 4:
              txHash = _context9.sent;
              return _context9.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));

    return function (_x12, _x13) {
      return _ref9.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee10() {
    return regenerator_default.a.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context10.abrupt("return", _context10.sent);

          case 3:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref11 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee11(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_SynthetixState_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context11.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context11.sent;
              return _context11.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11);
    }));

    return function (_x14) {
      return _ref11.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {String<TrxAddress>}
   * @returns Object
   **/


  this.issuanceData =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(address_1) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.issuanceData(address_1).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee13() {
    return regenerator_default.a.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            _context13.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context13.abrupt("return", _context13.sent);

          case 3:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalIssuerCount =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee14() {
    return regenerator_default.a.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            _context14.next = 2;
            return _this.contract.totalIssuerCount().call({
              _isConstant: true
            });

          case 2:
            return _context14.abrupt("return", _context14.sent);

          case 3:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param accounts {address[]}
   * @param sUSDAmounts {uint256[]}
   * @param txParams {TxParams}
  
   **/

  this.importIssuerData =
  /*#__PURE__*/
  function () {
    var _ref15 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee15(accounts, sUSDAmounts, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_SynthetixState_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context15.next = 4;
              return _this.contract.importIssuerData(accounts, sUSDAmounts).send(txParams);

            case 4:
              txHash = _context15.sent;
              return _context15.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    }));

    return function (_x16, _x17, _x18) {
      return _ref15.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param initialDebtOwnership {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.setCurrentIssuanceData =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(account, initialDebtOwnership, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_SynthetixState_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setCurrentIssuanceData(account, initialDebtOwnership).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x19, _x20, _x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.associatedContract =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.associatedContract().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.clearIssuanceData =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(account, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_SynthetixState_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.clearIssuanceData(account).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x22, _x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.issuanceRatio =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee19() {
    return regenerator_default.a.wrap(function _callee19$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            _context19.next = 2;
            return _this.contract.issuanceRatio().call({
              _isConstant: true
            });

          case 2:
            return _context19.abrupt("return", _context19.sent);

          case 3:
          case "end":
            return _context19.stop();
        }
      }
    }, _callee19);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns boolean
   **/

  this.hasIssued =
  /*#__PURE__*/
  function () {
    var _ref20 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee20(account) {
      return regenerator_default.a.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              _context20.next = 2;
              return _this.contract.hasIssued(account).call({
                _isConstant: true
              });

            case 2:
              return _context20.abrupt("return", _context20.sent);

            case 3:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20);
    }));

    return function (_x24) {
      return _ref20.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.decrementTotalIssuerCount =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_SynthetixState_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.decrementTotalIssuerCount().send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x25) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {String<TrxAddress>}
   * @returns bytes4
   **/


  this.preferredCurrency =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(address_1) {
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              _context22.next = 2;
              return _this.contract.preferredCurrency(address_1).call({
                _isConstant: true
              });

            case 2:
              return _context22.abrupt("return", _context22.sent);

            case 3:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x26) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.debtLedgerLength =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.debtLedgerLength().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
}

/* harmony default export */ var contracts_shasta_SynthetixState = (shasta_SynthetixState_SynthetixState);
// CONCATENATED MODULE: ./src/contracts/shasta/RewardEscrow.js




function shasta_RewardEscrow_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function shasta_RewardEscrow_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { shasta_RewardEscrow_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { shasta_RewardEscrow_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function shasta_RewardEscrow_RewardEscrow(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['RewardEscrow'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(shasta_RewardEscrow, address, tronWeb, this.signer);
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_RewardEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context.sent;
              return _context.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePool {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setFeePool =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(_feePool, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_RewardEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.setFeePool(_feePool).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.getNextVestingIndex =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(account) {
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return _this.contract.getNextVestingIndex(account).call({
                _isConstant: true
              });

            case 2:
              return _context3.abrupt("return", _context3.sent);

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.numVestingEntries =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(account) {
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return _this.contract.numVestingEntries(account).call({
                _isConstant: true
              });

            case 2:
              return _context4.abrupt("return", _context4.sent);

            case 3:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.totalVestedAccountBalance =
  /*#__PURE__*/
  function () {
    var _ref5 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee5(address_1) {
      return regenerator_default.a.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return _this.contract.totalVestedAccountBalance(address_1).call({
                _isConstant: true
              });

            case 2:
              return _context5.abrupt("return", _context5.sent);

            case 3:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    return function (_x7) {
      return _ref5.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns uint256[2]
   **/


  this.getNextVestingEntry =
  /*#__PURE__*/
  function () {
    var _ref6 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee6(account) {
      return regenerator_default.a.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return _this.contract.getNextVestingEntry(account).call({
                _isConstant: true
              });

            case 2:
              return _context6.abrupt("return", _context6.sent);

            case 3:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    return function (_x8) {
      return _ref6.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.totalEscrowedAccountBalance =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(address_1) {
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return _this.contract.totalEscrowedAccountBalance(address_1).call({
                _isConstant: true
              });

            case 2:
              return _context7.abrupt("return", _context7.sent);

            case 3:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns uint256[520]
   **/


  this.checkAccountSchedule =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(account) {
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return _this.contract.checkAccountSchedule(account).call({
                _isConstant: true
              });

            case 2:
              return _context8.abrupt("return", _context8.sent);

            case 3:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.vest =
  /*#__PURE__*/
  function () {
    var _ref9 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee9(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_RewardEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context9.next = 4;
              return _this.contract.vest().send(txParams);

            case 4:
              txHash = _context9.sent;
              return _context9.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));

    return function (_x11) {
      return _ref9.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param  {String<TrxAddress>}
   * @param  {BigNumber}
   * @param  {BigNumber}
   * @returns BigNumber
   **/


  this.vestingSchedules =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(address_1, uint256_1, uint256_2) {
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return _this.contract.vestingSchedules(address_1, uint256_1, uint256_2).call({
                _isConstant: true
              });

            case 2:
              return _context10.abrupt("return", _context10.sent);

            case 3:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x12, _x13, _x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.getNextVestingTime =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.getNextVestingTime(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(account) {
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context13.abrupt("return", _context13.sent);

            case 3:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.totalEscrowedBalance =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee14() {
    return regenerator_default.a.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            _context14.next = 2;
            return _this.contract.totalEscrowedBalance().call({
              _isConstant: true
            });

          case 2:
            return _context14.abrupt("return", _context14.sent);

          case 3:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.synthetix =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.synthetix().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_RewardEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x17) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.getNextVestingQuantity =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(account) {
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return _this.contract.getNextVestingQuantity(account).call({
                _isConstant: true
              });

            case 2:
              return _context18.abrupt("return", _context18.sent);

            case 3:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x18) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @param index {BigNumber}
   * @returns BigNumber
   **/


  this.getVestingTime =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(account, index) {
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              _context19.next = 2;
              return _this.contract.getVestingTime(account, index).call({
                _isConstant: true
              });

            case 2:
              return _context19.abrupt("return", _context19.sent);

            case 3:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x19, _x20) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.feePool =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.feePool().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param quantity {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.appendVestingEntry =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(account, quantity, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_RewardEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.appendVestingEntry(account, quantity).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x21, _x22, _x23) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.MAX_VESTING_ENTRIES =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee22() {
    return regenerator_default.a.wrap(function _callee22$(_context22) {
      while (1) {
        switch (_context22.prev = _context22.next) {
          case 0:
            _context22.next = 2;
            return _this.contract.MAX_VESTING_ENTRIES().call({
              _isConstant: true
            });

          case 2:
            return _context22.abrupt("return", _context22.sent);

          case 3:
          case "end":
            return _context22.stop();
        }
      }
    }, _callee22);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @param index {BigNumber}
   * @returns uint256[2]
   **/

  this.getVestingScheduleEntry =
  /*#__PURE__*/
  function () {
    var _ref23 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee23(account, index) {
      return regenerator_default.a.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              _context23.next = 2;
              return _this.contract.getVestingScheduleEntry(account, index).call({
                _isConstant: true
              });

            case 2:
              return _context23.abrupt("return", _context23.sent);

            case 3:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23);
    }));

    return function (_x24, _x25) {
      return _ref23.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @param index {BigNumber}
   * @returns BigNumber
   **/


  this.getVestingQuantity =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(account, index) {
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              _context24.next = 2;
              return _this.contract.getVestingQuantity(account, index).call({
                _isConstant: true
              });

            case 2:
              return _context24.abrupt("return", _context24.sent);

            case 3:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x26, _x27) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetix {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setSynthetix =
  /*#__PURE__*/
  function () {
    var _ref25 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee25(_synthetix, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_RewardEscrow_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context25.next = 4;
              return _this.contract.setSynthetix(_synthetix).send(txParams);

            case 4:
              txHash = _context25.sent;
              return _context25.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25);
    }));

    return function (_x28, _x29) {
      return _ref25.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var contracts_shasta_RewardEscrow = (shasta_RewardEscrow_RewardEscrow);
// CONCATENATED MODULE: ./src/contracts/shasta/DappMaintenance.js




function shasta_DappMaintenance_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function shasta_DappMaintenance_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { shasta_DappMaintenance_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { shasta_DappMaintenance_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function shasta_DappMaintenance_DappMaintenance(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['DappMaintenance'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(shasta_DappMaintenance, address, tronWeb, this.signer);
  /**
   * Transaction (consumes gas, requires signer)
   * @param isPaused {boolean}
   * @param txParams {TxParams}
  
   **/

  this.setMaintenanceModeMintr =
  /*#__PURE__*/
  function () {
    var _ref = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee(isPaused, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_DappMaintenance_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context.next = 4;
              return _this.contract.setMaintenanceModeMintr(isPaused).send(txParams);

            case 4:
              txHash = _context.sent;
              return _context.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_DappMaintenance_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param isPaused {boolean}
   * @param txParams {TxParams}
  
   **/


  this.setMaintenanceModeAll =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(isPaused, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_DappMaintenance_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setMaintenanceModeAll(isPaused).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x5, _x6) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.isPausedMintr =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee4() {
    return regenerator_default.a.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return _this.contract.isPausedMintr().call({
              _isConstant: true
            });

          case 2:
            return _context4.abrupt("return", _context4.sent);

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref6 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee6(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_DappMaintenance_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context6.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context6.sent;
              return _context6.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    return function (_x7) {
      return _ref6.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee7() {
    return regenerator_default.a.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context7.abrupt("return", _context7.sent);

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/

  this.isPausedSX =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee8() {
    return regenerator_default.a.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return _this.contract.isPausedSX().call({
              _isConstant: true
            });

          case 2:
            return _context8.abrupt("return", _context8.sent);

          case 3:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param isPaused {boolean}
   * @param txParams {TxParams}
  
   **/

  this.setMaintenanceModeSX =
  /*#__PURE__*/
  function () {
    var _ref9 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee9(isPaused, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_DappMaintenance_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context9.next = 4;
              return _this.contract.setMaintenanceModeSX(isPaused).send(txParams);

            case 4:
              txHash = _context9.sent;
              return _context9.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));

    return function (_x8, _x9) {
      return _ref9.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var contracts_shasta_DappMaintenance = (shasta_DappMaintenance_DappMaintenance);
// CONCATENATED MODULE: ./src/contracts/shasta/ArbRewarder.js




function shasta_ArbRewarder_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function shasta_ArbRewarder_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { shasta_ArbRewarder_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { shasta_ArbRewarder_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function shasta_ArbRewarder_ArbRewarder(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ArbRewarder'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(shasta_ArbRewarder, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.uniswapAddress =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.uniswapAddress().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.synth =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee2() {
    return regenerator_default.a.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _this.contract.synth().call({
              _isConstant: true
            });

          case 2:
            return _context2.abrupt("return", _context2.sent);

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param to_addr {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.recoverETH =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(to_addr, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.recoverETH(to_addr).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x, _x2) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x3, _x4) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _paused {boolean}
   * @param txParams {TxParams}
  
   **/


  this.setPaused =
  /*#__PURE__*/
  function () {
    var _ref5 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee5(_paused, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context5.next = 4;
              return _this.contract.setPaused(_paused).send(txParams);

            case 4:
              txHash = _context5.sent;
              return _context5.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    return function (_x5, _x6) {
      return _ref5.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x7, _x8) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.isArbable =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.isArbable().send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x9) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref9 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee9(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context9.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context9.sent;
              return _context9.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));

    return function (_x10) {
      return _ref9.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.exchangeRates =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee10() {
    return regenerator_default.a.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return _this.contract.exchangeRates().call({
              _isConstant: true
            });

          case 2:
            return _context10.abrupt("return", _context10.sent);

          case 3:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _exchangeRatesAddress {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setExchangeRates =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(_exchangeRatesAddress, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context12.next = 4;
              return _this.contract.setExchangeRates(_exchangeRatesAddress).send(txParams);

            case 4:
              txHash = _context12.sent;
              return _context12.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x11, _x12) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _acceptable_slippage {BigNumber}
   * @param _max_delay {BigNumber}
   * @param _off_peg_min {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.setParams =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(_acceptable_slippage, _max_delay, _off_peg_min, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.setParams(_acceptable_slippage, _max_delay, _off_peg_min).send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x13, _x14, _x15, _x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.paused =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee14() {
    return regenerator_default.a.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            _context14.next = 2;
            return _this.contract.paused().call({
              _isConstant: true
            });

          case 2:
            return _context14.abrupt("return", _context14.sent);

          case 3:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.uniswapExchange =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.uniswapExchange().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.synthetix =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee16() {
    return regenerator_default.a.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            _context16.next = 2;
            return _this.contract.synthetix().call({
              _isConstant: true
            });

          case 2:
            return _context16.abrupt("return", _context16.sent);

          case 3:
          case "end":
            return _context16.stop();
        }
      }
    }, _callee16);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthAddress {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthAddress =
  /*#__PURE__*/
  function () {
    var _ref17 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee17(_synthAddress, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context17.next = 4;
              return _this.contract.setSynthAddress(_synthAddress).send(txParams);

            case 4:
              txHash = _context17.sent;
              return _context17.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17);
    }));

    return function (_x17, _x18) {
      return _ref17.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x19) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param erc20_addr {String<TrxAddress>}
   * @param to_addr {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.recoverERC20 =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(erc20_addr, to_addr, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.recoverERC20(erc20_addr, to_addr).send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x20, _x21, _x22) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.lastPauseTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee21() {
    return regenerator_default.a.wrap(function _callee21$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            _context21.next = 2;
            return _this.contract.lastPauseTime().call({
              _isConstant: true
            });

          case 2:
            return _context21.abrupt("return", _context21.sent);

          case 3:
          case "end":
            return _context21.stop();
        }
      }
    }, _callee21);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x23) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Transaction (consumes gas, requires signer)
  <br>Payable (to enter TRX amount set txParams.value)
   * @param txParams {TxParams}
   * @returns BigNumber
   **/

  this.arbSynthRate =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.arbSynthRate().send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x24) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _uniswapAddress {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setUniswapExchange =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(_uniswapAddress, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.setUniswapExchange(_uniswapAddress).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x25, _x26) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x27) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _address {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetix =
  /*#__PURE__*/
  function () {
    var _ref30 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee30(_address, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee30$(_context30) {
        while (1) {
          switch (_context30.prev = _context30.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ArbRewarder_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context30.next = 4;
              return _this.contract.setSynthetix(_address).send(txParams);

            case 4:
              txHash = _context30.sent;
              return _context30.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context30.stop();
          }
        }
      }, _callee30);
    }));

    return function (_x28, _x29) {
      return _ref30.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var contracts_shasta_ArbRewarder = (shasta_ArbRewarder_ArbRewarder);
// CONCATENATED MODULE: ./src/contracts/shasta/ODR.js




function shasta_ODR_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function shasta_ODR_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { shasta_ODR_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { shasta_ODR_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function ODR_ODR(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxyODR'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(shasta_Synth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Override ERC20 transferFrom function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.issue =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17, _x18, _x19) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x20, _x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x22, _x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x24) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x25, _x26, _x27) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28, _x29) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Override ERC20 transfer function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x30, _x31, _x32) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x33, _x34) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x35) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee31() {
    return regenerator_default.a.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x36, _x37) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(owner, spender) {
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context34.abrupt("return", _context34.sent);

            case 3:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x38, _x39) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_ODR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context37.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context37.sent;
              return _context37.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x40, _x41) {
      return _ref37.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var shasta_ODR = (ODR_ODR);
// CONCATENATED MODULE: ./src/contracts/shasta/sEUR.js




function shasta_sEUR_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function shasta_sEUR_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { shasta_sEUR_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { shasta_sEUR_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function sEUR_sEUR(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxysEUR'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(shasta_Synth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Override ERC20 transferFrom function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.issue =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17, _x18, _x19) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x20, _x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x22, _x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x24) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x25, _x26, _x27) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28, _x29) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Override ERC20 transfer function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x30, _x31, _x32) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x33, _x34) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x35) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee31() {
    return regenerator_default.a.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x36, _x37) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(owner, spender) {
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context34.abrupt("return", _context34.sent);

            case 3:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x38, _x39) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sEUR_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context37.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context37.sent;
              return _context37.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x40, _x41) {
      return _ref37.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var shasta_sEUR = (sEUR_sEUR);
// CONCATENATED MODULE: ./src/contracts/shasta/sUSD.js




function shasta_sUSD_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function shasta_sUSD_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { shasta_sUSD_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { shasta_sUSD_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function sUSD_sUSD(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxysUSD'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(shasta_Synth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Override ERC20 transferFrom function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.issue =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17, _x18, _x19) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x20, _x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x22, _x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x24) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x25, _x26, _x27) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28, _x29) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Override ERC20 transfer function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x30, _x31, _x32) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x33, _x34) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x35) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee31() {
    return regenerator_default.a.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x36, _x37) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(owner, spender) {
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context34.abrupt("return", _context34.sent);

            case 3:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x38, _x39) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sUSD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context37.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context37.sent;
              return _context37.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x40, _x41) {
      return _ref37.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var shasta_sUSD = (sUSD_sUSD);
// CONCATENATED MODULE: ./src/contracts/shasta/sAUD.js




function shasta_sAUD_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function shasta_sAUD_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { shasta_sAUD_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { shasta_sAUD_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function sAUD_sAUD(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxysAUD'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(shasta_Synth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Override ERC20 transferFrom function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.issue =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17, _x18, _x19) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x20, _x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x22, _x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x24) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x25, _x26, _x27) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28, _x29) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Override ERC20 transfer function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x30, _x31, _x32) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x33, _x34) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x35) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee31() {
    return regenerator_default.a.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x36, _x37) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(owner, spender) {
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context34.abrupt("return", _context34.sent);

            case 3:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x38, _x39) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sAUD_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context37.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context37.sent;
              return _context37.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x40, _x41) {
      return _ref37.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var shasta_sAUD = (sAUD_sAUD);
// CONCATENATED MODULE: ./src/contracts/shasta/sGBP.js




function shasta_sGBP_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function shasta_sGBP_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { shasta_sGBP_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { shasta_sGBP_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function sGBP_sGBP(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxysGBP'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(shasta_Synth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Override ERC20 transferFrom function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.issue =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17, _x18, _x19) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x20, _x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x22, _x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x24) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x25, _x26, _x27) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28, _x29) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Override ERC20 transfer function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x30, _x31, _x32) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x33, _x34) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x35) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee31() {
    return regenerator_default.a.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x36, _x37) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(owner, spender) {
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context34.abrupt("return", _context34.sent);

            case 3:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x38, _x39) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sGBP_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context37.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context37.sent;
              return _context37.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x40, _x41) {
      return _ref37.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var shasta_sGBP = (sGBP_sGBP);
// CONCATENATED MODULE: ./src/contracts/shasta/sCHF.js




function shasta_sCHF_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function shasta_sCHF_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { shasta_sCHF_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { shasta_sCHF_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function sCHF_sCHF(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxysCHF'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(shasta_Synth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Override ERC20 transferFrom function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.issue =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17, _x18, _x19) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x20, _x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x22, _x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x24) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x25, _x26, _x27) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28, _x29) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Override ERC20 transfer function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x30, _x31, _x32) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x33, _x34) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x35) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee31() {
    return regenerator_default.a.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x36, _x37) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(owner, spender) {
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context34.abrupt("return", _context34.sent);

            case 3:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x38, _x39) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sCHF_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context37.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context37.sent;
              return _context37.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x40, _x41) {
      return _ref37.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var shasta_sCHF = (sCHF_sCHF);
// CONCATENATED MODULE: ./src/contracts/shasta/sBTC.js




function shasta_sBTC_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function shasta_sBTC_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { shasta_sBTC_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { shasta_sBTC_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function sBTC_sBTC(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxysBTC'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(shasta_Synth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Override ERC20 transferFrom function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.issue =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17, _x18, _x19) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x20, _x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x22, _x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x24) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x25, _x26, _x27) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28, _x29) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Override ERC20 transfer function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x30, _x31, _x32) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x33, _x34) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x35) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee31() {
    return regenerator_default.a.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x36, _x37) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(owner, spender) {
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context34.abrupt("return", _context34.sent);

            case 3:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x38, _x39) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context37.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context37.sent;
              return _context37.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x40, _x41) {
      return _ref37.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var shasta_sBTC = (sBTC_sBTC);
// CONCATENATED MODULE: ./src/contracts/shasta/sETH.js




function shasta_sETH_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function shasta_sETH_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { shasta_sETH_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { shasta_sETH_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function sETH_sETH(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxysETH'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(shasta_Synth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Override ERC20 transferFrom function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.issue =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17, _x18, _x19) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x20, _x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x22, _x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x24) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x25, _x26, _x27) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28, _x29) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Override ERC20 transfer function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x30, _x31, _x32) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x33, _x34) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x35) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee31() {
    return regenerator_default.a.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x36, _x37) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(owner, spender) {
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context34.abrupt("return", _context34.sent);

            case 3:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x38, _x39) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context37.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context37.sent;
              return _context37.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x40, _x41) {
      return _ref37.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var shasta_sETH = (sETH_sETH);
// CONCATENATED MODULE: ./src/contracts/shasta/sTRX.js




function shasta_sTRX_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function shasta_sTRX_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { shasta_sTRX_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { shasta_sTRX_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function sTRX_sTRX(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxysTRX'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(shasta_Synth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Override ERC20 transferFrom function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref12 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee12(account) {
      return regenerator_default.a.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));

    return function (_x15) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/


  this.issue =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context14.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context14.sent;
              return _context14.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17, _x18, _x19) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee15() {
    return regenerator_default.a.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref16 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee16(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context16.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context16.sent;
              return _context16.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));

    return function (_x20, _x21) {
      return _ref16.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee17() {
    return regenerator_default.a.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref18 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee18(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context18.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context18.sent;
              return _context18.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x22, _x23) {
      return _ref18.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x24) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x25, _x26, _x27) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x28, _x29) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Override ERC20 transfer function in order to subtract the transaction fee and send it to the fee pool for SNX holders to claim.<br>
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x30, _x31, _x32) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee25() {
    return regenerator_default.a.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref26 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee26(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context26.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context26.sent;
              return _context26.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));

    return function (_x33, _x34) {
      return _ref26.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x35) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee28() {
    return regenerator_default.a.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee30() {
    return regenerator_default.a.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee31() {
    return regenerator_default.a.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref32 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee32(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context32.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context32.sent;
              return _context32.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    }));

    return function (_x36, _x37) {
      return _ref32.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref34 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee34(owner, spender) {
      return regenerator_default.a.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context34.abrupt("return", _context34.sent);

            case 3:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    }));

    return function (_x38, _x39) {
      return _ref34.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee36() {
    return regenerator_default.a.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref37 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee37(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_sTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context37.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context37.sent;
              return _context37.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    }));

    return function (_x40, _x41) {
      return _ref37.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var shasta_sTRX = (sTRX_sTRX);
// EXTERNAL MODULE: ./lib/abis/shasta/PurgeableSynth.json
var shasta_PurgeableSynth = __webpack_require__(32);

// CONCATENATED MODULE: ./src/contracts/shasta/iBTC.js




function shasta_iBTC_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function shasta_iBTC_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { shasta_iBTC_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { shasta_iBTC_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function iBTC_iBTC(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxyiBTC'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(shasta_PurgeableSynth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.exchangeRates =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.exchangeRates().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee12() {
    return regenerator_default.a.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            _context12.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context12.abrupt("return", _context12.sent);

          case 3:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _exchangeRates {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setExchangeRates =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(_exchangeRates, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.setExchangeRates(_exchangeRates).send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x15, _x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account) {
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context14.abrupt("return", _context14.sent);

            case 3:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref15 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee15(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context15.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context15.sent;
              return _context15.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    }));

    return function (_x18) {
      return _ref15.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.maxSupplyToPurgeInUSD =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee16() {
    return regenerator_default.a.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            _context16.next = 2;
            return _this.contract.maxSupplyToPurgeInUSD().call({
              _isConstant: true
            });

          case 2:
            return _context16.abrupt("return", _context16.sent);

          case 3:
          case "end":
            return _context16.stop();
        }
      }
    }, _callee16);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.issue =
  /*#__PURE__*/
  function () {
    var _ref17 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee17(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context17.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context17.sent;
              return _context17.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17);
    }));

    return function (_x19, _x20, _x21) {
      return _ref17.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee18() {
    return regenerator_default.a.wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            _context18.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context18.abrupt("return", _context18.sent);

          case 3:
          case "end":
            return _context18.stop();
        }
      }
    }, _callee18);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x22, _x23) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x24, _x25) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x26) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x27, _x28, _x29) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref25 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee25(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context25.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context25.sent;
              return _context25.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25);
    }));

    return function (_x30, _x31) {
      return _ref25.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee26() {
    return regenerator_default.a.wrap(function _callee26$(_context26) {
      while (1) {
        switch (_context26.prev = _context26.next) {
          case 0:
            _context26.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context26.abrupt("return", _context26.sent);

          case 3:
          case "end":
            return _context26.stop();
        }
      }
    }, _callee26);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x32, _x33, _x34) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param addresses {address[]}
   * @param txParams {TxParams}
  
   **/


  this.purge =
  /*#__PURE__*/
  function () {
    var _ref28 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee28(addresses, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee28$(_context28) {
        while (1) {
          switch (_context28.prev = _context28.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context28.next = 4;
              return _this.contract.purge(addresses).send(txParams);

            case 4:
              txHash = _context28.sent;
              return _context28.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context28.stop();
          }
        }
      }, _callee28);
    }));

    return function (_x35, _x36) {
      return _ref28.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref30 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee30(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee30$(_context30) {
        while (1) {
          switch (_context30.prev = _context30.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context30.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context30.sent;
              return _context30.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context30.stop();
          }
        }
      }, _callee30);
    }));

    return function (_x37, _x38) {
      return _ref30.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref31 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee31(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee31$(_context31) {
        while (1) {
          switch (_context31.prev = _context31.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context31.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context31.sent;
              return _context31.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context31.stop();
          }
        }
      }, _callee31);
    }));

    return function (_x39) {
      return _ref31.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee32() {
    return regenerator_default.a.wrap(function _callee32$(_context32) {
      while (1) {
        switch (_context32.prev = _context32.next) {
          case 0:
            _context32.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context32.abrupt("return", _context32.sent);

          case 3:
          case "end":
            return _context32.stop();
        }
      }
    }, _callee32);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee34() {
    return regenerator_default.a.wrap(function _callee34$(_context34) {
      while (1) {
        switch (_context34.prev = _context34.next) {
          case 0:
            _context34.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context34.abrupt("return", _context34.sent);

          case 3:
          case "end":
            return _context34.stop();
        }
      }
    }, _callee34);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref36 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee36(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee36$(_context36) {
        while (1) {
          switch (_context36.prev = _context36.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context36.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context36.sent;
              return _context36.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context36.stop();
          }
        }
      }, _callee36);
    }));

    return function (_x40, _x41) {
      return _ref36.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee37() {
    return regenerator_default.a.wrap(function _callee37$(_context37) {
      while (1) {
        switch (_context37.prev = _context37.next) {
          case 0:
            _context37.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context37.abrupt("return", _context37.sent);

          case 3:
          case "end":
            return _context37.stop();
        }
      }
    }, _callee37);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref38 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee38(owner, spender) {
      return regenerator_default.a.wrap(function _callee38$(_context38) {
        while (1) {
          switch (_context38.prev = _context38.next) {
            case 0:
              _context38.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context38.abrupt("return", _context38.sent);

            case 3:
            case "end":
              return _context38.stop();
          }
        }
      }, _callee38);
    }));

    return function (_x42, _x43) {
      return _ref38.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee39() {
    return regenerator_default.a.wrap(function _callee39$(_context39) {
      while (1) {
        switch (_context39.prev = _context39.next) {
          case 0:
            _context39.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context39.abrupt("return", _context39.sent);

          case 3:
          case "end":
            return _context39.stop();
        }
      }
    }, _callee39);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee40() {
    return regenerator_default.a.wrap(function _callee40$(_context40) {
      while (1) {
        switch (_context40.prev = _context40.next) {
          case 0:
            _context40.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context40.abrupt("return", _context40.sent);

          case 3:
          case "end":
            return _context40.stop();
        }
      }
    }, _callee40);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref41 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee41(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee41$(_context41) {
        while (1) {
          switch (_context41.prev = _context41.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iBTC_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context41.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context41.sent;
              return _context41.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context41.stop();
          }
        }
      }, _callee41);
    }));

    return function (_x44, _x45) {
      return _ref41.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var shasta_iBTC = (iBTC_iBTC);
// CONCATENATED MODULE: ./src/contracts/shasta/iTRX.js




function shasta_iTRX_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function shasta_iTRX_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { shasta_iTRX_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { shasta_iTRX_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function iTRX_iTRX(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxyiTRX'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(shasta_PurgeableSynth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.exchangeRates =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.exchangeRates().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee12() {
    return regenerator_default.a.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            _context12.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context12.abrupt("return", _context12.sent);

          case 3:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _exchangeRates {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setExchangeRates =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(_exchangeRates, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.setExchangeRates(_exchangeRates).send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x15, _x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account) {
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context14.abrupt("return", _context14.sent);

            case 3:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref15 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee15(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context15.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context15.sent;
              return _context15.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    }));

    return function (_x18) {
      return _ref15.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.maxSupplyToPurgeInUSD =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee16() {
    return regenerator_default.a.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            _context16.next = 2;
            return _this.contract.maxSupplyToPurgeInUSD().call({
              _isConstant: true
            });

          case 2:
            return _context16.abrupt("return", _context16.sent);

          case 3:
          case "end":
            return _context16.stop();
        }
      }
    }, _callee16);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.issue =
  /*#__PURE__*/
  function () {
    var _ref17 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee17(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context17.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context17.sent;
              return _context17.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17);
    }));

    return function (_x19, _x20, _x21) {
      return _ref17.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee18() {
    return regenerator_default.a.wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            _context18.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context18.abrupt("return", _context18.sent);

          case 3:
          case "end":
            return _context18.stop();
        }
      }
    }, _callee18);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x22, _x23) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x24, _x25) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x26) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x27, _x28, _x29) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref25 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee25(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context25.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context25.sent;
              return _context25.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25);
    }));

    return function (_x30, _x31) {
      return _ref25.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee26() {
    return regenerator_default.a.wrap(function _callee26$(_context26) {
      while (1) {
        switch (_context26.prev = _context26.next) {
          case 0:
            _context26.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context26.abrupt("return", _context26.sent);

          case 3:
          case "end":
            return _context26.stop();
        }
      }
    }, _callee26);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x32, _x33, _x34) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param addresses {address[]}
   * @param txParams {TxParams}
  
   **/


  this.purge =
  /*#__PURE__*/
  function () {
    var _ref28 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee28(addresses, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee28$(_context28) {
        while (1) {
          switch (_context28.prev = _context28.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context28.next = 4;
              return _this.contract.purge(addresses).send(txParams);

            case 4:
              txHash = _context28.sent;
              return _context28.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context28.stop();
          }
        }
      }, _callee28);
    }));

    return function (_x35, _x36) {
      return _ref28.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref30 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee30(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee30$(_context30) {
        while (1) {
          switch (_context30.prev = _context30.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context30.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context30.sent;
              return _context30.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context30.stop();
          }
        }
      }, _callee30);
    }));

    return function (_x37, _x38) {
      return _ref30.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref31 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee31(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee31$(_context31) {
        while (1) {
          switch (_context31.prev = _context31.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context31.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context31.sent;
              return _context31.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context31.stop();
          }
        }
      }, _callee31);
    }));

    return function (_x39) {
      return _ref31.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee32() {
    return regenerator_default.a.wrap(function _callee32$(_context32) {
      while (1) {
        switch (_context32.prev = _context32.next) {
          case 0:
            _context32.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context32.abrupt("return", _context32.sent);

          case 3:
          case "end":
            return _context32.stop();
        }
      }
    }, _callee32);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee34() {
    return regenerator_default.a.wrap(function _callee34$(_context34) {
      while (1) {
        switch (_context34.prev = _context34.next) {
          case 0:
            _context34.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context34.abrupt("return", _context34.sent);

          case 3:
          case "end":
            return _context34.stop();
        }
      }
    }, _callee34);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref36 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee36(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee36$(_context36) {
        while (1) {
          switch (_context36.prev = _context36.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context36.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context36.sent;
              return _context36.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context36.stop();
          }
        }
      }, _callee36);
    }));

    return function (_x40, _x41) {
      return _ref36.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee37() {
    return regenerator_default.a.wrap(function _callee37$(_context37) {
      while (1) {
        switch (_context37.prev = _context37.next) {
          case 0:
            _context37.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context37.abrupt("return", _context37.sent);

          case 3:
          case "end":
            return _context37.stop();
        }
      }
    }, _callee37);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref38 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee38(owner, spender) {
      return regenerator_default.a.wrap(function _callee38$(_context38) {
        while (1) {
          switch (_context38.prev = _context38.next) {
            case 0:
              _context38.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context38.abrupt("return", _context38.sent);

            case 3:
            case "end":
              return _context38.stop();
          }
        }
      }, _callee38);
    }));

    return function (_x42, _x43) {
      return _ref38.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee39() {
    return regenerator_default.a.wrap(function _callee39$(_context39) {
      while (1) {
        switch (_context39.prev = _context39.next) {
          case 0:
            _context39.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context39.abrupt("return", _context39.sent);

          case 3:
          case "end":
            return _context39.stop();
        }
      }
    }, _callee39);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee40() {
    return regenerator_default.a.wrap(function _callee40$(_context40) {
      while (1) {
        switch (_context40.prev = _context40.next) {
          case 0:
            _context40.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context40.abrupt("return", _context40.sent);

          case 3:
          case "end":
            return _context40.stop();
        }
      }
    }, _callee40);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref41 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee41(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee41$(_context41) {
        while (1) {
          switch (_context41.prev = _context41.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iTRX_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context41.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context41.sent;
              return _context41.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context41.stop();
          }
        }
      }, _callee41);
    }));

    return function (_x44, _x45) {
      return _ref41.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var shasta_iTRX = (iTRX_iTRX);
// CONCATENATED MODULE: ./src/contracts/shasta/iETH.js




function shasta_iETH_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function shasta_iETH_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { shasta_iETH_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { shasta_iETH_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/** @constructor
 * @param contractSettings {ContractSettings}
 */

function iETH_iETH(contractSettings) {
  var _this = this;

  this.contractSettings = contractSettings || new src_contractSettings();
  var address = this.contractSettings.addressList['ProxyiETH'];
  var tronWeb = this.contractSettings.tronWeb;
  this.signer = this.contractSettings.signer;
  this.contract = tronContract(shasta_PurgeableSynth, address, tronWeb, this.signer);
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/

  this.name =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee() {
    return regenerator_default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.contract.name().call({
              _isConstant: true
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param spender {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.approve =
  /*#__PURE__*/
  function () {
    var _ref2 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee2(spender, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context2.next = 4;
              return _this.contract.approve(spender, value).send(txParams);

            case 4:
              txHash = _context2.sent;
              return _context2.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _integrationProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setIntegrationProxy =
  /*#__PURE__*/
  function () {
    var _ref3 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee3(_integrationProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context3.next = 4;
              return _this.contract.setIntegrationProxy(_integrationProxy).send(txParams);

            case 4:
              txHash = _context3.sent;
              return _context3.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _owner {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.nominateNewOwner =
  /*#__PURE__*/
  function () {
    var _ref4 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee4(_owner, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context4.next = 4;
              return _this.contract.nominateNewOwner(_owner).send(txParams);

            case 4:
              txHash = _context4.sent;
              return _context4.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.initiationTime =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee5() {
    return regenerator_default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.contract.initiationTime().call({
              _isConstant: true
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/

  this.totalSupply =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee6() {
    return regenerator_default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _this.contract.totalSupply().call({
              _isConstant: true
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _beneficiary {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSelfDestructBeneficiary =
  /*#__PURE__*/
  function () {
    var _ref7 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee7(_beneficiary, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context7.next = 4;
              return _this.contract.setSelfDestructBeneficiary(_beneficiary).send(txParams);

            case 4:
              txHash = _context7.sent;
              return _context7.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param from {String<TrxAddress>}
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/


  this.transferFrom =
  /*#__PURE__*/
  function () {
    var _ref8 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee8(from, to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context8.next = 4;
              return _this.contract.transferFrom(from, to, value).send(txParams);

            case 4:
              txHash = _context8.sent;
              return _context8.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x10, _x11, _x12, _x13) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns Number
   **/


  this.decimals =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee9() {
    return regenerator_default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this.contract.decimals().call({
              _isConstant: true
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/

  this.terminateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref10 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee10(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context10.next = 4;
              return _this.contract.terminateSelfDestruct().send(txParams);

            case 4:
              txHash = _context10.sent;
              return _context10.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.exchangeRates =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee11() {
    return regenerator_default.a.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this.contract.exchangeRates().call({
              _isConstant: true
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.nominatedOwner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee12() {
    return regenerator_default.a.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            _context12.next = 2;
            return _this.contract.nominatedOwner().call({
              _isConstant: true
            });

          case 2:
            return _context12.abrupt("return", _context12.sent);

          case 3:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _exchangeRates {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setExchangeRates =
  /*#__PURE__*/
  function () {
    var _ref13 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee13(_exchangeRates, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context13.next = 4;
              return _this.contract.setExchangeRates(_exchangeRates).send(txParams);

            case 4:
              txHash = _context13.sent;
              return _context13.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x15, _x16) {
      return _ref13.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param account {String<TrxAddress>}
   * @returns BigNumber
   **/


  this.balanceOf =
  /*#__PURE__*/
  function () {
    var _ref14 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee14(account) {
      return regenerator_default.a.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return _this.contract.balanceOf(account).call({
                _isConstant: true
              });

            case 2:
              return _context14.abrupt("return", _context14.sent);

            case 3:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x17) {
      return _ref14.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.acceptOwnership =
  /*#__PURE__*/
  function () {
    var _ref15 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee15(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context15.next = 4;
              return _this.contract.acceptOwnership().send(txParams);

            case 4:
              txHash = _context15.sent;
              return _context15.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    }));

    return function (_x18) {
      return _ref15.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.maxSupplyToPurgeInUSD =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee16() {
    return regenerator_default.a.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            _context16.next = 2;
            return _this.contract.maxSupplyToPurgeInUSD().call({
              _isConstant: true
            });

          case 2:
            return _context16.abrupt("return", _context16.sent);

          case 3:
          case "end":
            return _context16.stop();
        }
      }
    }, _callee16);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.issue =
  /*#__PURE__*/
  function () {
    var _ref17 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee17(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context17.next = 4;
              return _this.contract.issue(account, amount).send(txParams);

            case 4:
              txHash = _context17.sent;
              return _context17.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17);
    }));

    return function (_x19, _x20, _x21) {
      return _ref17.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.owner =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee18() {
    return regenerator_default.a.wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            _context18.next = 2;
            return _this.contract.owner().call({
              _isConstant: true
            });

          case 2:
            return _context18.abrupt("return", _context18.sent);

          case 3:
          case "end":
            return _context18.stop();
        }
      }
    }, _callee18);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _synthetixProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setSynthetixProxy =
  /*#__PURE__*/
  function () {
    var _ref19 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee19(_synthetixProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context19.next = 4;
              return _this.contract.setSynthetixProxy(_synthetixProxy).send(txParams);

            case 4:
              txHash = _context19.sent;
              return _context19.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    return function (_x22, _x23) {
      return _ref19.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String
   **/


  this.symbol =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee20() {
    return regenerator_default.a.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return _this.contract.symbol().call({
              _isConstant: true
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _proxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setProxy =
  /*#__PURE__*/
  function () {
    var _ref21 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee21(_proxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context21.next = 4;
              return _this.contract.setProxy(_proxy).send(txParams);

            case 4:
              txHash = _context21.sent;
              return _context21.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x24, _x25) {
      return _ref21.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.selfDestruct =
  /*#__PURE__*/
  function () {
    var _ref22 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee22(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context22.next = 4;
              return _this.contract.selfDestruct().send(txParams);

            case 4:
              txHash = _context22.sent;
              return _context22.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));

    return function (_x26) {
      return _ref22.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.integrationProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee23() {
    return regenerator_default.a.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _this.contract.integrationProxy().call({
              _isConstant: true
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param account {String<TrxAddress>}
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.burn =
  /*#__PURE__*/
  function () {
    var _ref24 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee24(account, amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context24.next = 4;
              return _this.contract.burn(account, amount).send(txParams);

            case 4:
              txHash = _context24.sent;
              return _context24.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));

    return function (_x27, _x28, _x29) {
      return _ref24.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param _tokenState {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/


  this.setTokenState =
  /*#__PURE__*/
  function () {
    var _ref25 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee25(_tokenState, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context25.next = 4;
              return _this.contract.setTokenState(_tokenState).send(txParams);

            case 4:
              txHash = _context25.sent;
              return _context25.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25);
    }));

    return function (_x30, _x31) {
      return _ref25.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns BigNumber
   **/


  this.SELFDESTRUCT_DELAY =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee26() {
    return regenerator_default.a.wrap(function _callee26$(_context26) {
      while (1) {
        switch (_context26.prev = _context26.next) {
          case 0:
            _context26.next = 2;
            return _this.contract.SELFDESTRUCT_DELAY().call({
              _isConstant: true
            });

          case 2:
            return _context26.abrupt("return", _context26.sent);

          case 3:
          case "end":
            return _context26.stop();
        }
      }
    }, _callee26);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param to {String<TrxAddress>}
   * @param value {BigNumber}
   * @param txParams {TxParams}
   * @returns boolean
   **/

  this.transfer =
  /*#__PURE__*/
  function () {
    var _ref27 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee27(to, value, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context27.next = 4;
              return _this.contract.transfer(to, value).send(txParams);

            case 4:
              txHash = _context27.sent;
              return _context27.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x32, _x33, _x34) {
      return _ref27.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param addresses {address[]}
   * @param txParams {TxParams}
  
   **/


  this.purge =
  /*#__PURE__*/
  function () {
    var _ref28 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee28(addresses, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee28$(_context28) {
        while (1) {
          switch (_context28.prev = _context28.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context28.next = 4;
              return _this.contract.purge(addresses).send(txParams);

            case 4:
              txHash = _context28.sent;
              return _context28.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context28.stop();
          }
        }
      }, _callee28);
    }));

    return function (_x35, _x36) {
      return _ref28.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns boolean
   **/


  this.selfDestructInitiated =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee29() {
    return regenerator_default.a.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _this.contract.selfDestructInitiated().call({
              _isConstant: true
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param sender {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setMessageSender =
  /*#__PURE__*/
  function () {
    var _ref30 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee30(sender, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee30$(_context30) {
        while (1) {
          switch (_context30.prev = _context30.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context30.next = 4;
              return _this.contract.setMessageSender(sender).send(txParams);

            case 4:
              txHash = _context30.sent;
              return _context30.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context30.stop();
          }
        }
      }, _callee30);
    }));

    return function (_x37, _x38) {
      return _ref30.apply(this, arguments);
    };
  }();
  /**
   * Transaction (consumes gas, requires signer)
   * @param txParams {TxParams}
  
   **/


  this.initiateSelfDestruct =
  /*#__PURE__*/
  function () {
    var _ref31 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee31(txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee31$(_context31) {
        while (1) {
          switch (_context31.prev = _context31.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context31.next = 4;
              return _this.contract.initiateSelfDestruct().send(txParams);

            case 4:
              txHash = _context31.sent;
              return _context31.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context31.stop();
          }
        }
      }, _callee31);
    }));

    return function (_x39) {
      return _ref31.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.synthetixProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee32() {
    return regenerator_default.a.wrap(function _callee32$(_context32) {
      while (1) {
        switch (_context32.prev = _context32.next) {
          case 0:
            _context32.next = 2;
            return _this.contract.synthetixProxy().call({
              _isConstant: true
            });

          case 2:
            return _context32.abrupt("return", _context32.sent);

          case 3:
          case "end":
            return _context32.stop();
        }
      }
    }, _callee32);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.selfDestructBeneficiary =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee33() {
    return regenerator_default.a.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return _this.contract.selfDestructBeneficiary().call({
              _isConstant: true
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.feePoolProxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee34() {
    return regenerator_default.a.wrap(function _callee34$(_context34) {
      while (1) {
        switch (_context34.prev = _context34.next) {
          case 0:
            _context34.next = 2;
            return _this.contract.feePoolProxy().call({
              _isConstant: true
            });

          case 2:
            return _context34.abrupt("return", _context34.sent);

          case 3:
          case "end":
            return _context34.stop();
        }
      }
    }, _callee34);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.messageSender =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee35() {
    return regenerator_default.a.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return _this.contract.messageSender().call({
              _isConstant: true
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param _feePoolProxy {String<TrxAddress>}
   * @param txParams {TxParams}
  
   **/

  this.setFeePoolProxy =
  /*#__PURE__*/
  function () {
    var _ref36 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee36(_feePoolProxy, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee36$(_context36) {
        while (1) {
          switch (_context36.prev = _context36.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context36.next = 4;
              return _this.contract.setFeePoolProxy(_feePoolProxy).send(txParams);

            case 4:
              txHash = _context36.sent;
              return _context36.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context36.stop();
          }
        }
      }, _callee36);
    }));

    return function (_x40, _x41) {
      return _ref36.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns bytes32
   **/


  this.currencyKey =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee37() {
    return regenerator_default.a.wrap(function _callee37$(_context37) {
      while (1) {
        switch (_context37.prev = _context37.next) {
          case 0:
            _context37.next = 2;
            return _this.contract.currencyKey().call({
              _isConstant: true
            });

          case 2:
            return _context37.abrupt("return", _context37.sent);

          case 3:
          case "end":
            return _context37.stop();
        }
      }
    }, _callee37);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @param owner {String<TrxAddress>}
   * @param spender {String<TrxAddress>}
   * @returns BigNumber
   **/

  this.allowance =
  /*#__PURE__*/
  function () {
    var _ref38 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee38(owner, spender) {
      return regenerator_default.a.wrap(function _callee38$(_context38) {
        while (1) {
          switch (_context38.prev = _context38.next) {
            case 0:
              _context38.next = 2;
              return _this.contract.allowance(owner, spender).call({
                _isConstant: true
              });

            case 2:
              return _context38.abrupt("return", _context38.sent);

            case 3:
            case "end":
              return _context38.stop();
          }
        }
      }, _callee38);
    }));

    return function (_x42, _x43) {
      return _ref38.apply(this, arguments);
    };
  }();
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/


  this.tokenState =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee39() {
    return regenerator_default.a.wrap(function _callee39$(_context39) {
      while (1) {
        switch (_context39.prev = _context39.next) {
          case 0:
            _context39.next = 2;
            return _this.contract.tokenState().call({
              _isConstant: true
            });

          case 2:
            return _context39.abrupt("return", _context39.sent);

          case 3:
          case "end":
            return _context39.stop();
        }
      }
    }, _callee39);
  }));
  /**
   * Call (no gas consumed, doesn't require signer)
   * @returns String<TrxAddress>
   **/

  this.proxy =
  /*#__PURE__*/
  asyncToGenerator_default()(
  /*#__PURE__*/
  regenerator_default.a.mark(function _callee40() {
    return regenerator_default.a.wrap(function _callee40$(_context40) {
      while (1) {
        switch (_context40.prev = _context40.next) {
          case 0:
            _context40.next = 2;
            return _this.contract.proxy().call({
              _isConstant: true
            });

          case 2:
            return _context40.abrupt("return", _context40.sent);

          case 3:
          case "end":
            return _context40.stop();
        }
      }
    }, _callee40);
  }));
  /**
   * Transaction (consumes gas, requires signer)
   * @param amount {BigNumber}
   * @param txParams {TxParams}
  
   **/

  this.setTotalSupply =
  /*#__PURE__*/
  function () {
    var _ref41 = asyncToGenerator_default()(
    /*#__PURE__*/
    regenerator_default.a.mark(function _callee41(amount, txParams) {
      var txHash;
      return regenerator_default.a.wrap(function _callee41$(_context41) {
        while (1) {
          switch (_context41.prev = _context41.next) {
            case 0:
              txParams = txParams || {};
              txParams = shasta_iETH_objectSpread({
                // fee limit in SUN
                feeLimit: 100000000
              }, txParams);
              _context41.next = 4;
              return _this.contract.setTotalSupply(amount).send(txParams);

            case 4:
              txHash = _context41.sent;
              return _context41.abrupt("return", {
                hash: txHash
              });

            case 6:
            case "end":
              return _context41.stop();
          }
        }
      }, _callee41);
    }));

    return function (_x44, _x45) {
      return _ref41.apply(this, arguments);
    };
  }();
}

/* harmony default export */ var shasta_iETH = (iETH_iETH);
// CONCATENATED MODULE: ./src/contracts/shasta/index.js
























/* harmony default export */ var contracts_shasta = ({
  Depot: contracts_shasta_Depot,
  EscrowChecker: contracts_shasta_EscrowChecker,
  ExchangeRates: contracts_shasta_ExchangeRates,
  FeePool: contracts_shasta_FeePool,
  ProxyERC20: contracts_shasta_ProxyERC20,
  Synth: contracts_shasta_Synth,
  Synthetix: contracts_shasta_Synthetix,
  SynthetixEscrow: contracts_shasta_SynthetixEscrow,
  SynthetixState: contracts_shasta_SynthetixState,
  RewardEscrow: contracts_shasta_RewardEscrow,
  DappMaintenance: contracts_shasta_DappMaintenance,
  ArbRewarder: contracts_shasta_ArbRewarder,
  ODR: shasta_ODR,
  sEUR: shasta_sEUR,
  sUSD: shasta_sUSD,
  sAUD: shasta_sAUD,
  sGBP: shasta_sGBP,
  sCHF: shasta_sCHF,
  sBTC: shasta_sBTC,
  sETH: shasta_sETH,
  sTRX: shasta_sTRX,
  iBTC: shasta_iBTC,
  iTRX: shasta_iTRX,
  iETH: shasta_iETH
});
// CONCATENATED MODULE: ./src/contracts/index.js


/* harmony default export */ var contracts = ({
  mainnet: contracts_mainnet,
  shasta: contracts_shasta
});
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js
var slicedToArray = __webpack_require__(50);
var slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);

// CONCATENATED MODULE: ./src/util/index.js







function util_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function util_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { util_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { util_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




var Interface = ethers["utils"].Interface;
var GWEI = 1000000000;
var DEFAULT_GAS_LIMIT = 200000;

var _strToBytes = function strToBytes(text) {
  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : text.length;

  if (text.length > length) {
    throw new Error("Cannot convert String of ".concat(text.length, " to bytes").concat(length, " (it's too big)"));
  } // extrapolated from https://github.com/ethers-io/ethers.js/issues/66#issuecomment-344347642


  var result = ethers["utils"].hexlify(ethers["utils"].toUtf8Bytes(text));

  while (result.length < 2 + length * 2) {
    result += '0';
  }

  return ethers["utils"].arrayify(result);
};

var util_Util =
/*#__PURE__*/
function () {
  /**
   * set of helper functions
   * @param contractSettings
   */
  function Util(contractSettings) {
    classCallCheck_default()(this, Util);

    this.contractSettings = contractSettings;
    var _contracts$contractSe = contracts[contractSettings.network],
        Depot = _contracts$contractSe.Depot,
        Synth = _contracts$contractSe.Synth,
        Synthetix = _contracts$contractSe.Synthetix;
    this.depot = new Depot(contractSettings);
    this.synth = new Synth(contractSettings);
    this.synthetix = new Synthetix(contractSettings);
    this.depotInterface = new Interface(contractSettings.ABIS.Depot);
    this.synthInterface = new Interface(contractSettings.ABIS.Synth);
    this.signAndSendTransaction = this.signAndSendTransaction.bind(this);
    this.getEventLogs = this.getEventLogs.bind(this);
    this.getLatestConversions = this.getLatestConversions.bind(this);
    this.getGasAndSpeedInfo = this.getGasAndSpeedInfo.bind(this);
    this.waitForTransaction = this.waitForTransaction.bind(this);
    this.getGasEstimate = this.getGasEstimate.bind(this);
  }
  /**
   * converts number (as a string) to a BigNumber
   * @param value {String}
   * @returns {BigNumber}
   */
  // @TODO @kev replace all calls to this to .parseTron


  createClass_default()(Util, [{
    key: "parseEther",
    value: function parseEther(value) {
      return ethers["utils"].parseEther(value);
    }
    /**
     * converts number (as a string) to a BigNumber
     * @param value {String}
     * @returns {BigNumber}
     */

  }, {
    key: "parseTron",
    value: function parseTron(value) {
      return TronWeb_node_default.a.toBigNumber(TronWeb_node_default.a.toSun(value));
    }
    /**
     * converts BigNumber to number (as a string)
     * @param value {BigNunber}
     * @returns {String}
     */
    // @TODO @kev replace all calls to this to .formatTron

  }, {
    key: "formatEther",
    value: function formatEther(value) {
      return ethers["utils"].formatEther(value);
    }
    /**
     * converts BigNumber to number (as a string)
     * @param value {BigNunber}
     * @returns {String}
     */

  }, {
    key: "formatTron",
    value: function formatTron(value) {
      return TronWeb_node_default.a.fromSun(value).toString();
    }
    /**
     * converts string to bytes
     * @param stringValue
     * @returns {Utf8Bytes}
     */

  }, {
    key: "toUtf8Bytes",
    value: function toUtf8Bytes(stringValue) {
      return ethers["utils"].toUtf8Bytes(stringValue);
    }
    /**
     * converts a string to a bytes4 array (right padding for Solidity)
     * @param text {String}
     */

  }, {
    key: "toUtf8Bytes4",
    value: function toUtf8Bytes4(text) {
      return _strToBytes(text, 4);
    }
    /**
     * converts a string to a bytes32 array (right padding for Solidity)
     * @param text {String}
     */

  }, {
    key: "toUtf8Bytes32",
    value: function toUtf8Bytes32(text) {
      return _strToBytes(text, 32);
    }
    /**
     * converts a string to a bytesN array (right padding for Solidity).
     * @param text {String}
     * @param length {Number}
     */

  }, {
    key: "strToBytes",
    value: function strToBytes(text) {
      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : text.length;
      return _strToBytes(text, length);
    }
    /**
     * Manually sign any transaction with custom signer
     * @param transaction
     * @param fromAddress
     * @returns {Promise<void>}
     */
    // TODO @kev

  }, {
    key: "signAndSendTransaction",
    value: function () {
      var _signAndSendTransaction = asyncToGenerator_default()(
      /*#__PURE__*/
      regenerator_default.a.mark(function _callee(_ref) {
        var transaction, fromAddress, signedTx, signedSerialziedTx;
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                transaction = _ref.transaction, fromAddress = _ref.fromAddress;
                _context.next = 3;
                return this.contractSettings.provider.getTransactionCount(fromAddress);

              case 3:
                transaction.nonce = _context.sent;
                transaction.gasLimit = 200000;
                transaction.chainId = this.contractSettings.networkId;
                _context.next = 8;
                return this.contractSettings.signer.sign(transaction);

              case 8:
                signedTx = _context.sent;
                signedSerialziedTx = '0x' + signedTx.serialize().toString('hex');
                _context.next = 12;
                return this.contractSettings.provider.sendTransaction(signedSerialziedTx);

              case 12:
                return _context.abrupt("return", _context.sent);

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function signAndSendTransaction(_x) {
        return _signAndSendTransaction.apply(this, arguments);
      }

      return signAndSendTransaction;
    }()
    /**
     * Returns event logs for a specific contract event and fetches block timestamp for each transaction
     * @param contractAddress {String} in format "0x1234567890abcdef"
     * @param event - {Object<ethers.Interface>}ethers.js event interface
     * @param fromBlock
     * @returns {Promise<*>}
     */
    // TODO @kev

  }, {
    key: "getEventLogs",
    value: function () {
      var _getEventLogs = asyncToGenerator_default()(
      /*#__PURE__*/
      regenerator_default.a.mark(function _callee2(contractAddress, event, fromBlock) {
        var _this = this;

        var blockTimestampMap, logs, events, blocks;
        return regenerator_default.a.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                blockTimestampMap = {};
                _context2.prev = 1;
                _context2.next = 4;
                return this.contractSettings.provider.getLogs({
                  fromBlock: fromBlock,
                  address: contractAddress,
                  topics: event.topics
                });

              case 4:
                logs = _context2.sent;
                events = logs.map(function (log) {
                  return util_objectSpread({}, log, {
                    parsedData: event.parse(log.topics, log.data)
                  });
                });
                _context2.next = 8;
                return Promise.all(events.map(function (evt) {
                  return _this.contractSettings.provider.getBlock(evt.blockNumber);
                }));

              case 8:
                blocks = _context2.sent;
                blocks.forEach(function (block) {
                  blockTimestampMap[block.number] = new Date(block.timestamp * 1000);
                });
                events.forEach(function (evt) {
                  event.timestamp = blockTimestampMap[evt.blockNumber];
                });
                return _context2.abrupt("return", events);

              case 14:
                _context2.prev = 14;
                _context2.t0 = _context2["catch"](1);
                console.log(_context2.t0);

              case 17:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[1, 14]]);
      }));

      function getEventLogs(_x2, _x3, _x4) {
        return _getEventLogs.apply(this, arguments);
      }

      return getEventLogs;
    }()
  }, {
    key: "getLatestConversions",
    value: function () {
      var _getLatestConversions = asyncToGenerator_default()(
      /*#__PURE__*/
      regenerator_default.a.mark(function _callee3() {
        var latestBlockNumber, contractAddr, ExchangeEvent, events;
        return regenerator_default.a.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.contractSettings.provider.getBlockNumber();

              case 2:
                latestBlockNumber = _context3.sent;
                contractAddr = this.contractSettings.addressList.Depot;
                ExchangeEvent = this.depotInterface.events.Exchange;
                _context3.next = 7;
                return this.getEventLogs(contractAddr, ExchangeEvent, latestBlockNumber - 10000);

              case 7:
                events = _context3.sent;

                if (!(events.length < 5)) {
                  _context3.next = 12;
                  break;
                }

                _context3.next = 11;
                return this.getEventLogs(contractAddr, ExchangeEvent, latestBlockNumber - 100000);

              case 11:
                events = _context3.sent;

              case 12:
                if (!(!events || !events.length)) {
                  _context3.next = 14;
                  break;
                }

                return _context3.abrupt("return", []);

              case 14:
                return _context3.abrupt("return", events.reverse().slice(0, 20));

              case 15:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getLatestConversions() {
        return _getLatestConversions.apply(this, arguments);
      }

      return getLatestConversions;
    }()
  }, {
    key: "formatBigNumber",
    value: function formatBigNumber(amount, decimals) {
      if (!amount) return '-';
      var amountString = ethers["utils"].formatEther(amount, {
        commify: true
      });

      if (typeof decimals === 'undefined') {
        return amountString;
      } else {
        var _amountString$split = amountString.split('.'),
            _amountString$split2 = slicedToArray_default()(_amountString$split, 2),
            first = _amountString$split2[0],
            remainder = _amountString$split2[1];

        var joined = "".concat(first, ".").concat(remainder.substring(0, decimals));
        if (joined.endsWith('.')) return joined.substring(0, joined.length - 1);
        return joined;
      }
    }
  }, {
    key: "formatNumber",
    value: function formatNumber(amount, decimal) {
      if (amount === '' || amount === null) {
        return '';
      }

      return parseFloat(amount).toFixed(decimal);
    }
  }, {
    key: "formatNumberMaxDecimal",
    value: function formatNumberMaxDecimal(amount, decimal) {
      return Math.round(amount * Math.pow(10, decimal)) / Math.pow(10, decimal);
    }
  }, {
    key: "getTransactionInformation",
    value: function () {
      var _getTransactionInformation = asyncToGenerator_default()(
      /*#__PURE__*/
      regenerator_default.a.mark(function _callee4(transactionHash) {
        return regenerator_default.a.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!(typeof transactionHash !== 'string')) {
                  _context4.next = 2;
                  break;
                }

                throw new Error('transactionHash must be a string');

              case 2:
                _context4.next = 4;
                return this.contractSettings.provider.getTransaction(transactionHash);

              case 4:
                return _context4.abrupt("return", _context4.sent);

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getTransactionInformation(_x5) {
        return _getTransactionInformation.apply(this, arguments);
      }

      return getTransactionInformation;
    }()
    /**
     * Estimates gas for a transaction
     * @param toAddress - where to send transaction
     * @param ethValue - optional - if function requires ETH to be sent
     * @param data - optional if function requires data to be sent
     * example  (new Interface(CONTRACT_ABIS.Depot).functions.exchangeEtherForSynths()).data
     * example2 synthInterface.functions.approve(MAINNET_ADDRESSES.Depot, utils.parseEther("2")).data;
     * @returns {Promise<String>}
     */

  }, {
    key: "getGasEstimate",
    value: function () {
      var _getGasEstimate = asyncToGenerator_default()(
      /*#__PURE__*/
      regenerator_default.a.mark(function _callee5(toAddress, ethValue, data) {
        var privateKey, wallet, tx, estimate;
        return regenerator_default.a.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // to get the gas estimate, the contract needs to be
                // initialized with a wallet or a customSigner
                privateKey = '0x0123456789012345678901234567890123456789012345678901234567890123';
                wallet = new ethers["Wallet"](privateKey, this.provider);
                tx = {
                  to: toAddress
                };

                if (ethValue) {
                  tx.value = ethValue;
                }

                if (data) {
                  tx.data = data;
                }

                _context5.next = 7;
                return wallet.estimateGas(tx);

              case 7:
                estimate = _context5.sent;
                return _context5.abrupt("return", estimate.toString());

              case 9:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getGasEstimate(_x6, _x7, _x8) {
        return _getGasEstimate.apply(this, arguments);
      }

      return getGasEstimate;
    }()
    /**
     * Waits for ethereum transaction to succeed or fail. Checks the status every second.
     * @param transactionHash
     * @returns {Promise<*>}
     */

  }, {
    key: "waitForTransaction",
    value: function () {
      var _waitForTransaction = asyncToGenerator_default()(
      /*#__PURE__*/
      regenerator_default.a.mark(function _callee7(transactionHash) {
        var _this2 = this;

        return regenerator_default.a.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                return _context7.abrupt("return", new Promise(function (resolve) {
                  var check =
                  /*#__PURE__*/
                  function () {
                    var _ref2 = asyncToGenerator_default()(
                    /*#__PURE__*/
                    regenerator_default.a.mark(function _callee6() {
                      var transactionInformation;
                      return regenerator_default.a.wrap(function _callee6$(_context6) {
                        while (1) {
                          switch (_context6.prev = _context6.next) {
                            case 0:
                              _context6.next = 2;
                              return _this2.getTransactionInformation(transactionHash);

                            case 2:
                              transactionInformation = _context6.sent;

                              if (transactionInformation && transactionInformation.blockHash) {
                                resolve(true);
                              } else {
                                setTimeout(check, 1000);
                              }

                            case 4:
                            case "end":
                              return _context6.stop();
                          }
                        }
                      }, _callee6);
                    }));

                    return function check() {
                      return _ref2.apply(this, arguments);
                    };
                  }();

                  check();
                }));

              case 1:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function waitForTransaction(_x9) {
        return _waitForTransaction.apply(this, arguments);
      }

      return waitForTransaction;
    }()
  }, {
    key: "getEtherPrice",
    value: function () {
      var _getEtherPrice = asyncToGenerator_default()(
      /*#__PURE__*/
      regenerator_default.a.mark(function _callee8() {
        return regenerator_default.a.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this.depot.usdToEthPrice();

              case 2:
                return _context8.abrupt("return", _context8.sent);

              case 3:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function getEtherPrice() {
        return _getEtherPrice.apply(this, arguments);
      }

      return getEtherPrice;
    }()
  }, {
    key: "getSynthetixPrice",
    value: function () {
      var _getSynthetixPrice = asyncToGenerator_default()(
      /*#__PURE__*/
      regenerator_default.a.mark(function _callee9() {
        return regenerator_default.a.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this.depot.usdToSnxPrice();

              case 2:
                return _context9.abrupt("return", _context9.sent);

              case 3:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function getSynthetixPrice() {
        return _getSynthetixPrice.apply(this, arguments);
      }

      return getSynthetixPrice;
    }()
    /**
     * Returns the object with estimates for slow, average and fast gas prices and approximate waiting times
     * @returns {Promise<{gasFastGwei: number, gasAverageGwei: number, gasSlowGwei: number, timeFastMinutes: *, timeAverageMinutes: *, timeSlowMinutes: *}>}
     */

  }, {
    key: "getGasAndSpeedInfo",
    value: function () {
      var _getGasAndSpeedInfo = asyncToGenerator_default()(
      /*#__PURE__*/
      regenerator_default.a.mark(function _callee10() {
        var convetorTxGasPrice, _ref3, _ref4, egsData, ethPrice, data;

        return regenerator_default.a.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                // ethToSynth uses approx 80,000, synthToHav 40,000 but approve 70,000; 100,000 is safe average
                convetorTxGasPrice = DEFAULT_GAS_LIMIT;
                _context10.next = 3;
                return Promise.all([fetch('https://ethgasstation.info/json/ethgasAPI.json'), this.getEtherPrice()]);

              case 3:
                _ref3 = _context10.sent;
                _ref4 = slicedToArray_default()(_ref3, 2);
                egsData = _ref4[0];
                ethPrice = _ref4[1];
                _context10.next = 9;
                return egsData.json();

              case 9:
                egsData = _context10.sent;
                ethPrice = Number(ethers["utils"].formatEther(ethPrice));
                data = {
                  gasFastGwei: egsData.fast / 10,
                  gasAverageGwei: egsData.average / 10,
                  gasSlowGwei: egsData.safeLow / 10,
                  timeFastMinutes: egsData.fastWait,
                  timeAverageMinutes: egsData.avgWait,
                  timeSlowMinutes: egsData.safeLowWait
                };
                data.priceFastUsd = Math.round(data.gasFastGwei * ethPrice * convetorTxGasPrice / GWEI * 1000) / 1000;
                data.priceAverageUsd = Math.round(data.gasAverageGwei * ethPrice * convetorTxGasPrice / GWEI * 1000) / 1000;
                data.priceSlowUsd = Math.round(data.gasSlowGwei * ethPrice * convetorTxGasPrice / GWEI * 1000) / 1000;
                return _context10.abrupt("return", data);

              case 16:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function getGasAndSpeedInfo() {
        return _getGasAndSpeedInfo.apply(this, arguments);
      }

      return getGasAndSpeedInfo;
    }()
  }]);

  return Util;
}();

/* harmony default export */ var util = (util_Util);
// CONCATENATED MODULE: ./lib/signers/privateKeySigner.js



var privateKeySigner_PrivateKeySigner = function PrivateKeySigner(provider, networkId, privateKey) {
  if (networkId && !provider) {
    provider = Object(ethers["getDefaultProvider"])(src_contractSettings.SUPPORTED_NETWORKS[networkId]);
  }

  return new ethers["Wallet"](privateKey, provider || Object(ethers["getDefaultProvider"])());
};

/* harmony default export */ var privateKeySigner = (privateKeySigner_PrivateKeySigner);
// CONCATENATED MODULE: ./src/SynthetixJsBase.js







var SynthetixJsBase_SynthetixJsBase = function SynthetixJsBase(contractOpts) {
  var _this = this;

  var signers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    PrivateKey: privateKeySigner
  };

  classCallCheck_default()(this, SynthetixJsBase);

  // prevent warnings about "Multiple definitions" for transfer* function from Synth contract
  ethers["errors"].setLogLevel('error');
  var contractSettings = new src_contractSettings(contractOpts);
  this.signers = signers;
  this.contractSettings = contractSettings;
  var network = contractSettings.network;
  this.network = network;
  var contractForEnv = contracts[network];
  Object.keys(contractForEnv).forEach(function (name) {
    // for each synthetix symbol (sUSD, sBTC, sETH, etc.)
    // one contract per symbol
    var Contract = contractForEnv[name];
    _this[name] = new Contract(contractSettings);
  });
  this.util = new util(contractSettings);
  this.utils = this.util;
  this.ethers = ethers;
  this.SUPPORTED_NETWORKS = src_contractSettings.SUPPORTED_NETWORKS;
};

/* harmony default export */ var src_SynthetixJsBase = (SynthetixJsBase_SynthetixJsBase);
// CONCATENATED MODULE: ./src/index.node.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SynthetixJs", function() { return index_node_SynthetixJs; });







var index_node_signers = {
  PrivateKey: privateKeySigner
};
var index_node_SynthetixJs =
/*#__PURE__*/
function (_SynthetixJsBase) {
  inherits_default()(SynthetixJs, _SynthetixJsBase);

  /**
   * Creates instances of Synthetix contracts based on ContractSettings.
   * Usage example:
   * const {SynthetixJs} = require('SynthetixJs');
   * const snxjs = new SynthetixJs(); //uses default ContractSettings - ethers.js default provider, mainnet
   * const totalSupply = await snxjs.Synthetix.totalSupply();
   * @constructor
   * @param contractSettings {ContractSettings}
   */
  function SynthetixJs(contractSettings) {
    var _this;

    classCallCheck_default()(this, SynthetixJs);

    _this = possibleConstructorReturn_default()(this, getPrototypeOf_default()(SynthetixJs).call(this, contractSettings, index_node_signers)); // use diff env variables for mainnet and shasta

    var privKey;
    var isMainnet = contractSettings.networkId === 1;

    if (isMainnet) {
      privKey = process.env.DEPLOY_PRIVATE_KEY_MAINNET;
    } else {
      privKey = process.env.PRIVATE_KEY;
    }

    if (privKey) {
      _this.contractSettings.tronWeb.setPrivateKey(privKey);
    }

    return _this;
  }

  return SynthetixJs;
}(src_SynthetixJsBase);
index_node_SynthetixJs.signers = index_node_signers;
index_node_SynthetixJs.utils = ethers["utils"]; // shortcut to ethers utils without having to create instance

/***/ })
/******/ ]);
});